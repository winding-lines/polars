Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.all", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.count", "polars.internals.lazyframe.groupby.LazyGroupBy.first", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.last", "polars.internals.lazyframe.groupby.LazyGroupBy.max", "polars.internals.lazyframe.groupby.LazyGroupBy.mean", "polars.internals.lazyframe.groupby.LazyGroupBy.median", "polars.internals.lazyframe.groupby.LazyGroupBy.min", "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "polars.internals.lazyframe.groupby.LazyGroupBy.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 82, 91, 109, 119, 122, 123, 220, 238, 250, 544, 620], "refer": [0, 93, 94, 97, 127, 238, 410, 469, 544, 813, 877, 915], "input": [0, 56, 84, 93, 94, 97, 134, 145, 173, 187, 193, 215, 218, 238, 350, 384, 395, 404, 440, 492, 494, 496, 497, 499, 510, 511, 519, 520, 523, 532, 544, 553, 565, 572, 597, 604, 614, 618, 636, 793, 915], "output": [0, 25, 28, 29, 66, 97, 113, 123, 146, 147, 158, 168, 175, 184, 187, 211, 215, 238, 246, 250, 386, 387, 394, 487, 492, 500, 519, 530, 544, 553, 573, 574, 583, 588, 597, 614, 617, 620, 636, 645, 903, 915], "seri": [0, 1, 20, 47, 57, 58, 59, 60, 61, 64, 65, 66, 81, 83, 86, 91, 112, 113, 115, 119, 123, 130, 138, 140, 142, 143, 148, 151, 152, 154, 156, 164, 165, 169, 180, 181, 195, 199, 204, 205, 219, 238, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264, 265, 270, 273, 274, 281, 282, 285, 286, 287, 290, 296, 297, 301, 302, 314, 316, 318, 321, 324, 326, 328, 331, 335, 336, 338, 341, 344, 352, 353, 359, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 385, 386, 406, 410, 411, 412, 413, 414, 416, 428, 429, 432, 435, 436, 443, 458, 463, 469, 473, 478, 479, 480, 481, 486, 492, 493, 495, 498, 501, 503, 504, 505, 511, 512, 514, 516, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 531, 532, 533, 534, 535, 536, 544, 553, 569, 614, 619, 636, 907, 909, 911, 914, 918, 919, 920], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 45, 47, 56, 57, 58, 59, 60, 61, 63, 64, 65, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 106, 107, 108, 111, 113, 114, 236, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 644, 665, 683, 692, 707, 708, 858, 861, 873, 874, 884, 893, 894, 903, 915], "lazyfram": [0, 1, 44, 46, 56, 57, 58, 59, 60, 63, 64, 104, 105, 106, 107, 108, 109, 111, 115, 162, 174, 238, 287, 356, 544, 553, 635, 921], "express": [0, 61, 63, 66, 113, 115, 116, 123, 134, 136, 138, 145, 171, 175, 183, 187, 193, 215, 218, 220, 238, 246, 247, 249, 250, 260, 267, 269, 287, 298, 299, 300, 303, 309, 311, 315, 332, 350, 353, 356, 363, 365, 369, 372, 377, 380, 385, 386, 387, 388, 392, 393, 394, 395, 404, 406, 407, 408, 413, 427, 428, 429, 431, 433, 438, 440, 444, 452, 453, 469, 475, 478, 484, 486, 489, 493, 494, 496, 497, 499, 500, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 523, 525, 527, 528, 529, 530, 532, 533, 536, 543, 553, 559, 564, 565, 566, 569, 572, 591, 597, 599, 600, 601, 602, 604, 614, 615, 618, 620, 636, 663, 665, 696, 697, 698, 706, 715, 736, 758, 770, 831, 838, 852, 860, 861, 915], "extend": [0, 84, 238, 353, 544, 553, 644, 758, 915], "function": [0, 57, 58, 59, 60, 65, 82, 93, 94, 97, 104, 114, 123, 127, 133, 140, 167, 174, 175, 203, 206, 209, 210, 220, 238, 247, 250, 287, 309, 336, 347, 348, 349, 386, 387, 388, 404, 416, 417, 418, 419, 420, 421, 423, 424, 425, 437, 482, 490, 492, 503, 504, 511, 512, 514, 519, 527, 544, 553, 583, 587, 590, 611, 620, 636, 645, 683, 706, 707, 740, 752, 753, 754, 755, 819, 833, 834, 840, 845, 897, 915], "data": [0, 1, 13, 16, 26, 31, 47, 56, 57, 59, 64, 71, 72, 76, 78, 81, 82, 83, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 111, 112, 114, 115, 116, 122, 124, 125, 135, 144, 145, 146, 158, 159, 160, 162, 173, 174, 178, 183, 184, 191, 198, 202, 203, 215, 217, 236, 238, 295, 314, 337, 344, 364, 371, 373, 410, 426, 427, 437, 469, 482, 484, 497, 530, 544, 553, 557, 558, 566, 572, 573, 590, 601, 602, 614, 636, 644, 690, 695, 699, 712, 714, 748, 813, 829, 830, 840, 845, 877, 895, 896, 897, 898, 900, 905, 914, 915], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 71, 81, 83, 84, 85, 86, 87, 91, 93, 94, 96, 97, 104, 105, 110, 111, 112, 115, 118, 119, 123, 140, 144, 146, 147, 148, 159, 198, 202, 203, 205, 207, 238, 250, 274, 287, 295, 296, 298, 299, 300, 316, 318, 321, 324, 326, 328, 331, 335, 338, 350, 361, 367, 369, 370, 388, 413, 464, 465, 466, 469, 482, 492, 497, 506, 507, 508, 510, 511, 518, 544, 553, 559, 564, 566, 573, 574, 591, 600, 601, 602, 609, 636, 670, 683, 690, 692, 696, 697, 698, 716, 718, 721, 727, 729, 732, 735, 739, 742, 766, 840, 872, 873, 874, 895, 896, 898, 906, 915], "config": [0, 56, 187, 215, 238, 553, 597, 614, 636], "except": [0, 149, 161, 196, 238, 510, 553, 579, 636, 896, 905, 915], "test": [0, 97, 553, 575, 582, 636], "util": [0, 514, 553, 566, 636], "sql": [0, 26, 44, 95, 160, 238, 553], "These": [1, 120, 238, 341, 543, 745], "allow": [1, 47, 71, 82, 104, 106, 107, 108, 109, 115, 116, 122, 158, 161, 162, 183, 184, 185, 203, 217, 238, 332, 412, 427, 469, 544, 578, 579, 583, 601, 602, 615, 636, 736, 815, 830, 832, 877, 897, 915], "you": [1, 30, 56, 81, 83, 84, 85, 87, 91, 93, 94, 97, 98, 102, 104, 111, 119, 123, 131, 135, 158, 161, 171, 183, 184, 200, 202, 206, 220, 238, 250, 269, 298, 299, 300, 356, 365, 386, 388, 412, 417, 418, 419, 420, 421, 423, 424, 425, 454, 457, 469, 493, 503, 512, 544, 559, 562, 575, 579, 582, 600, 602, 620, 636, 644, 665, 696, 697, 698, 770, 815, 862, 865, 877, 896, 905, 915], "regist": [1, 57, 58, 59, 60], "custom": [1, 57, 58, 59, 60, 123, 220, 238, 250, 287, 386, 416, 492, 519, 544, 583, 620, 636, 645, 683, 819, 915], "dedic": [1, 82, 158, 184, 238], "namespac": [1, 237, 543, 553, 635], "underli": [1, 67, 74, 81, 83, 84, 85, 87, 102, 115, 116, 135, 158, 159, 184, 198, 238, 291, 314, 315, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 335, 337, 342, 343, 344, 345, 412, 426, 444, 446, 544, 636, 644, 686, 714, 715, 717, 720, 722, 726, 728, 731, 733, 734, 737, 738, 739, 741, 746, 747, 748, 749, 815, 829, 840, 852, 854, 892, 896, 915], "polar": [1, 238, 543, 544, 553, 636, 915, 921, 922], "class": [1, 2, 3, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 86, 113, 114, 202, 203, 238, 544, 553, 636, 895, 896, 915, 921], "without": [1, 65, 96, 99, 103, 105, 109, 209, 210, 238, 250, 309, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 529, 544, 611, 636, 706, 707, 712, 740, 915], "requir": [1, 30, 86, 111, 112, 127, 183, 203, 238, 347, 348, 349, 432, 469, 484, 544, 602, 636, 753, 754, 755, 839, 877, 896, 897, 900, 915], "subclass": [1, 238], "mixin": 1, "expr": [1, 56, 57, 58, 59, 60, 61, 64, 66, 134, 136, 138, 160, 161, 171, 175, 183, 187, 215, 238, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 544, 545, 548, 549, 550, 565, 567, 569, 578, 579, 592, 597, 599, 614, 636, 663, 665, 706, 715, 759, 770, 838, 852, 856, 875, 887, 915], "ar": [1, 9, 15, 30, 47, 66, 73, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 109, 111, 112, 114, 115, 118, 120, 122, 123, 127, 131, 133, 136, 140, 145, 146, 147, 158, 161, 162, 167, 168, 173, 183, 184, 187, 193, 199, 203, 210, 211, 215, 218, 238, 247, 287, 305, 307, 308, 312, 313, 336, 341, 346, 347, 348, 349, 365, 367, 369, 370, 371, 373, 374, 375, 378, 388, 404, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 437, 439, 440, 454, 457, 458, 476, 493, 494, 496, 499, 500, 530, 532, 537, 538, 540, 543, 544, 545, 548, 549, 550, 553, 562, 567, 572, 573, 574, 575, 579, 582, 583, 587, 588, 591, 594, 597, 601, 602, 604, 611, 614, 615, 618, 636, 642, 644, 683, 704, 705, 740, 745, 751, 752, 753, 754, 755, 765, 770, 774, 777, 778, 779, 780, 781, 782, 789, 813, 817, 819, 825, 842, 845, 862, 865, 866, 885, 896, 897, 905, 907, 909, 911, 915, 918, 919, 920], "all": [1, 6, 12, 15, 20, 23, 31, 63, 64, 66, 81, 84, 86, 87, 88, 93, 94, 96, 97, 98, 102, 104, 106, 107, 113, 114, 116, 131, 137, 149, 154, 156, 158, 159, 162, 167, 170, 171, 178, 183, 184, 192, 196, 201, 207, 209, 211, 238, 248, 249, 269, 274, 284, 287, 289, 303, 309, 313, 350, 360, 361, 364, 367, 370, 374, 375, 377, 380, 382, 386, 387, 399, 403, 407, 410, 415, 432, 438, 445, 451, 453, 456, 459, 460, 462, 468, 475, 487, 497, 510, 512, 527, 532, 544, 553, 559, 562, 564, 566, 568, 583, 587, 591, 600, 603, 609, 615, 636, 665, 670, 680, 683, 706, 712, 772, 786, 813, 846, 853, 859, 861, 864, 867, 868, 870, 876, 915], "support": [1, 30, 64, 81, 82, 83, 84, 85, 86, 87, 95, 96, 97, 105, 113, 116, 120, 122, 158, 159, 184, 192, 193, 200, 203, 238, 282, 404, 438, 440, 463, 497, 544, 603, 604, 636, 678, 846, 871, 897, 915], "target": [1, 62, 238, 450, 469, 858, 877], "thi": [1, 6, 23, 25, 28, 30, 46, 47, 56, 63, 64, 65, 81, 83, 84, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 122, 123, 127, 131, 132, 133, 135, 140, 145, 146, 147, 148, 152, 154, 156, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 183, 184, 185, 187, 190, 192, 194, 195, 198, 200, 202, 203, 206, 207, 209, 210, 211, 212, 213, 215, 216, 220, 237, 238, 247, 249, 250, 259, 262, 269, 270, 274, 283, 287, 296, 303, 309, 314, 322, 332, 335, 336, 344, 352, 363, 364, 365, 369, 380, 385, 386, 388, 392, 393, 394, 395, 401, 402, 404, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 429, 431, 432, 433, 438, 439, 440, 455, 456, 461, 462, 468, 469, 472, 483, 484, 485, 486, 487, 490, 493, 498, 501, 503, 505, 511, 512, 514, 529, 533, 544, 553, 554, 556, 559, 562, 564, 566, 572, 573, 574, 576, 579, 583, 587, 588, 591, 594, 597, 599, 600, 601, 602, 603, 609, 611, 614, 615, 616, 617, 620, 635, 636, 644, 645, 654, 657, 665, 666, 670, 679, 692, 706, 707, 712, 714, 715, 722, 736, 739, 740, 748, 752, 757, 764, 765, 771, 776, 777, 783, 785, 787, 790, 794, 796, 797, 798, 799, 801, 802, 804, 805, 807, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 826, 827, 828, 830, 833, 834, 835, 838, 839, 840, 841, 846, 847, 849, 863, 864, 869, 870, 876, 877, 880, 881, 884, 885, 892, 894, 895, 896, 897, 899, 900, 902, 904, 905, 915], "featur": [1, 30, 47, 62, 238], "i": [1, 12, 25, 28, 29, 47, 56, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 77, 79, 81, 82, 83, 84, 85, 86, 87, 90, 93, 94, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 122, 123, 131, 133, 141, 144, 145, 146, 147, 148, 152, 153, 155, 157, 158, 159, 161, 162, 165, 167, 168, 171, 173, 174, 175, 183, 184, 185, 192, 193, 195, 198, 203, 206, 207, 209, 210, 211, 220, 237, 238, 247, 248, 249, 250, 260, 269, 272, 282, 286, 287, 309, 315, 332, 336, 341, 347, 348, 349, 352, 361, 363, 365, 378, 386, 388, 395, 404, 410, 412, 414, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 433, 434, 437, 438, 439, 440, 444, 445, 450, 451, 453, 455, 456, 458, 461, 462, 463, 466, 468, 469, 472, 487, 491, 493, 497, 498, 501, 503, 504, 505, 512, 518, 529, 533, 544, 559, 562, 564, 566, 572, 573, 574, 577, 579, 581, 583, 587, 588, 591, 600, 601, 602, 603, 604, 609, 611, 617, 620, 636, 643, 644, 645, 665, 668, 678, 682, 706, 707, 715, 736, 740, 745, 752, 753, 754, 755, 757, 765, 766, 769, 771, 773, 783, 784, 785, 787, 788, 789, 813, 815, 817, 830, 831, 832, 833, 834, 835, 841, 842, 845, 846, 849, 852, 853, 858, 859, 861, 863, 864, 866, 869, 870, 871, 874, 876, 880, 892, 896, 897, 903, 904, 905, 915], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 26, 30, 47, 56, 65, 66, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 119, 123, 129, 131, 136, 137, 140, 145, 146, 147, 154, 156, 158, 159, 161, 165, 167, 170, 171, 174, 175, 183, 185, 187, 193, 195, 201, 203, 206, 207, 209, 210, 211, 215, 218, 220, 238, 245, 250, 260, 269, 287, 291, 292, 296, 309, 312, 313, 344, 346, 347, 348, 349, 355, 356, 364, 365, 378, 386, 388, 391, 404, 410, 412, 414, 417, 418, 419, 420, 421, 423, 424, 425, 427, 429, 432, 433, 437, 439, 440, 446, 447, 448, 454, 455, 461, 463, 465, 467, 469, 492, 493, 497, 499, 503, 505, 512, 514, 518, 520, 523, 528, 529, 532, 533, 543, 544, 553, 559, 561, 562, 567, 568, 572, 573, 574, 575, 579, 581, 582, 587, 597, 602, 604, 609, 611, 614, 618, 620, 636, 645, 665, 683, 686, 687, 692, 706, 748, 751, 753, 754, 755, 759, 760, 765, 770, 789, 795, 813, 815, 817, 830, 833, 834, 835, 839, 841, 845, 849, 854, 855, 862, 863, 869, 871, 873, 877, 887, 893, 895, 896, 897, 904, 905, 915], "librari": [1, 67, 74, 386, 544, 922], "author": 1, "domain": 1, "specif": [1, 23, 81, 83, 85, 87, 93, 95, 96, 105, 115, 158, 238, 416, 469, 544, 636, 819, 877, 915], "capabl": [1, 238], "which": [1, 15, 24, 25, 27, 28, 29, 30, 56, 57, 58, 59, 60, 84, 93, 94, 95, 96, 97, 104, 105, 111, 131, 135, 146, 147, 207, 238, 247, 287, 353, 365, 367, 370, 371, 373, 374, 375, 395, 417, 418, 419, 420, 421, 423, 424, 425, 458, 544, 562, 564, 573, 574, 601, 602, 609, 617, 636, 644, 758, 770, 774, 778, 779, 780, 781, 782, 833, 866, 915], "mai": [1, 30, 64, 65, 81, 83, 84, 85, 87, 93, 96, 98, 105, 106, 109, 123, 133, 135, 161, 189, 190, 203, 209, 210, 238, 250, 281, 286, 287, 309, 314, 322, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 430, 431, 469, 503, 504, 512, 527, 544, 579, 583, 598, 599, 602, 611, 616, 620, 636, 644, 677, 682, 706, 707, 714, 722, 740, 752, 837, 838, 877, 915], "exist": [1, 26, 81, 96, 105, 115, 215, 238, 315, 614, 636, 715], "belong": [1, 146, 238, 573, 636], "core": [1, 203, 238], "cannot": [1, 82, 93, 94, 98, 111, 123, 185, 220, 238, 291, 388, 427, 446, 465, 474, 544, 600, 620, 636, 686, 830, 854, 873, 915], "overrid": [1, 81, 83, 84, 85, 86, 87, 93, 113, 114, 116, 238, 636], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 33, 41, 44, 45, 46, 47, 48, 56, 57, 58, 59, 60, 62, 65, 66, 81, 83, 84, 85, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 126, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 142, 144, 145, 146, 147, 149, 151, 154, 156, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 246, 250, 265, 266, 267, 272, 273, 274, 282, 285, 287, 311, 316, 332, 335, 336, 339, 341, 350, 352, 354, 356, 358, 363, 365, 369, 372, 387, 388, 394, 396, 404, 407, 413, 415, 417, 418, 419, 420, 421, 423, 424, 425, 431, 432, 439, 440, 473, 474, 475, 478, 489, 490, 491, 492, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 544, 548, 559, 560, 561, 562, 564, 565, 566, 569, 571, 572, 573, 574, 576, 578, 579, 587, 588, 591, 593, 594, 595, 599, 600, 601, 602, 603, 604, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 662, 663, 670, 683, 690, 707, 708, 716, 736, 739, 740, 743, 745, 757, 760, 770, 795, 796, 799, 804, 805, 816, 833, 834, 881, 883, 893, 894, 915, 918], "dt": [1, 56, 147, 238, 550, 574, 636, 920], "attempt": [1, 202, 238], "do": [1, 56, 63, 104, 135, 161, 198, 206, 209, 238, 269, 309, 456, 462, 468, 490, 544, 559, 564, 579, 583, 591, 600, 601, 602, 636, 644, 665, 706, 864, 870, 876, 896, 905, 915], "so": [1, 47, 95, 104, 105, 144, 146, 147, 175, 238, 260, 272, 365, 456, 462, 468, 544, 573, 574, 636, 668, 864, 870, 876], "rais": [1, 11, 15, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 111, 112, 183, 238, 286, 291, 394, 406, 444, 446, 458, 469, 518, 544, 682, 686, 852, 854, 866, 877, 896, 905, 915], "an": [1, 26, 57, 59, 60, 61, 63, 66, 67, 71, 72, 74, 81, 93, 94, 95, 96, 97, 102, 104, 106, 114, 115, 116, 123, 124, 125, 133, 136, 138, 140, 146, 147, 158, 159, 161, 171, 175, 181, 183, 198, 202, 209, 215, 220, 238, 246, 247, 250, 267, 269, 272, 286, 287, 291, 295, 298, 299, 300, 304, 305, 306, 307, 308, 309, 315, 344, 353, 356, 365, 377, 386, 387, 395, 408, 416, 417, 418, 419, 420, 421, 423, 424, 425, 444, 446, 451, 469, 478, 493, 497, 509, 514, 518, 527, 528, 529, 532, 544, 553, 557, 558, 559, 564, 566, 569, 573, 574, 579, 583, 591, 600, 614, 615, 620, 636, 663, 665, 668, 682, 686, 690, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 715, 748, 752, 758, 770, 819, 820, 821, 822, 823, 824, 826, 827, 828, 833, 834, 852, 854, 859, 877, 896, 905, 915], "attributeerror": 1, "howev": [1, 84, 133, 238, 752, 915], "can": [1, 56, 66, 72, 84, 93, 94, 97, 98, 102, 104, 106, 108, 109, 114, 115, 116, 123, 132, 140, 146, 154, 156, 171, 175, 187, 193, 206, 209, 215, 220, 238, 250, 269, 287, 305, 308, 309, 332, 341, 353, 364, 365, 399, 412, 417, 418, 419, 420, 421, 423, 424, 425, 429, 432, 434, 437, 440, 453, 456, 462, 468, 487, 490, 493, 494, 497, 505, 512, 514, 520, 533, 543, 544, 559, 564, 573, 597, 604, 614, 616, 620, 636, 645, 665, 683, 706, 736, 745, 758, 770, 800, 815, 833, 834, 835, 839, 842, 845, 861, 864, 870, 876, 915], "other": [1, 15, 66, 93, 94, 97, 104, 111, 112, 131, 135, 141, 160, 161, 167, 168, 183, 187, 210, 215, 236, 238, 249, 260, 265, 298, 299, 300, 311, 369, 388, 440, 482, 496, 499, 532, 544, 553, 562, 578, 579, 587, 588, 597, 611, 614, 615, 636, 644, 661, 696, 697, 698, 710, 777, 832, 898, 906, 914, 915], "onli": [1, 15, 23, 47, 56, 62, 64, 93, 94, 96, 97, 98, 102, 104, 105, 106, 107, 108, 115, 116, 120, 123, 131, 158, 161, 165, 184, 195, 200, 238, 245, 250, 260, 297, 298, 299, 300, 332, 350, 359, 412, 485, 528, 544, 559, 562, 575, 579, 582, 636, 693, 696, 697, 698, 736, 763, 815, 892, 915], "gener": [1, 88, 95, 113, 114, 115, 116, 127, 175, 185, 201, 206, 238, 287, 427, 433, 544, 636, 683, 830, 841, 893, 915], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 47, 56, 57, 58, 59, 60, 61, 64, 65, 66, 81, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 669, 670, 672, 677, 678, 679, 681, 683, 690, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 841, 842, 843, 844, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 915], "register_expr_namespac": [1, 57, 59, 60], "greet": 1, "def": [1, 57, 58, 59, 60, 114, 115, 116, 174, 206, 238, 519, 544, 590, 636], "__init__": [1, 2, 3, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 113], "self": [1, 57, 58, 59, 60, 63, 123, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 138, 145, 146, 147, 149, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 289, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 544, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 636, 644, 794, 795, 833, 834, 847, 902, 906, 915], "_expr": [1, 58], "hello": [1, 456, 462, 468, 490, 670, 864, 870, 876], "return": [1, 23, 25, 28, 29, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 73, 75, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 119, 123, 124, 127, 130, 131, 132, 133, 134, 136, 137, 140, 144, 145, 149, 151, 157, 158, 159, 160, 162, 163, 170, 171, 173, 174, 175, 183, 184, 185, 196, 197, 203, 206, 207, 215, 217, 220, 223, 227, 232, 238, 247, 248, 251, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264, 266, 270, 272, 273, 274, 285, 286, 290, 292, 301, 302, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 345, 352, 362, 365, 367, 368, 369, 370, 371, 373, 374, 375, 381, 385, 395, 399, 413, 414, 427, 428, 434, 435, 436, 443, 445, 447, 449, 450, 451, 453, 454, 455, 457, 458, 461, 463, 464, 465, 466, 472, 477, 478, 479, 480, 481, 483, 485, 486, 487, 491, 492, 493, 494, 497, 506, 507, 508, 514, 516, 518, 519, 528, 529, 532, 534, 536, 544, 557, 559, 562, 563, 564, 566, 575, 581, 582, 583, 590, 591, 600, 601, 602, 607, 608, 609, 614, 617, 623, 627, 632, 636, 641, 642, 643, 645, 652, 653, 655, 656, 659, 660, 662, 666, 668, 669, 670, 681, 682, 685, 687, 695, 707, 708, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 752, 757, 765, 767, 772, 774, 775, 777, 778, 779, 780, 781, 782, 786, 788, 791, 794, 800, 817, 818, 830, 831, 832, 834, 842, 851, 852, 853, 855, 857, 858, 859, 861, 862, 863, 865, 866, 869, 871, 872, 873, 874, 877, 880, 886, 888, 899, 901, 902, 906, 915], "lit": [1, 91, 119, 290, 365, 377, 503, 505, 512, 533, 536, 544, 685, 760, 915], "alia": [1, 56, 58, 60, 146, 147, 163, 208, 215, 238, 250, 262, 267, 269, 298, 299, 300, 304, 305, 306, 307, 308, 310, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 356, 358, 363, 365, 368, 369, 377, 380, 381, 388, 397, 405, 412, 428, 444, 445, 448, 451, 454, 457, 463, 465, 466, 467, 473, 474, 482, 483, 489, 492, 495, 496, 498, 499, 503, 504, 505, 508, 509, 512, 513, 519, 527, 528, 532, 533, 544, 573, 574, 576, 582, 610, 614, 636, 657, 665, 714, 716, 719, 736, 739, 744, 748, 791, 873, 874, 915], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 456, 462, 468, 670, 864, 870, 876], "select": [1, 26, 56, 57, 58, 59, 61, 92, 93, 94, 95, 96, 98, 102, 104, 109, 123, 157, 161, 171, 174, 183, 192, 204, 208, 211, 238, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 357, 359, 360, 361, 363, 364, 366, 367, 369, 370, 372, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 455, 456, 458, 461, 462, 464, 465, 466, 468, 470, 471, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 514, 516, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 544, 560, 576, 579, 590, 603, 610, 615, 617, 636, 665, 683, 833, 834, 846, 858, 861, 887, 915], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 47, 56, 57, 58, 59, 60, 61, 64, 65, 66, 78, 81, 83, 84, 85, 86, 87, 88, 91, 104, 109, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 160, 161, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 557, 559, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 664, 665, 666, 669, 670, 672, 677, 678, 679, 681, 683, 690, 692, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 772, 774, 777, 778, 779, 780, 781, 782, 786, 788, 791, 794, 795, 800, 808, 809, 810, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 837, 841, 842, 843, 844, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 884, 886, 887, 888, 889, 890, 893, 894, 898, 900, 901, 902, 903, 906, 915], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 47, 56, 57, 58, 59, 60, 61, 64, 65, 66, 81, 83, 84, 85, 86, 87, 88, 95, 97, 104, 109, 110, 111, 112, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 246, 247, 250, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 327, 329, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 382, 383, 384, 385, 387, 388, 399, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 439, 440, 441, 444, 447, 448, 450, 452, 454, 457, 463, 464, 465, 466, 467, 473, 474, 475, 477, 478, 479, 483, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 664, 665, 666, 669, 672, 677, 678, 679, 681, 683, 690, 692, 693, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 727, 729, 730, 731, 733, 735, 737, 739, 740, 741, 744, 745, 747, 748, 752, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 789, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 813, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 841, 843, 844, 845, 846, 847, 849, 855, 856, 858, 860, 862, 865, 871, 875, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 906, 915], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 47, 56, 57, 58, 59, 60, 61, 64, 65, 66, 81, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 98, 104, 105, 109, 110, 111, 112, 113, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 668, 669, 672, 677, 678, 679, 681, 683, 690, 692, 693, 694, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 788, 790, 791, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 813, 816, 817, 818, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 858, 860, 861, 873, 874, 877, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 915], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 47, 56, 57, 58, 59, 60, 61, 64, 65, 81, 83, 84, 85, 86, 87, 88, 95, 104, 109, 110, 111, 112, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 248, 249, 250, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 334, 335, 336, 337, 338, 339, 341, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 443, 445, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 644, 645, 647, 651, 652, 653, 654, 655, 656, 664, 665, 666, 669, 670, 672, 677, 678, 679, 681, 683, 692, 693, 694, 695, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 715, 720, 724, 725, 731, 733, 738, 740, 741, 745, 747, 749, 751, 752, 753, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 841, 843, 845, 846, 847, 848, 849, 851, 853, 859, 860, 861, 864, 865, 866, 867, 868, 870, 873, 874, 876, 877, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 906, 915], "column_0": [1, 81, 123, 206, 238], "register_dataframe_namespac": [1, 58, 59, 60], "split": [1, 57, 159, 238, 465, 466, 873, 874], "splitfram": [1, 57], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 57, 58, 61, 81, 82, 83, 84, 85, 86, 87, 88, 94, 104, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 558, 559, 560, 562, 564, 565, 566, 567, 568, 570, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 598, 599, 600, 603, 605, 606, 607, 609, 610, 611, 612, 616, 617, 620, 623, 632, 636, 665, 683, 692, 858, 861, 868, 873, 874, 894, 915], "_df": [1, 57], "by_alternate_row": 1, "list": [1, 33, 56, 57, 59, 63, 65, 81, 83, 84, 85, 87, 90, 92, 93, 94, 95, 96, 98, 102, 104, 105, 114, 115, 116, 126, 129, 132, 133, 134, 138, 143, 145, 146, 151, 158, 170, 173, 183, 184, 187, 193, 199, 200, 206, 207, 208, 209, 215, 218, 219, 238, 245, 265, 268, 269, 270, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 352, 358, 386, 395, 396, 404, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 431, 439, 440, 451, 464, 473, 474, 478, 494, 497, 498, 505, 509, 520, 523, 532, 533, 544, 560, 561, 563, 565, 569, 572, 573, 587, 597, 604, 609, 610, 614, 615, 618, 619, 636, 658, 661, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 707, 752, 757, 761, 764, 777, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 831, 859, 872, 887, 895, 915], "with_row_count": [1, 238, 388, 544, 636, 834, 915], "name": [1, 13, 17, 19, 26, 28, 46, 57, 58, 59, 60, 65, 66, 70, 81, 83, 84, 85, 86, 87, 88, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 116, 123, 126, 129, 130, 131, 134, 139, 142, 144, 145, 158, 160, 161, 167, 173, 175, 179, 183, 184, 186, 187, 193, 199, 201, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 238, 246, 250, 287, 336, 341, 350, 365, 377, 387, 394, 396, 404, 407, 440, 473, 474, 475, 490, 491, 494, 496, 497, 499, 500, 502, 505, 510, 516, 517, 520, 523, 525, 526, 528, 530, 532, 533, 534, 544, 560, 561, 562, 565, 572, 578, 579, 587, 594, 596, 597, 604, 609, 610, 611, 614, 616, 617, 618, 636, 641, 683, 695, 707, 740, 745, 816, 881, 883, 893, 894, 897, 915], "n": [1, 10, 12, 20, 29, 33, 34, 57, 58, 59, 60, 66, 90, 91, 93, 94, 104, 119, 123, 124, 135, 146, 149, 158, 159, 163, 184, 185, 196, 197, 200, 223, 232, 238, 268, 273, 285, 309, 310, 314, 315, 319, 340, 344, 353, 362, 381, 405, 413, 427, 437, 465, 466, 477, 479, 483, 514, 516, 528, 534, 544, 557, 559, 573, 575, 582, 607, 608, 623, 632, 636, 644, 664, 669, 681, 695, 706, 709, 714, 715, 719, 744, 748, 758, 767, 791, 808, 830, 845, 849, 873, 874, 886, 888, 899, 904, 915], "filter": [1, 57, 96, 104, 105, 109, 131, 154, 155, 156, 220, 238, 448, 467, 489, 493, 512, 544, 562, 566, 576, 620, 636, 833, 915], "col": [1, 25, 56, 57, 58, 59, 61, 85, 87, 104, 114, 115, 123, 134, 138, 145, 146, 147, 155, 157, 171, 174, 183, 187, 193, 208, 215, 218, 238, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 356, 357, 358, 359, 363, 364, 365, 366, 368, 369, 371, 372, 373, 376, 377, 378, 379, 383, 384, 385, 388, 389, 390, 391, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 496, 498, 499, 503, 504, 505, 508, 511, 512, 513, 514, 515, 520, 523, 526, 527, 533, 536, 544, 565, 569, 572, 573, 574, 576, 590, 597, 604, 610, 614, 615, 618, 636, 665, 683, 692, 736, 817, 833, 834, 858, 861, 877, 915], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 30, 56, 57, 58, 60, 61, 65, 88, 93, 94, 95, 97, 98, 102, 104, 106, 107, 108, 109, 110, 113, 114, 115, 116, 119, 123, 124, 125, 127, 128, 129, 132, 136, 137, 140, 141, 143, 144, 145, 146, 148, 152, 157, 158, 159, 160, 162, 164, 165, 166, 169, 170, 171, 172, 176, 177, 181, 185, 186, 187, 190, 192, 193, 194, 195, 201, 203, 204, 206, 209, 211, 212, 215, 216, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 267, 269, 272, 278, 287, 295, 297, 299, 300, 301, 302, 304, 309, 312, 313, 320, 323, 324, 326, 327, 331, 337, 338, 347, 348, 349, 351, 352, 353, 354, 355, 359, 361, 364, 367, 370, 371, 373, 374, 375, 377, 378, 383, 384, 386, 388, 389, 390, 391, 398, 401, 402, 403, 405, 406, 409, 410, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 432, 434, 435, 436, 437, 441, 442, 450, 472, 476, 480, 481, 482, 488, 493, 494, 495, 496, 498, 500, 502, 503, 505, 509, 512, 521, 522, 525, 526, 527, 530, 533, 535, 536, 544, 557, 558, 561, 563, 567, 568, 572, 573, 578, 581, 586, 591, 592, 596, 597, 599, 600, 602, 604, 605, 612, 614, 615, 616, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 646, 647, 648, 649, 650, 651, 652, 654, 656, 657, 665, 668, 690, 693, 695, 700, 701, 706, 707, 708, 710, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 741, 742, 751, 753, 754, 755, 757, 759, 763, 766, 774, 776, 778, 779, 780, 781, 782, 788, 789, 794, 797, 798, 808, 812, 813, 819, 821, 822, 824, 825, 826, 828, 830, 842, 843, 844, 848, 849, 851, 858, 861, 880, 889, 890, 893, 897, 898, 902, 904, 905, 915], "drop": [1, 84, 123, 130, 131, 207, 215, 238, 268, 310, 312, 313, 544, 562, 609, 614, 636, 664, 709, 711, 712, 915], "aaa": [1, 238, 473, 474], "bbb": [1, 238, 473, 474], "ccc": [1, 238, 473, 474], "ddd": [1, 238, 473, 474], "eee": [1, 238], "fff": 1, "column": [1, 12, 13, 16, 17, 19, 28, 47, 56, 57, 64, 65, 66, 68, 70, 81, 83, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 111, 115, 122, 123, 129, 130, 131, 132, 134, 139, 142, 144, 145, 146, 147, 151, 152, 158, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 193, 194, 195, 199, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 238, 247, 248, 250, 259, 262, 265, 270, 283, 286, 287, 315, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 337, 342, 343, 345, 350, 352, 356, 358, 365, 377, 388, 393, 394, 396, 404, 407, 411, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 432, 439, 440, 449, 465, 466, 469, 475, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 544, 561, 562, 563, 565, 572, 573, 574, 578, 579, 583, 584, 585, 586, 587, 589, 590, 592, 594, 596, 597, 604, 605, 606, 609, 610, 611, 612, 614, 615, 616, 617, 618, 636, 642, 643, 661, 666, 679, 682, 707, 717, 720, 722, 726, 728, 731, 733, 734, 737, 738, 741, 746, 747, 749, 757, 817, 839, 857, 873, 874, 884, 893, 894, 915], "txt": 1, "utf8": [1, 8, 15, 47, 84, 93, 94, 104, 113, 132, 133, 134, 140, 186, 202, 238, 274, 352, 388, 443, 447, 450, 451, 453, 454, 463, 464, 465, 466, 469, 497, 499, 544, 563, 565, 596, 636, 670, 743, 757, 787, 851, 855, 858, 859, 861, 862, 871, 872, 873, 874, 877, 915], "register_lazyframe_namespac": [1, 57, 58, 60], "dtypeoper": [1, 59], "ldf": [1, 59, 557, 561, 572, 597, 601, 602, 604, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636], "_ldf": [1, 59], "upcast_integer_typ": [1, 59], "with_column": [1, 59, 147, 174, 238, 250, 260, 269, 295, 296, 298, 299, 300, 305, 308, 310, 361, 364, 365, 368, 371, 373, 374, 375, 377, 388, 404, 405, 448, 454, 457, 459, 460, 463, 465, 466, 467, 469, 472, 482, 492, 493, 496, 498, 499, 505, 509, 519, 533, 536, 544, 574, 590, 636, 665, 692, 877], "tp": [1, 59], "cast": [1, 58, 59, 81, 118, 140, 146, 147, 174, 203, 215, 238, 249, 296, 307, 308, 314, 388, 412, 452, 453, 472, 476, 482, 499, 544, 573, 574, 590, 614, 636, 692, 704, 705, 714, 815, 860, 861, 885, 894, 898, 915], "int64": [1, 28, 58, 59, 91, 93, 119, 132, 140, 146, 147, 174, 186, 198, 203, 238, 307, 308, 318, 321, 324, 326, 328, 331, 338, 350, 412, 452, 476, 482, 493, 497, 510, 532, 544, 563, 573, 574, 590, 596, 617, 636, 704, 705, 718, 721, 727, 729, 732, 735, 742, 815, 832, 885, 896, 897, 898, 915], "int8": [1, 59, 140, 238, 307, 308, 476, 544, 704, 705, 709, 818, 885, 902, 915], "int16": [1, 59, 307, 308, 476, 544, 704, 705, 885, 915], "int32": [1, 59, 84, 115, 116, 146, 147, 159, 238, 295, 322, 345, 482, 544, 573, 574, 636, 722, 749, 794, 898, 915], "b": [1, 24, 25, 27, 30, 47, 59, 64, 81, 83, 84, 85, 86, 87, 88, 97, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 246, 249, 250, 261, 265, 269, 274, 276, 289, 295, 296, 303, 311, 312, 313, 350, 354, 355, 356, 358, 360, 361, 364, 365, 367, 370, 371, 372, 373, 374, 375, 377, 380, 382, 387, 399, 403, 404, 407, 415, 432, 438, 440, 449, 452, 459, 475, 485, 487, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 516, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 578, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 644, 665, 692, 708, 710, 751, 752, 760, 770, 777, 787, 816, 832, 857, 860, 867, 884, 897, 901, 915], "4": [1, 12, 20, 24, 25, 27, 30, 47, 56, 57, 58, 59, 60, 61, 64, 66, 81, 83, 84, 85, 86, 87, 88, 104, 110, 111, 112, 116, 123, 124, 125, 128, 131, 134, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 170, 171, 173, 174, 175, 176, 180, 184, 188, 193, 196, 197, 198, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 249, 250, 261, 267, 268, 269, 270, 273, 281, 282, 285, 289, 295, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 317, 321, 327, 328, 329, 333, 334, 336, 337, 338, 341, 342, 343, 345, 351, 354, 355, 358, 359, 360, 362, 363, 364, 365, 374, 375, 377, 380, 382, 384, 387, 388, 404, 406, 407, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 430, 431, 434, 438, 439, 440, 441, 444, 454, 455, 457, 458, 461, 463, 465, 466, 469, 473, 474, 475, 477, 478, 479, 482, 483, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 509, 511, 512, 516, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 544, 557, 558, 559, 562, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 598, 599, 600, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 644, 647, 654, 664, 665, 666, 669, 677, 678, 681, 693, 694, 696, 706, 708, 710, 720, 721, 726, 728, 731, 732, 733, 734, 738, 740, 741, 742, 743, 745, 746, 747, 759, 760, 769, 770, 772, 777, 779, 780, 781, 782, 786, 795, 801, 808, 809, 810, 813, 817, 822, 824, 825, 826, 827, 828, 830, 832, 842, 846, 847, 852, 862, 863, 865, 866, 869, 871, 873, 874, 877, 884, 887, 888, 897, 898, 906, 915], "c": [1, 24, 25, 27, 30, 47, 57, 59, 84, 86, 97, 104, 114, 124, 125, 126, 128, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 144, 145, 146, 149, 151, 152, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 179, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 198, 202, 203, 204, 206, 209, 210, 212, 213, 215, 218, 221, 222, 223, 224, 225, 226, 228, 231, 232, 238, 250, 265, 274, 276, 365, 377, 404, 432, 465, 469, 485, 487, 490, 491, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 511, 512, 513, 516, 519, 520, 521, 522, 523, 524, 525, 530, 531, 533, 534, 535, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 572, 573, 578, 581, 587, 591, 594, 595, 596, 597, 600, 603, 604, 611, 614, 615, 618, 621, 622, 623, 624, 625, 626, 628, 631, 632, 636, 708, 770, 787, 873, 877, 901, 915], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 30, 56, 57, 59, 60, 61, 64, 65, 81, 84, 85, 86, 87, 90, 91, 94, 110, 115, 116, 119, 123, 124, 125, 128, 134, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 155, 157, 158, 161, 162, 163, 165, 167, 170, 171, 173, 175, 176, 177, 180, 184, 188, 193, 196, 197, 198, 199, 200, 205, 209, 211, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 262, 267, 269, 270, 273, 278, 284, 285, 295, 296, 297, 298, 299, 300, 309, 310, 311, 315, 316, 318, 335, 337, 338, 339, 342, 349, 350, 353, 359, 362, 365, 368, 371, 373, 374, 375, 377, 382, 404, 405, 407, 409, 410, 414, 415, 416, 417, 418, 420, 424, 426, 428, 434, 440, 445, 453, 454, 457, 458, 472, 475, 477, 479, 483, 492, 495, 496, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 516, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 533, 534, 535, 544, 557, 558, 559, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 577, 579, 580, 581, 582, 585, 586, 587, 591, 598, 599, 600, 603, 604, 605, 606, 607, 608, 613, 614, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 644, 647, 651, 654, 657, 665, 666, 669, 672, 681, 692, 694, 696, 702, 706, 707, 708, 709, 710, 715, 716, 717, 718, 739, 741, 742, 746, 747, 755, 758, 769, 770, 794, 801, 808, 809, 810, 812, 813, 817, 819, 820, 821, 823, 824, 827, 830, 832, 842, 848, 853, 861, 862, 866, 899, 902, 906, 915], "6": [1, 24, 25, 27, 28, 29, 30, 57, 59, 64, 81, 84, 85, 86, 87, 88, 123, 126, 129, 130, 131, 132, 134, 135, 138, 139, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 155, 157, 158, 160, 163, 164, 165, 166, 167, 169, 172, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 215, 216, 223, 231, 232, 238, 250, 270, 289, 295, 307, 308, 311, 315, 332, 334, 337, 346, 354, 355, 360, 362, 364, 382, 408, 410, 411, 414, 417, 418, 419, 420, 421, 423, 424, 425, 428, 440, 445, 449, 454, 457, 458, 477, 479, 490, 492, 503, 504, 505, 509, 512, 519, 533, 544, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 573, 574, 575, 577, 578, 580, 582, 583, 587, 591, 594, 596, 597, 598, 599, 600, 603, 604, 607, 608, 610, 611, 613, 614, 616, 617, 623, 631, 632, 636, 644, 666, 694, 700, 704, 705, 708, 710, 736, 747, 801, 813, 817, 822, 824, 825, 826, 828, 832, 853, 857, 862, 866, 885, 915], "7": [1, 24, 25, 27, 28, 29, 30, 57, 59, 64, 66, 126, 127, 128, 129, 130, 132, 134, 138, 139, 141, 146, 147, 149, 151, 153, 160, 164, 165, 166, 169, 172, 177, 179, 181, 183, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 202, 203, 204, 209, 210, 211, 212, 213, 238, 308, 315, 317, 333, 335, 336, 341, 343, 345, 351, 362, 364, 414, 418, 424, 440, 477, 479, 492, 503, 504, 512, 519, 533, 544, 560, 561, 563, 565, 569, 573, 574, 575, 577, 578, 582, 592, 594, 596, 597, 607, 608, 611, 617, 636, 651, 715, 717, 722, 740, 745, 747, 817, 827, 915], "float32": [1, 25, 59, 140, 238, 636, 773, 794, 915], "lazi": [1, 59, 64, 66, 91, 104, 115, 119, 161, 174, 238, 250, 287, 493, 514, 544, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636], "i16": [1, 59, 432, 544], "i32": [1, 59, 84, 115, 187, 238, 295, 322, 345, 432, 458, 536, 544, 597, 636, 722, 749, 794, 866, 915], "f32": [1, 59, 238, 269, 410, 432, 509, 544, 636, 665, 794, 813, 915], "i64": [1, 12, 16, 57, 58, 59, 60, 64, 81, 83, 84, 85, 86, 87, 91, 104, 116, 119, 123, 124, 125, 126, 129, 131, 132, 134, 135, 137, 138, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 156, 157, 160, 161, 163, 164, 167, 169, 173, 174, 175, 176, 179, 180, 181, 182, 185, 187, 189, 190, 192, 193, 195, 196, 197, 199, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 228, 231, 232, 238, 246, 249, 250, 268, 269, 270, 271, 272, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 296, 298, 299, 300, 305, 306, 307, 308, 310, 311, 318, 319, 321, 324, 326, 328, 331, 338, 340, 350, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 368, 371, 373, 374, 375, 377, 379, 382, 385, 386, 387, 399, 404, 405, 407, 408, 411, 412, 414, 415, 427, 429, 430, 432, 433, 434, 438, 439, 440, 459, 460, 473, 474, 475, 476, 477, 478, 479, 483, 484, 486, 489, 490, 492, 496, 497, 499, 503, 504, 505, 509, 510, 511, 512, 516, 519, 520, 523, 527, 529, 533, 534, 536, 544, 557, 559, 561, 562, 565, 566, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 587, 589, 590, 591, 594, 595, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 614, 616, 618, 619, 620, 622, 623, 624, 625, 628, 631, 632, 636, 644, 645, 664, 665, 666, 669, 677, 678, 679, 681, 692, 696, 699, 702, 703, 704, 705, 708, 718, 719, 721, 727, 729, 732, 735, 739, 742, 744, 758, 760, 761, 767, 769, 777, 791, 800, 816, 817, 820, 823, 827, 830, 833, 834, 837, 841, 842, 846, 847, 884, 886, 887, 888, 894, 900, 903, 906, 915], "register_series_namespac": [1, 57, 58, 59], "math": [1, 60, 700, 843, 889, 915], "mathshortcut": [1, 60], "": [1, 25, 60, 65, 88, 93, 94, 116, 129, 131, 133, 134, 145, 146, 152, 160, 161, 173, 175, 180, 181, 187, 193, 197, 201, 207, 208, 209, 238, 273, 274, 281, 282, 285, 319, 339, 350, 378, 395, 399, 401, 402, 404, 405, 412, 416, 440, 454, 455, 457, 461, 463, 464, 466, 469, 472, 473, 474, 494, 497, 500, 505, 508, 510, 513, 514, 520, 523, 525, 532, 533, 544, 561, 562, 565, 572, 573, 579, 597, 604, 608, 609, 610, 620, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 666, 669, 670, 672, 677, 678, 679, 681, 690, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 715, 719, 739, 740, 745, 752, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 841, 842, 843, 844, 846, 847, 849, 852, 853, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 875, 876, 877, 880, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 915], "_": [1, 56, 60, 88, 175, 201, 238, 465, 873, 893, 915], "squar": [1, 60, 220, 378, 441, 544, 620, 789, 848, 915], "cube": [1, 60], "s2": [1, 112, 140, 238, 644, 694, 710, 777, 801, 832, 897, 906, 915], "renam": [1, 84, 93, 94, 187, 215, 218, 238, 246, 387, 397, 474, 529, 532, 544, 597, 614, 618, 636, 795, 883, 894, 915], "n2": 1, "in_plac": [1, 151, 191, 213, 238, 814, 816, 840, 847, 915], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 28, 30, 61, 63, 64, 66, 81, 82, 86, 90, 93, 94, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 120, 122, 124, 125, 128, 137, 140, 141, 143, 144, 145, 146, 152, 154, 155, 156, 158, 161, 162, 165, 170, 171, 173, 175, 176, 183, 184, 185, 187, 193, 199, 203, 206, 207, 208, 209, 211, 215, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 245, 247, 248, 249, 250, 260, 266, 283, 286, 291, 295, 304, 305, 306, 307, 308, 336, 337, 341, 346, 347, 348, 349, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 412, 422, 427, 432, 437, 439, 440, 444, 446, 448, 452, 453, 458, 464, 465, 467, 469, 473, 474, 478, 483, 484, 487, 491, 492, 493, 494, 500, 501, 512, 528, 530, 532, 536, 544, 557, 558, 559, 564, 566, 568, 572, 573, 578, 579, 581, 583, 591, 597, 600, 601, 602, 604, 609, 610, 614, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 642, 643, 644, 645, 655, 679, 682, 686, 690, 694, 695, 740, 741, 745, 751, 753, 754, 755, 761, 765, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 801, 809, 810, 815, 825, 832, 845, 847, 852, 854, 856, 860, 861, 866, 872, 873, 875, 877, 896, 897, 899, 905, 906, 915], "s3": [1, 96, 105, 109, 915], "n3": 1, "8": [1, 24, 25, 27, 28, 29, 30, 40, 53, 55, 56, 57, 59, 60, 64, 65, 88, 110, 114, 115, 123, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 149, 151, 160, 164, 165, 166, 169, 177, 179, 181, 183, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 202, 203, 204, 209, 210, 212, 213, 215, 238, 249, 261, 268, 269, 303, 305, 308, 309, 312, 313, 315, 364, 380, 406, 407, 414, 415, 418, 419, 421, 423, 425, 432, 438, 440, 455, 461, 469, 475, 479, 495, 500, 501, 502, 504, 505, 509, 511, 516, 519, 520, 521, 522, 523, 524, 525, 530, 531, 533, 534, 535, 544, 560, 561, 562, 563, 565, 569, 575, 578, 582, 583, 591, 594, 596, 597, 607, 608, 611, 614, 617, 636, 664, 665, 706, 722, 808, 817, 819, 822, 824, 825, 826, 828, 863, 869, 877, 915], "9": [1, 24, 25, 27, 30, 56, 64, 123, 127, 140, 147, 149, 153, 187, 196, 209, 210, 213, 215, 231, 238, 249, 261, 268, 280, 283, 303, 305, 308, 312, 313, 315, 317, 333, 342, 343, 364, 369, 377, 380, 414, 416, 418, 424, 434, 438, 479, 492, 498, 503, 504, 544, 574, 575, 577, 582, 597, 607, 611, 614, 631, 636, 664, 679, 717, 726, 728, 734, 740, 741, 745, 746, 777, 817, 819, 827, 829, 842, 915], "27": [1, 60, 231, 308, 322, 334, 345, 406, 544, 631], "16": [1, 37, 50, 58, 65, 88, 110, 146, 147, 215, 238, 262, 305, 308, 352, 364, 418, 458, 492, 503, 508, 509, 512, 525, 530, 544, 573, 574, 600, 614, 636, 657, 740, 745, 757, 808, 843, 866, 889, 915], "64": [1, 30, 36, 39, 52, 58, 60, 238, 406, 544, 602, 636, 808, 915], "25": [1, 60, 66, 146, 147, 161, 211, 215, 238, 310, 322, 336, 341, 345, 514, 544, 573, 574, 579, 585, 612, 614, 636, 709, 740, 745, 751, 808, 915], "125": [1, 60, 238, 808, 915], "arg": [2, 3, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 174, 203, 238, 494, 513, 544, 590, 636, 645, 896, 897, 915], "ani": [2, 3, 4, 6, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 62, 81, 82, 83, 84, 85, 86, 87, 93, 94, 96, 97, 98, 102, 104, 105, 106, 108, 113, 115, 116, 120, 123, 127, 131, 135, 137, 138, 140, 157, 158, 159, 173, 174, 183, 184, 199, 200, 202, 203, 209, 238, 250, 265, 269, 295, 337, 355, 369, 386, 388, 397, 414, 416, 428, 431, 458, 469, 478, 492, 500, 511, 518, 530, 544, 562, 568, 590, 636, 644, 645, 661, 665, 710, 741, 760, 777, 788, 795, 817, 819, 831, 834, 866, 877, 887, 895, 896, 897, 915], "kwarg": [2, 3, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 127, 174, 203, 238, 544, 590, 636, 896, 897, 915], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 544, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 915, 921], "method": [2, 3, 4, 6, 24, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 82, 93, 94, 97, 113, 131, 145, 153, 158, 171, 177, 183, 184, 207, 215, 230, 238, 247, 353, 364, 409, 410, 417, 418, 419, 420, 421, 423, 424, 425, 485, 500, 525, 526, 530, 537, 538, 540, 544, 545, 548, 549, 550, 553, 562, 577, 592, 609, 614, 630, 636, 645, 758, 769, 812, 813, 824, 898, 907, 909, 911, 915, 918, 919, 920], "A": [4, 25, 44, 63, 66, 93, 94, 95, 102, 104, 105, 140, 146, 161, 175, 184, 199, 209, 210, 211, 215, 238, 244, 287, 315, 318, 321, 324, 326, 328, 331, 338, 353, 367, 370, 371, 373, 386, 387, 395, 407, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 444, 445, 450, 451, 453, 472, 475, 498, 509, 513, 544, 573, 579, 594, 611, 614, 636, 683, 715, 718, 721, 727, 729, 732, 735, 742, 758, 819, 820, 821, 823, 826, 827, 828, 852, 853, 858, 859, 861, 867, 868, 877, 880, 915], "encod": [4, 55, 93, 94, 104, 291, 446, 686, 854], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 28, 29, 57, 61, 66, 82, 84, 87, 88, 93, 94, 97, 98, 102, 104, 106, 107, 108, 111, 112, 114, 115, 116, 120, 122, 126, 131, 145, 148, 158, 161, 167, 185, 187, 192, 201, 206, 207, 209, 215, 238, 250, 282, 286, 287, 344, 361, 369, 388, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 433, 437, 438, 456, 462, 463, 468, 493, 528, 532, 544, 560, 562, 564, 572, 578, 579, 583, 587, 597, 601, 602, 603, 609, 614, 617, 620, 636, 644, 645, 678, 682, 683, 748, 766, 777, 795, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 834, 841, 845, 846, 864, 870, 871, 876, 896, 915], "string": [4, 5, 7, 10, 11, 15, 25, 28, 29, 33, 47, 55, 66, 93, 94, 104, 113, 114, 116, 118, 140, 144, 145, 146, 147, 161, 187, 193, 209, 211, 215, 218, 238, 274, 293, 296, 332, 336, 341, 352, 358, 365, 388, 404, 417, 418, 419, 420, 421, 423, 424, 425, 440, 443, 444, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 494, 496, 499, 513, 520, 523, 532, 544, 564, 571, 572, 573, 574, 579, 597, 604, 614, 617, 618, 636, 670, 688, 692, 736, 740, 745, 757, 770, 850, 851, 852, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 915], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 571, 593, 636], "cfg": [5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 120, 187, 215, 238, 597, 614, 636], "previous": 5, "save": [5, 553], "share": [5, 47, 133, 238, 752, 915], "option": [5, 6, 7, 56, 66, 88, 93, 96, 97, 98, 102, 105, 106, 108, 110, 113, 114, 115, 116, 161, 167, 171, 199, 206, 238, 378, 416, 417, 418, 419, 420, 421, 423, 424, 425, 437, 463, 490, 518, 532, 544, 553, 578, 579, 587, 636, 785, 789, 819, 820, 821, 822, 823, 824, 826, 827, 828, 834, 845, 871, 894, 915], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 44, 46, 48, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 122, 123, 124, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 187, 189, 190, 192, 193, 194, 195, 196, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 223, 230, 232, 238, 246, 249, 250, 259, 262, 265, 266, 267, 268, 269, 272, 273, 274, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 332, 335, 336, 340, 341, 344, 346, 347, 348, 349, 350, 353, 355, 356, 360, 361, 362, 364, 365, 369, 378, 381, 383, 386, 387, 388, 404, 405, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 477, 478, 483, 484, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 512, 513, 514, 516, 518, 519, 520, 525, 526, 527, 528, 529, 530, 532, 533, 534, 544, 557, 559, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 578, 579, 582, 583, 587, 588, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 610, 611, 614, 615, 616, 617, 618, 620, 623, 630, 632, 636, 641, 644, 645, 654, 657, 661, 662, 663, 664, 665, 668, 669, 670, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 709, 710, 714, 715, 716, 719, 736, 739, 740, 744, 745, 748, 751, 752, 753, 754, 755, 758, 759, 760, 761, 766, 767, 769, 770, 784, 785, 789, 791, 795, 808, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 841, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 883, 886, 887, 893, 894, 895, 896, 897, 899, 900, 903, 904, 905, 906, 915], "json": [5, 7, 28, 29, 100, 101, 107, 238, 452, 453, 553, 571, 593, 617, 636, 860, 861], "produc": [5, 115, 116, 267, 394, 519, 583, 636, 663], "reset": [6, 120], "default": [6, 23, 24, 25, 27, 28, 29, 30, 61, 81, 83, 84, 85, 86, 87, 88, 91, 93, 94, 102, 104, 113, 114, 115, 116, 119, 131, 133, 145, 147, 148, 158, 161, 167, 173, 175, 183, 184, 185, 201, 207, 209, 216, 238, 282, 286, 287, 296, 346, 347, 348, 349, 361, 383, 388, 401, 402, 405, 410, 427, 433, 450, 456, 458, 462, 463, 468, 469, 493, 500, 514, 518, 528, 530, 532, 544, 562, 564, 572, 574, 579, 587, 602, 609, 617, 636, 678, 682, 683, 692, 751, 752, 753, 754, 755, 766, 795, 804, 805, 808, 813, 830, 841, 849, 858, 864, 866, 870, 871, 876, 904, 915], "state": [6, 63, 74, 503, 553, 559, 564, 566, 591, 600, 636], "note": [6, 15, 56, 66, 81, 82, 83, 85, 87, 91, 93, 95, 96, 102, 105, 114, 115, 116, 119, 120, 122, 123, 127, 136, 146, 147, 158, 160, 161, 171, 174, 183, 184, 200, 202, 206, 210, 211, 215, 238, 250, 269, 286, 307, 308, 312, 313, 332, 336, 341, 365, 371, 373, 417, 418, 419, 420, 421, 423, 424, 425, 437, 454, 456, 457, 462, 468, 469, 476, 503, 512, 527, 544, 559, 566, 567, 573, 574, 575, 579, 582, 594, 600, 611, 614, 636, 665, 682, 704, 705, 736, 745, 833, 834, 840, 845, 862, 864, 865, 870, 876, 885, 915], "oper": [6, 47, 64, 71, 72, 81, 83, 84, 85, 86, 87, 93, 102, 123, 135, 140, 145, 152, 162, 168, 171, 173, 174, 178, 198, 202, 203, 206, 209, 217, 218, 238, 245, 287, 304, 305, 306, 307, 308, 309, 377, 397, 412, 490, 491, 499, 509, 544, 566, 572, 575, 578, 582, 588, 618, 636, 644, 702, 703, 704, 705, 706, 815, 892, 895, 896, 897, 905, 915], "remov": [6, 129, 210, 238, 250, 262, 350, 352, 456, 462, 468, 510, 525, 530, 544, 561, 611, 636, 657, 757, 864, 870, 876, 915], "from": [6, 25, 56, 66, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 128, 129, 133, 135, 144, 146, 147, 158, 159, 161, 162, 167, 179, 183, 185, 187, 206, 207, 209, 211, 238, 304, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 350, 364, 378, 401, 402, 405, 427, 450, 452, 458, 469, 485, 487, 496, 506, 507, 508, 518, 530, 543, 544, 561, 566, 571, 573, 574, 579, 587, 593, 594, 597, 609, 615, 636, 644, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 785, 789, 804, 805, 806, 808, 830, 858, 860, 866, 903, 906, 915], "environ": [6, 23], "local": [6, 96, 105, 809, 810, 915], "non": [6, 56, 86, 159, 167, 187, 210, 215, 238, 405, 416, 417, 418, 419, 420, 421, 423, 424, 425, 445, 451, 496, 499, 532, 544, 587, 597, 611, 614, 636, 683, 808, 819, 820, 821, 822, 823, 824, 826, 827, 828, 853, 859, 896, 915], "env": 6, "back": [6, 56, 135, 203, 238, 404, 544, 644, 897, 915], "valu": [6, 9, 10, 23, 25, 28, 41, 42, 54, 56, 64, 65, 84, 86, 93, 94, 95, 104, 109, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 131, 135, 136, 137, 141, 144, 146, 147, 148, 149, 153, 158, 164, 165, 166, 167, 169, 171, 173, 175, 176, 177, 179, 183, 184, 185, 189, 190, 193, 194, 195, 196, 199, 200, 203, 209, 210, 211, 212, 221, 222, 224, 225, 226, 228, 229, 238, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 267, 268, 271, 272, 273, 275, 277, 278, 279, 281, 284, 285, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 312, 313, 315, 317, 329, 333, 342, 347, 348, 349, 351, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 379, 380, 384, 385, 386, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 405, 409, 410, 413, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 459, 460, 463, 465, 466, 467, 472, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 491, 496, 499, 501, 503, 504, 505, 511, 512, 518, 520, 521, 522, 523, 524, 527, 528, 533, 536, 544, 562, 567, 568, 573, 574, 576, 577, 584, 585, 586, 587, 589, 592, 594, 598, 599, 604, 605, 606, 611, 612, 617, 621, 622, 624, 625, 626, 628, 629, 636, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 663, 664, 667, 668, 669, 671, 673, 674, 675, 677, 681, 684, 686, 687, 688, 689, 692, 693, 696, 697, 698, 700, 701, 706, 707, 708, 709, 711, 712, 715, 717, 733, 737, 746, 752, 753, 754, 755, 758, 759, 760, 763, 765, 766, 769, 770, 772, 774, 775, 777, 778, 779, 780, 781, 782, 786, 795, 796, 797, 799, 800, 802, 804, 805, 806, 807, 808, 811, 812, 813, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 837, 838, 842, 843, 844, 845, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 865, 867, 868, 871, 873, 874, 875, 880, 885, 887, 888, 889, 890, 897, 898, 901, 903, 905, 906, 915], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 47, 56, 57, 58, 59, 60, 61, 64, 65, 66, 81, 83, 84, 85, 86, 87, 88, 90, 91, 94, 95, 96, 97, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 544, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 669, 670, 672, 677, 678, 679, 681, 683, 690, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 759, 760, 761, 763, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 915], "current": [7, 23, 82, 95, 122, 124, 125, 238, 287, 336, 405, 544, 553, 557, 558, 636, 695, 699, 740, 808, 915], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 269, 665], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 30, 41, 56, 61, 63, 64, 81, 82, 86, 93, 94, 98, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 122, 124, 125, 137, 138, 140, 141, 143, 144, 145, 146, 151, 152, 154, 155, 156, 161, 173, 175, 185, 191, 193, 199, 203, 206, 207, 208, 211, 213, 215, 222, 224, 225, 228, 238, 247, 248, 249, 250, 259, 262, 266, 267, 269, 283, 286, 291, 295, 304, 305, 306, 307, 308, 309, 337, 346, 347, 348, 349, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 386, 392, 393, 410, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 431, 432, 437, 439, 440, 444, 446, 448, 458, 459, 460, 464, 465, 467, 469, 474, 483, 484, 487, 491, 492, 493, 494, 500, 503, 518, 528, 530, 532, 536, 544, 557, 559, 564, 566, 568, 569, 572, 573, 578, 579, 583, 591, 600, 601, 602, 604, 609, 610, 614, 622, 624, 625, 628, 636, 642, 643, 644, 645, 654, 657, 662, 663, 665, 679, 682, 686, 690, 695, 702, 703, 704, 705, 706, 741, 751, 753, 754, 755, 761, 765, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 809, 810, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 840, 845, 847, 852, 854, 856, 866, 867, 868, 872, 873, 875, 877, 895, 896, 897, 899, 900, 903, 905, 915], "ascii": [8, 15, 455, 457, 461, 472, 863, 865, 869, 880], "charact": [8, 10, 15, 21, 25, 93, 94, 104, 238, 332, 449, 454, 455, 456, 461, 462, 464, 465, 468, 472, 591, 636, 736, 857, 862, 863, 864, 869, 870, 872, 873, 876, 880], "print": [8, 10, 12, 14, 20, 94, 110, 132, 144, 145, 159, 162, 217, 238, 363, 544, 576, 636, 777, 819, 915], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 26, 46, 81, 93, 94, 96, 104, 105, 175, 198, 203, 209, 210, 238, 611, 636, 897, 915], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 30, 56, 61, 63, 66, 82, 86, 93, 94, 97, 98, 102, 104, 107, 108, 111, 112, 113, 114, 115, 116, 122, 124, 125, 128, 140, 141, 143, 144, 145, 146, 151, 152, 154, 155, 156, 158, 161, 162, 165, 170, 171, 173, 175, 176, 183, 184, 185, 191, 193, 199, 203, 206, 211, 213, 215, 221, 222, 224, 225, 226, 228, 231, 238, 247, 248, 250, 259, 262, 266, 269, 283, 286, 304, 305, 306, 307, 308, 309, 337, 346, 347, 348, 349, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 386, 410, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 437, 439, 440, 444, 448, 452, 458, 459, 460, 464, 465, 467, 469, 483, 484, 487, 491, 493, 494, 500, 503, 518, 528, 530, 532, 536, 544, 557, 558, 559, 564, 566, 572, 573, 578, 579, 581, 583, 591, 600, 601, 602, 604, 614, 621, 622, 624, 625, 626, 628, 631, 636, 644, 654, 657, 665, 679, 682, 690, 694, 695, 702, 703, 704, 705, 706, 741, 751, 753, 754, 755, 761, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 784, 785, 786, 789, 801, 809, 810, 813, 814, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 835, 840, 845, 847, 852, 856, 860, 866, 867, 868, 872, 873, 875, 877, 895, 896, 897, 899, 900, 903, 905, 906, 915], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 459, 867], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 445, 451, 853, 859, 894, 915], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 56, 58, 60, 65, 84, 109, 115, 124, 125, 127, 128, 129, 131, 132, 136, 137, 140, 143, 144, 145, 152, 160, 161, 165, 166, 176, 177, 192, 193, 194, 212, 215, 218, 222, 224, 225, 226, 227, 228, 230, 231, 238, 244, 251, 252, 253, 254, 255, 256, 278, 295, 297, 301, 302, 309, 312, 313, 337, 346, 347, 348, 349, 350, 351, 359, 364, 371, 373, 374, 375, 377, 378, 383, 384, 389, 390, 391, 398, 401, 402, 405, 406, 409, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 435, 436, 437, 441, 442, 480, 481, 488, 495, 496, 498, 500, 502, 510, 521, 522, 525, 530, 531, 535, 544, 557, 561, 562, 567, 568, 572, 578, 579, 585, 586, 592, 604, 605, 612, 614, 615, 618, 622, 624, 625, 626, 627, 628, 630, 631, 636, 646, 647, 648, 649, 650, 651, 693, 700, 701, 706, 707, 708, 741, 754, 755, 759, 763, 808, 819, 821, 822, 824, 825, 826, 828, 829, 843, 844, 848, 889, 890, 902, 915], "fmt": [9, 238, 339, 363, 469, 513, 544, 576, 636, 743, 877], "mix": [9, 469, 708, 877, 915], "control": [9, 114, 238, 564, 636], "how": [9, 47, 64, 84, 87, 95, 131, 160, 209, 210, 238, 267, 268, 296, 310, 364, 404, 413, 544, 562, 578, 611, 636, 663, 664, 692, 709, 915], "float": [9, 35, 36, 41, 65, 109, 111, 112, 113, 115, 116, 133, 136, 161, 177, 185, 190, 230, 238, 266, 267, 297, 298, 299, 300, 312, 313, 337, 346, 347, 348, 349, 354, 359, 364, 365, 367, 370, 371, 373, 374, 375, 383, 389, 398, 401, 402, 406, 409, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 431, 495, 505, 520, 521, 522, 523, 526, 528, 531, 533, 535, 544, 567, 579, 592, 599, 600, 630, 636, 662, 663, 690, 693, 696, 697, 698, 707, 710, 741, 751, 752, 753, 754, 755, 759, 763, 770, 776, 789, 792, 796, 797, 798, 799, 804, 805, 811, 812, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 845, 849, 885, 904, 915], "point": [9, 35, 36, 105, 115, 116, 136, 146, 162, 238, 297, 312, 313, 337, 354, 359, 371, 373, 426, 427, 544, 567, 573, 583, 594, 636, 693, 741, 759, 763, 776, 829, 830, 915], "displai": [9, 14, 18, 238], "full": [9, 33, 62, 93, 94, 96, 104, 105, 238, 583, 636], "format": [9, 11, 15, 25, 92, 93, 94, 104, 109, 134, 144, 158, 167, 184, 200, 236, 238, 336, 339, 458, 469, 491, 565, 571, 587, 617, 636, 743, 866, 877, 914], "number": [9, 10, 12, 20, 21, 25, 30, 56, 75, 81, 83, 85, 87, 90, 91, 93, 94, 97, 104, 107, 114, 115, 119, 124, 133, 134, 136, 137, 149, 158, 159, 162, 163, 170, 171, 185, 189, 190, 196, 209, 221, 223, 232, 238, 260, 268, 273, 281, 285, 287, 289, 303, 309, 310, 320, 322, 327, 329, 337, 342, 343, 345, 347, 348, 349, 353, 355, 360, 362, 371, 373, 380, 381, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 433, 454, 457, 465, 466, 477, 483, 500, 501, 516, 530, 534, 544, 557, 565, 566, 567, 568, 575, 582, 591, 598, 599, 602, 607, 621, 623, 632, 636, 664, 669, 677, 681, 683, 695, 706, 709, 720, 722, 731, 733, 741, 746, 747, 749, 752, 753, 754, 755, 758, 760, 767, 776, 791, 801, 802, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 837, 838, 841, 849, 862, 865, 873, 874, 886, 899, 904, 915], "int": [10, 12, 20, 21, 25, 30, 41, 58, 84, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 119, 123, 124, 133, 136, 137, 139, 148, 149, 150, 152, 158, 159, 161, 163, 164, 165, 169, 170, 171, 181, 183, 185, 188, 189, 190, 192, 194, 195, 196, 197, 204, 209, 212, 214, 216, 223, 232, 238, 266, 267, 268, 272, 273, 281, 282, 285, 286, 287, 289, 298, 299, 300, 309, 310, 347, 348, 349, 353, 354, 355, 360, 361, 362, 365, 381, 405, 406, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 438, 442, 450, 455, 458, 461, 463, 465, 466, 472, 477, 478, 479, 483, 488, 493, 500, 501, 505, 506, 507, 508, 514, 516, 520, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 544, 557, 566, 567, 568, 575, 579, 582, 591, 598, 599, 602, 603, 605, 607, 608, 612, 613, 616, 623, 632, 636, 652, 653, 662, 663, 664, 668, 669, 677, 678, 681, 682, 683, 690, 694, 695, 696, 697, 698, 706, 709, 752, 753, 754, 755, 758, 759, 760, 766, 767, 770, 790, 791, 796, 797, 799, 801, 802, 804, 805, 806, 807, 808, 811, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 837, 838, 841, 846, 849, 858, 863, 866, 869, 871, 873, 874, 880, 885, 886, 887, 888, 899, 904, 915], "liter": [11, 15, 61, 66, 97, 116, 144, 158, 164, 165, 169, 170, 173, 183, 184, 187, 195, 199, 215, 238, 247, 248, 315, 353, 365, 377, 411, 444, 459, 460, 493, 496, 499, 506, 507, 518, 528, 532, 536, 544, 568, 597, 614, 636, 642, 643, 715, 758, 770, 833, 834, 852, 867, 868, 915], "left": [11, 66, 111, 112, 146, 147, 160, 161, 210, 238, 347, 348, 349, 364, 365, 417, 418, 419, 420, 421, 423, 424, 425, 428, 455, 472, 482, 496, 503, 504, 512, 527, 544, 573, 574, 578, 579, 611, 636, 753, 754, 755, 770, 831, 863, 880, 898, 915], "center": [11, 347, 348, 349, 416, 417, 418, 419, 420, 421, 423, 424, 425, 544, 753, 754, 755, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "right": [11, 13, 66, 93, 94, 111, 112, 146, 147, 160, 161, 238, 347, 348, 349, 365, 417, 418, 419, 420, 421, 423, 424, 425, 428, 437, 461, 496, 544, 573, 574, 578, 579, 636, 753, 754, 755, 770, 831, 845, 869, 915], "cell": 11, "align": [11, 56, 472, 880], "keyerror": [11, 15], "recognis": [11, 15, 113, 238], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 28, 29, 30, 47, 61, 62, 65, 66, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 96, 97, 98, 102, 104, 105, 106, 107, 108, 122, 123, 131, 135, 144, 146, 147, 158, 161, 167, 171, 184, 185, 192, 200, 201, 202, 206, 207, 209, 210, 238, 250, 282, 287, 298, 299, 300, 315, 356, 378, 386, 388, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 433, 437, 438, 452, 454, 456, 457, 462, 463, 464, 465, 466, 468, 469, 483, 490, 492, 493, 500, 501, 503, 512, 518, 528, 530, 532, 544, 562, 564, 573, 574, 578, 579, 583, 587, 594, 602, 603, 609, 611, 617, 620, 636, 644, 645, 678, 696, 697, 698, 707, 715, 765, 789, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 835, 841, 845, 846, 860, 862, 864, 865, 870, 871, 872, 873, 874, 876, 877, 892, 896, 899, 905, 915], "rang": [12, 65, 66, 95, 133, 146, 159, 238, 317, 329, 333, 334, 336, 341, 342, 364, 493, 498, 506, 507, 544, 573, 636, 707, 717, 733, 737, 738, 740, 745, 746, 752, 808, 915], "100": [12, 84, 87, 93, 94, 104, 107, 238, 472, 493, 636, 820, 821, 823, 915], "98": [12, 152, 238, 439, 478, 483, 544], "99": [12, 136, 137, 152, 155, 238, 245, 353, 355, 439, 478, 483, 544, 567, 568, 636, 751, 758, 915], "10": [12, 24, 25, 27, 30, 56, 64, 65, 66, 95, 104, 110, 115, 116, 125, 135, 143, 146, 147, 149, 151, 152, 153, 170, 174, 176, 180, 181, 187, 196, 215, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 249, 257, 258, 259, 261, 262, 268, 273, 281, 282, 285, 298, 303, 305, 308, 310, 312, 313, 315, 336, 341, 344, 361, 362, 364, 369, 377, 380, 381, 384, 405, 418, 438, 472, 477, 496, 503, 509, 512, 514, 516, 519, 525, 530, 534, 544, 559, 573, 574, 575, 577, 582, 590, 591, 597, 602, 606, 607, 614, 618, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 645, 664, 669, 677, 678, 681, 696, 707, 709, 715, 745, 748, 751, 767, 777, 791, 793, 808, 833, 834, 886, 915], "95": [12, 245, 544], "96": [12, 245, 544], "97": [12, 152, 238, 245, 544], "move": [13, 347, 348, 349, 417, 418, 420, 424, 544, 753, 754, 755, 820, 821, 823, 827, 915], "inlin": 13, "parenthes": 13, "below": [14, 96, 105, 131, 238, 364, 536, 544, 562, 636], "when": [14, 18, 30, 47, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 88, 93, 94, 95, 98, 102, 104, 105, 106, 107, 115, 116, 118, 123, 132, 133, 135, 137, 140, 146, 174, 183, 187, 193, 201, 207, 238, 298, 299, 300, 347, 348, 349, 355, 386, 388, 395, 439, 440, 456, 462, 468, 469, 494, 503, 512, 544, 568, 573, 583, 597, 602, 604, 609, 636, 644, 696, 697, 698, 752, 753, 754, 755, 760, 795, 833, 834, 864, 870, 876, 893, 915], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 56], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 445, 450, 451, 453, 853, 858, 859, 861], "none": [15, 23, 24, 25, 26, 27, 28, 29, 30, 33, 41, 42, 46, 56, 65, 66, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 123, 124, 128, 131, 136, 137, 144, 146, 147, 148, 153, 160, 161, 162, 165, 167, 171, 172, 183, 185, 187, 190, 192, 193, 199, 201, 203, 206, 207, 208, 209, 210, 211, 215, 218, 238, 246, 249, 250, 261, 272, 282, 287, 289, 298, 299, 300, 303, 305, 308, 312, 313, 335, 336, 341, 347, 348, 349, 350, 353, 354, 355, 360, 361, 364, 365, 371, 372, 373, 374, 375, 380, 386, 388, 403, 405, 411, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 431, 432, 433, 434, 438, 439, 443, 444, 447, 448, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 482, 490, 492, 493, 496, 499, 501, 507, 508, 510, 511, 518, 519, 528, 529, 531, 532, 535, 544, 557, 558, 562, 567, 568, 573, 574, 577, 578, 579, 581, 583, 587, 597, 599, 600, 601, 602, 603, 604, 609, 610, 611, 614, 615, 617, 618, 620, 636, 645, 652, 653, 668, 678, 683, 695, 696, 707, 708, 710, 723, 724, 725, 730, 739, 740, 745, 750, 751, 753, 754, 755, 758, 759, 760, 762, 765, 766, 768, 769, 770, 781, 782, 785, 789, 795, 796, 797, 798, 799, 803, 812, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 836, 838, 841, 842, 845, 846, 849, 851, 852, 855, 856, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 873, 874, 875, 876, 877, 891, 894, 897, 898, 904, 905, 915], "rounded_corn": 15, "style": [15, 175, 238], "border": 15, "line": [15, 93, 94, 97, 104, 144, 154, 156, 238], "includ": [15, 23, 25, 62, 96, 105, 115, 133, 146, 206, 209, 238, 337, 365, 464, 465, 503, 544, 573, 636, 741, 752, 770, 872, 873, 905, 915], "row": [15, 20, 25, 28, 30, 56, 57, 59, 73, 75, 80, 84, 85, 87, 93, 94, 97, 98, 102, 104, 106, 107, 108, 111, 114, 115, 123, 124, 131, 135, 138, 140, 144, 146, 148, 149, 154, 156, 158, 159, 161, 162, 163, 167, 171, 185, 192, 196, 197, 200, 207, 209, 210, 216, 220, 223, 232, 238, 250, 260, 270, 352, 362, 381, 405, 414, 438, 449, 477, 494, 503, 504, 512, 516, 520, 523, 527, 534, 544, 557, 559, 562, 566, 569, 570, 573, 575, 579, 580, 582, 583, 587, 602, 603, 607, 608, 609, 611, 616, 620, 623, 632, 636, 644, 666, 757, 767, 791, 808, 817, 846, 857, 886, 915], "divid": [15, 336, 341, 347, 348, 349, 378, 544, 740, 745, 753, 754, 755, 789, 915], "same": [15, 47, 56, 63, 98, 114, 123, 129, 145, 193, 207, 215, 218, 220, 238, 244, 249, 352, 404, 416, 417, 418, 419, 420, 421, 423, 424, 425, 440, 474, 497, 544, 561, 572, 583, 604, 609, 614, 618, 620, 636, 640, 644, 645, 715, 757, 819, 820, 821, 822, 823, 824, 826, 827, 828, 906, 915], "dens": [15, 144, 238, 410, 544, 813, 915], "space": 15, "horizont": [15, 64, 140, 151, 209, 238, 499, 503, 504, 505, 509, 512, 520, 523, 527, 533], "markdown": 15, "compat": [15, 30, 95, 105, 238, 602, 636], "No": 15, "appli": [15, 25, 64, 104, 113, 115, 116, 140, 174, 238, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 337, 342, 343, 345, 348, 349, 386, 416, 417, 418, 420, 424, 469, 490, 493, 503, 504, 512, 519, 527, 544, 575, 582, 583, 590, 636, 717, 720, 722, 726, 728, 731, 733, 734, 737, 738, 741, 746, 747, 749, 754, 755, 819, 820, 821, 823, 827, 877, 915], "round": [15, 58, 238, 297, 359, 480, 544, 693, 763, 915], "corner": 15, "op": [15, 116, 238, 413, 544, 636, 915], "The": [15, 26, 30, 41, 48, 56, 62, 81, 83, 84, 85, 87, 90, 93, 95, 102, 104, 105, 123, 130, 132, 144, 145, 146, 147, 148, 153, 158, 161, 168, 173, 183, 184, 187, 208, 211, 215, 218, 220, 238, 286, 287, 289, 290, 291, 292, 317, 329, 332, 333, 336, 341, 342, 350, 353, 360, 361, 386, 404, 410, 413, 416, 417, 418, 419, 420, 421, 423, 424, 425, 434, 437, 443, 446, 447, 452, 454, 455, 456, 461, 462, 468, 472, 497, 510, 514, 529, 532, 537, 538, 540, 544, 545, 548, 549, 550, 573, 574, 575, 577, 579, 582, 583, 588, 591, 597, 602, 610, 614, 618, 620, 636, 682, 685, 686, 687, 695, 717, 733, 736, 737, 740, 745, 746, 758, 766, 769, 813, 819, 820, 821, 822, 823, 824, 826, 827, 828, 842, 845, 851, 854, 855, 860, 862, 863, 864, 869, 870, 876, 880, 907, 909, 911, 915, 918, 919, 920], "one": [15, 26, 56, 73, 81, 83, 84, 85, 86, 87, 116, 137, 138, 144, 145, 146, 147, 158, 167, 175, 183, 184, 205, 219, 238, 245, 355, 377, 416, 439, 478, 490, 520, 523, 533, 544, 568, 569, 572, 573, 574, 587, 615, 619, 636, 644, 760, 785, 819, 881, 915], "more": [15, 28, 30, 56, 80, 81, 82, 83, 84, 85, 86, 87, 96, 102, 105, 115, 116, 123, 127, 158, 162, 167, 171, 183, 184, 185, 207, 220, 238, 250, 298, 299, 300, 377, 378, 386, 427, 437, 484, 520, 523, 533, 544, 587, 602, 609, 620, 636, 645, 696, 697, 698, 785, 789, 830, 845, 900, 915, 922], "semigraph": 15, "box": [15, 123, 238], "draw": [15, 20, 21], "found": [15, 25, 68, 77, 79, 84, 132, 210, 238, 428, 453, 469, 544, 611, 636, 831, 861, 915], "unicod": 15, "block": [15, 594, 616, 636, 833, 834, 915], "http": [15, 82, 95, 122, 127, 238, 450, 858, 922], "en": 15, "wikipedia": 15, "org": [15, 82, 95, 122, 127, 238], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19, 238], "etc": [16, 81, 93, 96, 98, 102, 105, 106, 108, 238, 493, 833, 834, 915], "inform": [18, 62, 96, 105, 127, 238, 298, 299, 300, 378, 437, 544, 591, 636, 696, 697, 698, 789, 845, 915], "separ": [19, 25, 88, 173, 175, 201, 206, 208, 238, 250, 270, 274, 449, 499, 503, 504, 544, 610, 636, 666, 670, 857, 884, 893, 915], "between": [19, 64, 113, 114, 115, 116, 177, 230, 238, 274, 295, 311, 365, 405, 409, 421, 443, 500, 502, 525, 526, 530, 544, 592, 630, 636, 670, 690, 710, 770, 808, 812, 824, 851, 915], "set_tbl_column_data_type_inlin": 19, "max": [20, 30, 115, 116, 128, 137, 145, 146, 147, 175, 238, 298, 299, 305, 355, 404, 410, 417, 429, 466, 544, 568, 572, 573, 574, 602, 636, 683, 696, 697, 702, 708, 760, 813, 820, 835, 874, 915], "both": [20, 25, 47, 66, 95, 146, 147, 160, 161, 168, 183, 238, 249, 365, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 578, 579, 588, 636, 770, 915], "element": [20, 91, 116, 119, 250, 251, 252, 253, 254, 255, 256, 267, 269, 270, 301, 302, 304, 305, 306, 307, 308, 309, 351, 361, 369, 384, 405, 410, 413, 428, 434, 435, 436, 441, 465, 466, 480, 481, 483, 544, 645, 646, 647, 648, 649, 650, 651, 663, 665, 666, 695, 700, 701, 702, 703, 704, 705, 706, 756, 761, 777, 793, 808, 813, 831, 842, 843, 844, 848, 849, 873, 874, 889, 890, 899, 900, 904, 915], "width": [21, 93, 94, 238, 455, 461, 472, 636, 863, 869, 880], "char": [21, 47, 457, 865], "enabl": [22, 187, 215, 238, 429, 544, 597, 614, 636, 835, 915], "addit": [22, 84, 96, 105, 113, 114, 129, 134, 145, 173, 187, 193, 208, 215, 218, 238, 350, 353, 404, 440, 496, 497, 510, 529, 532, 544, 561, 565, 572, 597, 604, 610, 614, 618, 636, 758, 915], "verbos": 22, "debug": [22, 559, 566, 583, 636], "log": [22, 58, 346, 483, 544, 751, 899, 915], "if_set": 23, "dict": [23, 30, 57, 59, 62, 81, 83, 84, 85, 86, 87, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 115, 158, 173, 179, 183, 184, 186, 199, 200, 238, 388, 544, 594, 596, 636, 795, 915], "show": [23, 131, 144, 162, 172, 238, 562, 591, 600, 636], "variabl": [23, 88, 167, 201, 238, 587, 636, 893, 915], "chang": [23, 56, 65, 93, 94, 109, 209, 210, 211, 238, 250, 309, 310, 336, 388, 405, 417, 418, 419, 420, 421, 423, 424, 425, 544, 611, 636, 706, 707, 739, 740, 808, 840, 915], "restrict": [23, 466, 874], "dictionari": [23, 81, 83, 84, 85, 87, 93, 94, 99, 103, 104, 158, 173, 183, 184, 199, 200, 238, 388, 544, 636, 708, 795, 915], "those": [23, 93, 238, 410, 544, 813, 915], "_have_": 23, "been": [23, 65, 88, 238, 410, 544, 813, 915], "set_stat": 23, "all_stat": 23, "file": [24, 25, 27, 28, 29, 30, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 135, 238, 566, 593, 601, 602, 617, 636, 644, 915], "binaryio": [24, 27, 92, 93, 97, 98, 99, 102, 103, 238], "bytesio": [24, 25, 27, 30, 92, 93, 94, 97, 98, 102, 238], "path": [24, 25, 27, 28, 29, 30, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 238, 429, 453, 544, 593, 601, 602, 617, 636, 835, 861, 915], "compress": [24, 27, 30, 238, 601, 602, 636], "avrocompress": [24, 238], "uncompress": [24, 27, 30, 98, 106, 238, 602, 636], "write": [24, 25, 26, 27, 28, 30, 94, 98, 238, 298, 299, 300, 544, 581, 600, 602, 617, 636, 696, 697, 698, 915], "apach": [24, 30, 92, 95, 238], "avro": [24, 92, 238, 553], "should": [24, 25, 27, 28, 29, 30, 81, 83, 85, 87, 88, 91, 96, 113, 114, 116, 119, 122, 123, 129, 146, 158, 161, 183, 184, 200, 201, 208, 220, 238, 245, 250, 269, 296, 309, 344, 350, 371, 373, 416, 417, 418, 419, 420, 421, 423, 424, 425, 428, 437, 497, 510, 518, 544, 561, 573, 578, 579, 583, 600, 601, 602, 610, 617, 620, 636, 645, 665, 692, 706, 748, 819, 820, 821, 822, 823, 824, 826, 827, 828, 831, 845, 915], "written": [24, 25, 27, 28, 29, 30, 238, 601, 602, 617, 636], "snappi": [24, 30, 238, 602, 636], "deflat": [24, 238], "import": [24, 25, 27, 30, 33, 56, 66, 81, 85, 86, 104, 105, 109, 111, 112, 113, 114, 115, 116, 128, 144, 146, 159, 161, 187, 203, 209, 211, 238, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 508, 518, 573, 579, 583, 597, 636, 700, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 774, 778, 779, 780, 785, 819, 843, 889, 915], "pathlib": [24, 25, 27, 30, 104, 107, 238, 601, 602, 636], "foo": [24, 25, 27, 28, 29, 30, 88, 123, 126, 127, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 155, 160, 163, 164, 165, 166, 169, 172, 175, 177, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 212, 213, 214, 217, 238, 246, 266, 271, 272, 275, 276, 298, 299, 300, 332, 362, 363, 406, 414, 430, 431, 443, 445, 447, 449, 451, 456, 462, 464, 466, 468, 470, 471, 477, 479, 490, 493, 495, 497, 500, 501, 502, 511, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 534, 535, 536, 544, 560, 561, 562, 563, 569, 576, 577, 578, 594, 596, 597, 609, 610, 613, 615, 617, 636, 670, 696, 736, 817, 853, 855, 857, 859, 874, 915], "bar": [24, 25, 27, 28, 29, 30, 88, 123, 126, 127, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 149, 151, 152, 153, 155, 160, 163, 164, 165, 166, 169, 172, 175, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 207, 208, 212, 213, 217, 238, 246, 276, 363, 437, 447, 449, 464, 466, 490, 495, 497, 500, 501, 502, 511, 516, 520, 521, 522, 523, 524, 525, 529, 530, 531, 534, 535, 536, 544, 560, 561, 562, 563, 569, 576, 577, 578, 594, 596, 597, 609, 610, 613, 617, 636, 670, 845, 855, 857, 874, 915], "ham": [24, 25, 27, 30, 88, 126, 127, 129, 130, 131, 132, 138, 139, 141, 148, 149, 151, 160, 164, 165, 166, 169, 172, 177, 179, 181, 183, 185, 186, 187, 189, 190, 192, 194, 195, 196, 201, 202, 203, 204, 207, 212, 213, 238, 497, 560, 561, 562, 563, 569, 578, 594, 596, 597, 609, 615, 636], "d": [24, 25, 27, 30, 47, 64, 84, 109, 128, 144, 148, 149, 152, 160, 163, 196, 198, 209, 213, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 319, 339, 365, 432, 445, 451, 465, 469, 496, 514, 544, 578, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 719, 743, 770, 853, 859, 873, 877, 915], "e": [24, 25, 27, 30, 47, 82, 93, 94, 97, 98, 102, 106, 108, 128, 144, 149, 163, 196, 198, 209, 238, 250, 346, 350, 365, 383, 388, 432, 437, 510, 544, 581, 594, 636, 751, 770, 832, 845, 896, 915], "dirpath": [24, 25, 27, 30, 104, 238], "new_fil": [24, 25, 27, 30, 238], "has_head": [25, 93, 94, 97, 104, 238], "sep": [25, 90, 93, 94, 104, 238], "quot": [25, 93, 94, 104, 238], "batch_siz": [25, 93, 94, 107, 238], "1024": [25, 30, 93, 94, 107, 238, 602, 636], "datetime_format": [25, 238], "date_format": [25, 238, 339], "time_format": [25, 238], "float_precis": [25, 238], "null_valu": [25, 93, 94, 104, 238], "comma": [25, 238], "csv": [25, 93, 94, 97, 104, 238, 553, 601, 602, 636], "result": [25, 28, 29, 56, 81, 85, 87, 95, 96, 104, 106, 108, 109, 116, 135, 146, 157, 171, 190, 203, 218, 238, 347, 348, 349, 353, 378, 404, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 429, 431, 464, 465, 493, 503, 504, 505, 519, 533, 544, 556, 573, 583, 591, 599, 601, 602, 617, 618, 636, 644, 753, 754, 755, 789, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 835, 838, 872, 873, 896, 915], "instead": [25, 28, 29, 61, 91, 93, 102, 115, 119, 123, 146, 158, 171, 173, 183, 184, 187, 203, 215, 238, 259, 262, 454, 456, 462, 468, 493, 528, 532, 544, 567, 573, 597, 614, 617, 636, 654, 657, 833, 834, 862, 864, 870, 876, 897, 915], "whether": [25, 66, 85, 87, 116, 238, 392, 393, 429, 544, 583, 636], "header": [25, 30, 93, 94, 97, 104, 132, 175, 206, 238, 602, 636], "field": [25, 48, 77, 79, 84, 208, 238, 287, 388, 452, 465, 466, 474, 503, 504, 519, 532, 544, 610, 636, 683, 873, 874, 883, 884], "symbol": [25, 238], "byte": [25, 41, 93, 94, 97, 98, 99, 102, 103, 104, 133, 238, 290, 293, 294, 454, 457, 602, 636, 685, 688, 689, 752, 862, 865, 915], "process": [25, 238, 601, 602, 636], "per": [25, 114, 115, 144, 171, 172, 193, 227, 229, 230, 238, 250, 269, 272, 286, 440, 494, 544, 604, 627, 629, 630, 636, 665, 668, 682], "thread": [25, 90, 93, 94, 95, 117, 238, 250, 269, 544, 665], "specifi": [25, 56, 66, 68, 77, 79, 81, 115, 129, 133, 134, 137, 145, 173, 183, 187, 193, 208, 215, 218, 238, 347, 348, 349, 350, 355, 388, 404, 413, 440, 455, 461, 494, 496, 497, 510, 529, 532, 544, 561, 565, 568, 572, 597, 604, 610, 614, 618, 636, 752, 753, 754, 755, 760, 863, 869, 915], "defin": [25, 33, 66, 113, 114, 115, 123, 146, 147, 171, 174, 220, 238, 250, 286, 365, 417, 418, 419, 420, 421, 423, 424, 425, 492, 518, 532, 544, 573, 574, 590, 620, 636, 645, 682, 770, 915], "chrono": [25, 238, 339, 469, 743, 877], "rust": [25, 30, 74, 98, 102, 123, 220, 238, 620], "crate": [25, 238], "fraction": [25, 111, 112, 185, 238, 337, 405, 427, 469, 544, 741, 808, 830, 915], "second": [25, 66, 146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 469, 507, 508, 544, 573, 574, 579, 636, 736, 740, 745], "precis": [25, 158, 184, 200, 238, 314, 469, 714], "infer": [25, 81, 83, 84, 85, 86, 87, 93, 94, 97, 104, 107, 113, 123, 238, 414, 452, 469, 544, 636, 817, 860, 915], "maximum": [25, 93, 94, 104, 114, 115, 116, 164, 238, 263, 298, 299, 389, 401, 410, 520, 544, 584, 636, 659, 696, 697, 723, 796, 804, 809, 813, 915], "timeunit": [25, 33, 34, 66, 238, 314, 315, 340, 344, 714, 715, 744, 748], "frame": [25, 26, 56, 84, 111, 115, 123, 124, 158, 159, 168, 171, 174, 183, 184, 203, 209, 238, 557, 588, 590, 636, 695, 915], "datetim": [25, 41, 56, 66, 128, 144, 146, 147, 159, 161, 211, 238, 266, 267, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 365, 417, 418, 419, 420, 421, 423, 424, 425, 469, 482, 508, 514, 518, 523, 544, 573, 574, 579, 636, 662, 663, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 770, 785, 796, 799, 804, 805, 834, 877, 898, 915], "decim": [25, 41, 238, 426, 544, 829, 915], "place": [25, 130, 151, 152, 180, 189, 190, 193, 213, 238, 259, 262, 274, 281, 430, 431, 439, 544, 598, 599, 604, 636, 654, 657, 670, 677, 814, 816, 837, 838, 847, 915], "float64": [25, 84, 91, 93, 115, 119, 132, 133, 140, 186, 203, 215, 238, 251, 252, 253, 254, 255, 256, 295, 301, 302, 337, 350, 371, 373, 435, 436, 480, 481, 497, 510, 544, 563, 596, 614, 636, 741, 897, 902, 915], "datatyp": [25, 28, 41, 48, 54, 81, 83, 84, 85, 87, 89, 91, 97, 99, 103, 116, 119, 132, 134, 140, 186, 187, 238, 270, 295, 350, 432, 449, 469, 482, 497, 510, 544, 553, 565, 596, 597, 617, 636, 645, 666, 690, 708, 783, 785, 787, 839, 857, 877, 898, 915], "repres": [25, 42, 54, 66, 81, 83, 85, 86, 87, 238, 371, 373, 497, 510, 518, 544, 834, 849, 904, 915], "null": [25, 56, 64, 84, 93, 94, 104, 109, 122, 124, 128, 131, 137, 140, 141, 153, 160, 165, 166, 172, 177, 189, 190, 193, 194, 195, 199, 203, 208, 210, 212, 215, 238, 246, 249, 250, 259, 262, 268, 271, 272, 275, 281, 286, 287, 289, 291, 298, 299, 300, 303, 305, 308, 310, 312, 313, 318, 321, 324, 326, 328, 331, 338, 347, 348, 349, 350, 353, 354, 355, 356, 360, 364, 371, 372, 373, 374, 375, 380, 388, 403, 405, 411, 416, 417, 418, 419, 420, 421, 423, 424, 425, 430, 431, 432, 434, 439, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 461, 463, 465, 466, 467, 472, 473, 474, 482, 489, 490, 496, 498, 499, 510, 518, 532, 544, 557, 562, 568, 577, 578, 598, 599, 604, 610, 611, 614, 615, 617, 636, 645, 654, 657, 664, 677, 682, 683, 686, 695, 696, 709, 712, 718, 721, 727, 729, 732, 735, 742, 753, 754, 755, 758, 760, 765, 781, 782, 807, 808, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 837, 838, 842, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 869, 871, 873, 874, 875, 896, 897, 898, 905, 915], "empti": [25, 72, 84, 93, 94, 97, 104, 124, 125, 155, 167, 238, 529, 557, 558, 587, 636, 695, 699, 773, 915], "table_nam": [26, 238], "connection_uri": [26, 95, 238], "if_exist": [26, 238], "dbwritemod": [26, 238], "fail": [26, 82, 96, 98, 105, 122, 207, 238, 260, 287, 469, 544, 609, 636, 645, 877, 915], "engin": [26, 95, 123, 220, 238, 583, 620, 636], "dbwriteengin": [26, 238], "sqlalchemi": [26, 238], "databas": [26, 95, 238, 553], "append": [26, 115, 135, 160, 161, 238, 411, 544, 578, 579, 636, 915], "creat": [26, 65, 66, 81, 85, 87, 105, 114, 115, 116, 124, 125, 146, 147, 172, 175, 211, 215, 238, 315, 336, 341, 411, 463, 487, 493, 498, 506, 507, 508, 544, 557, 558, 564, 573, 574, 614, 636, 695, 699, 707, 712, 715, 740, 745, 806, 814, 871, 896, 915], "connect": [26, 93, 95, 98, 102, 106, 108, 109, 238, 554], "uri": [26, 95, 96, 105, 238], "postgresql": [26, 95, 238, 404, 544], "usernam": [26, 93, 95, 98, 102, 106, 108, 238], "password": [26, 93, 95, 98, 102, 106, 108, 238], "server": [26, 95, 238], "port": [26, 93, 95, 98, 102, 106, 108, 238], "replac": [26, 93, 94, 104, 136, 137, 181, 206, 215, 238, 315, 335, 388, 460, 544, 567, 614, 636, 715, 739, 795, 833, 834, 868, 915], "insert": [26, 93, 94, 98, 102, 104, 106, 107, 108, 152, 180, 206, 208, 238, 428, 443, 472, 544, 610, 636, 831, 851, 880, 915], "mode": [26, 238, 528, 544, 636, 915], "new": [26, 91, 119, 120, 123, 131, 151, 152, 171, 172, 179, 180, 197, 208, 209, 215, 238, 246, 315, 352, 364, 387, 459, 460, 465, 466, 473, 474, 479, 544, 553, 562, 594, 608, 610, 614, 620, 636, 641, 645, 712, 715, 757, 806, 816, 867, 868, 873, 874, 881, 883, 888, 894, 906, 915], "overwrit": [26, 81, 83, 84, 85, 87, 93, 94, 104, 122, 238, 566, 636], "alreadi": [26, 238, 269, 309, 544, 665, 706, 915], "adbc": [26, 95, 238], "ipccompress": [27, 238], "arrow": [27, 67, 81, 95, 98, 106, 198, 238, 601, 636, 892, 896, 915], "ipc": [27, 98, 99, 106, 109, 238, 553], "binari": [27, 238, 290, 292, 293, 294, 491, 685, 687, 688, 689], "stream": [27, 63, 238, 559, 564, 566, 583, 591, 600, 601, 602, 636], "feather": [27, 98, 106, 238, 553], "lz4": [27, 30, 238, 601, 602, 636], "zstd": [27, 30, 238, 601, 602, 636], "pretti": [28, 238], "row_ori": [28, 238], "iobas": [28, 29, 100, 101, 238, 593, 617, 636], "serial": [28, 29, 238], "represent": [28, 29, 238, 296, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 337, 342, 343, 345, 482, 544, 564, 581, 636, 692, 717, 720, 722, 726, 728, 731, 733, 734, 737, 738, 741, 746, 747, 749, 898, 915], "orient": [28, 57, 59, 85, 87, 238, 636], "slower": [28, 85, 87, 123, 145, 173, 211, 220, 238, 572, 620, 636], "common": [28, 238], "write_ndjson": [28, 238], "newlin": [29, 101, 107, 238], "delimit": [29, 88, 93, 94, 101, 104, 107, 175, 201, 238, 443, 851, 893, 915], "parquetcompress": [30, 238], "compression_level": [30, 238, 602, 636], "statist": [30, 93, 94, 102, 108, 128, 238, 348, 349, 378, 417, 418, 419, 420, 421, 422, 423, 424, 425, 437, 544, 602, 636, 708, 754, 755, 789, 825, 845, 915], "row_group_s": [30, 238, 602, 636], "use_pyarrow": [30, 93, 98, 102, 238, 602, 636, 895, 896, 915], "pyarrow_opt": [30, 96, 102, 105, 238], "object": [30, 66, 82, 83, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 114, 115, 116, 122, 145, 162, 203, 238, 518, 553, 558, 576, 581, 593, 636, 658, 691, 713, 850, 892, 915], "parquet": [30, 102, 103, 108, 238, 553, 602, 636], "gzip": [30, 238, 602, 636], "lzo": [30, 238, 602, 636], "brotli": [30, 238, 602, 636], "choos": [30, 238, 601, 602, 636], "good": [30, 158, 238, 601, 602, 636], "perform": [30, 72, 82, 93, 94, 98, 102, 104, 106, 107, 108, 122, 123, 146, 147, 161, 178, 220, 238, 250, 404, 544, 573, 574, 579, 601, 602, 616, 620, 636], "fast": [30, 238, 353, 429, 544, 601, 602, 636, 758, 835, 915], "decompress": [30, 238, 601, 602, 636], "backward": [30, 137, 161, 238, 289, 355, 544, 568, 579, 602, 636, 760, 915], "guarante": [30, 82, 93, 94, 238, 566, 602, 636], "deal": [30, 238, 410, 469, 544, 602, 636, 813, 877, 915], "older": [30, 238, 602, 636], "reader": [30, 90, 93, 94, 98, 102, 238, 554, 602, 636], "level": [30, 104, 106, 107, 108, 115, 123, 140, 171, 238, 356, 544, 575, 582, 602, 636], "higher": [30, 177, 230, 238, 409, 421, 526, 544, 592, 602, 630, 636, 812, 824, 915], "mean": [30, 93, 94, 98, 102, 104, 128, 137, 145, 175, 218, 238, 352, 355, 418, 437, 450, 495, 544, 568, 572, 583, 602, 618, 636, 708, 757, 760, 765, 821, 845, 858, 915], "smaller": [30, 133, 238, 566, 602, 636, 752, 915], "disk": [30, 98, 238, 600, 601, 602, 636], "min": [30, 115, 116, 128, 137, 146, 147, 175, 238, 298, 300, 306, 355, 404, 410, 420, 529, 544, 568, 573, 574, 602, 636, 696, 698, 703, 708, 760, 813, 823, 915], "11": [30, 147, 238, 312, 313, 322, 332, 336, 341, 364, 405, 424, 438, 472, 497, 533, 544, 559, 574, 575, 582, 591, 602, 607, 636, 645, 736, 740, 745, 819, 915], "22": [30, 238, 336, 341, 344, 469, 497, 602, 636, 740, 745, 748, 877], "extra": [30, 93, 96, 97, 98, 102, 105, 106, 108, 135, 238, 602, 636, 644, 915], "comput": [30, 63, 64, 69, 133, 145, 161, 203, 207, 218, 230, 238, 244, 251, 252, 253, 254, 255, 256, 277, 278, 279, 301, 302, 304, 305, 306, 307, 308, 311, 346, 351, 378, 383, 384, 399, 404, 405, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 441, 480, 481, 494, 500, 502, 509, 525, 530, 544, 572, 576, 578, 579, 602, 609, 615, 618, 630, 636, 640, 646, 647, 648, 649, 650, 651, 673, 674, 675, 700, 701, 702, 703, 704, 705, 710, 751, 752, 756, 789, 792, 793, 800, 808, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 842, 843, 844, 845, 848, 889, 890, 897, 915], "size": [30, 93, 94, 114, 115, 116, 117, 133, 146, 209, 238, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 493, 544, 573, 602, 636, 752, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 915], "group": [30, 94, 145, 146, 147, 159, 171, 173, 175, 209, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 250, 269, 358, 404, 439, 440, 450, 478, 492, 544, 572, 573, 574, 602, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 665, 858], "chunk": [30, 90, 93, 94, 102, 104, 106, 107, 108, 115, 116, 135, 159, 170, 238, 249, 411, 544, 602, 636, 644, 694, 764, 801, 814, 892, 915], "reduc": [30, 93, 94, 102, 104, 106, 107, 108, 225, 226, 228, 231, 238, 432, 512, 544, 602, 625, 626, 628, 631, 636, 797, 811, 839, 885, 915], "memori": [30, 64, 81, 82, 85, 86, 87, 93, 94, 98, 102, 104, 106, 107, 108, 122, 123, 135, 191, 220, 238, 411, 432, 544, 602, 620, 636, 644, 814, 839, 840, 915], "pressur": [30, 102, 107, 108, 238, 432, 544, 602, 636, 839, 915], "improv": [30, 98, 106, 238, 602, 636], "speed": [30, 238, 250, 544, 602, 636], "minimum": [30, 114, 115, 116, 140, 169, 238, 298, 300, 347, 348, 349, 398, 402, 410, 523, 544, 589, 602, 636, 696, 698, 730, 753, 754, 755, 805, 810, 813, 915], "implement": [30, 82, 105, 122, 123, 220, 238, 250, 544, 620, 833, 834, 915], "v": [30, 65, 133, 238, 428, 544, 707, 831, 915], "At": [30, 238], "moment": [30, 127, 238, 378, 437, 544, 789, 845, 915], "argument": [30, 93, 96, 102, 105, 127, 129, 134, 145, 146, 147, 165, 173, 174, 175, 187, 193, 195, 203, 208, 211, 215, 218, 238, 336, 341, 350, 365, 404, 417, 418, 419, 420, 421, 423, 424, 425, 440, 456, 462, 468, 496, 497, 510, 529, 532, 544, 561, 565, 572, 573, 574, 590, 597, 604, 610, 614, 618, 636, 740, 745, 770, 864, 870, 876, 897, 915], "pass": [30, 56, 66, 83, 97, 105, 114, 115, 116, 127, 129, 145, 173, 174, 187, 193, 215, 218, 238, 250, 319, 335, 353, 363, 404, 440, 456, 462, 468, 494, 497, 514, 532, 544, 561, 572, 576, 583, 590, 597, 600, 604, 614, 618, 636, 645, 719, 739, 758, 864, 870, 876, 915], "pyarrow": [30, 81, 86, 93, 96, 98, 102, 105, 109, 110, 159, 198, 202, 203, 238, 554, 892, 895, 896, 897, 915], "write_t": [30, 238], "base": [31, 131, 138, 146, 147, 238, 346, 347, 348, 349, 383, 384, 458, 520, 523, 544, 553, 562, 569, 573, 574, 636, 751, 753, 754, 755, 792, 793, 866, 906, 915], "calendar": [32, 33, 146, 147, 161, 211, 238, 322, 332, 336, 341, 345, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 722, 736, 740, 745, 749], "date": [33, 41, 56, 66, 93, 94, 95, 104, 109, 128, 144, 146, 147, 159, 161, 238, 266, 267, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 365, 417, 418, 419, 420, 421, 423, 424, 425, 469, 482, 514, 523, 544, 553, 573, 574, 579, 636, 662, 663, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 770, 785, 796, 799, 804, 805, 834, 877, 898, 915], "time": [33, 34, 41, 62, 63, 66, 104, 135, 146, 147, 161, 211, 238, 265, 266, 267, 287, 314, 315, 316, 319, 332, 335, 340, 344, 365, 469, 482, 483, 498, 499, 506, 507, 508, 514, 528, 544, 553, 559, 573, 574, 579, 591, 636, 644, 661, 663, 714, 715, 716, 719, 736, 739, 744, 748, 770, 877, 898, 899, 915], "time_unit": [33, 34, 66, 344, 748], "u": [33, 34, 66, 158, 184, 200, 238, 314, 315, 319, 340, 344, 469, 514, 528, 714, 715, 719, 744, 748], "time_zon": [33, 66, 316, 335, 716, 739], "m": [33, 34, 66, 314, 315, 319, 339, 340, 344, 469, 508, 514, 714, 715, 719, 743, 744, 748, 877], "unit": [33, 34, 66, 115, 116, 133, 238, 314, 315, 319, 340, 344, 385, 395, 486, 514, 544, 591, 636, 714, 715, 719, 744, 748, 752, 794, 902, 915], "timezon": [33, 66, 469, 877], "zoneinfo": 33, "run": [33, 63, 123, 162, 220, 238, 250, 269, 309, 529, 544, 559, 564, 566, 583, 591, 600, 601, 602, 620, 636, 665, 706, 915, 921], "available_timezon": 33, "attribut": [33, 34, 41, 113, 238, 537, 538, 540, 545, 548, 549, 550, 636, 907, 909, 911, 918, 919, 920], "delta": [34, 96, 105, 500, 525, 530, 553, 849, 904, 915], "32": [35, 38, 51, 58, 110, 147, 157, 238, 432, 544, 574, 636, 710, 737, 808, 824, 915], "bit": [35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 412, 444, 544, 815, 852, 915], "sign": [37, 38, 39, 40, 332, 412, 472, 544, 736, 815, 880, 915], "integ": [37, 38, 39, 40, 50, 51, 52, 53, 114, 115, 146, 147, 238, 297, 337, 359, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 458, 493, 514, 518, 544, 573, 574, 636, 652, 653, 693, 741, 763, 815, 825, 834, 866, 915], "inner": [41, 47, 160, 210, 238, 274, 311, 544, 578, 611, 617, 636, 670, 710, 915], "union": [41, 48, 56, 63, 64, 88, 89, 171, 173, 238, 490, 491, 498, 504, 505, 514, 520, 523, 527, 533, 559, 564, 566, 591, 600, 636, 710, 777, 834, 915], "datatypeclass": [41, 48, 89], "timedelta": [41, 66, 146, 147, 211, 238, 317, 319, 320, 322, 327, 329, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 636, 723, 725, 730, 736, 740, 745, 796, 799, 804, 805, 915], "tupl": [41, 95, 123, 158, 183, 184, 188, 217, 238, 414, 544, 591, 600, 636, 817, 915], "nest": [41, 47, 133, 238, 553, 752, 915], "arrai": [41, 81, 85, 93, 94, 102, 133, 198, 202, 203, 238, 265, 276, 277, 278, 279, 280, 283, 284, 292, 298, 299, 300, 304, 305, 306, 307, 308, 384, 417, 418, 420, 423, 424, 425, 429, 445, 447, 450, 451, 453, 498, 509, 544, 636, 661, 672, 673, 674, 675, 676, 679, 680, 687, 696, 697, 698, 702, 703, 704, 705, 710, 752, 793, 820, 821, 823, 826, 827, 828, 835, 840, 853, 855, 858, 859, 861, 892, 896, 897, 905, 915], "within": [41, 111, 112, 161, 238, 579, 636], "wrap": [43, 105, 365, 544], "arbitrari": [43, 115], "python": [43, 66, 93, 94, 110, 123, 158, 184, 200, 220, 238, 250, 315, 386, 492, 544, 620, 645, 715, 723, 724, 725, 730, 895, 915], "queri": [44, 63, 95, 98, 104, 106, 107, 108, 135, 162, 174, 238, 287, 388, 453, 544, 559, 564, 566, 575, 582, 591, 600, 616, 620, 636, 644, 861, 915, 921], "pars": [44, 93, 94, 97, 104, 106, 107, 145, 187, 193, 215, 218, 238, 404, 440, 452, 458, 469, 494, 496, 499, 514, 532, 544, 572, 597, 604, 614, 618, 636, 860, 866, 877], "given": [44, 46, 56, 65, 66, 81, 83, 84, 85, 87, 91, 93, 94, 104, 113, 114, 115, 116, 119, 123, 133, 134, 173, 174, 183, 189, 190, 193, 210, 238, 266, 281, 316, 340, 346, 365, 383, 404, 410, 413, 414, 417, 418, 420, 423, 424, 425, 428, 430, 431, 451, 469, 474, 483, 490, 510, 544, 565, 583, 590, 598, 599, 604, 611, 620, 636, 645, 662, 677, 707, 716, 744, 751, 752, 770, 792, 794, 806, 813, 817, 820, 821, 823, 826, 827, 828, 831, 837, 838, 859, 877, 899, 902, 906, 915], "transform": [44, 123, 238, 386, 470, 471, 544], "lf": [46, 563, 569, 596, 613, 636], "under": [46, 57, 58, 59, 60, 537, 538, 540, 545, 548, 549, 550, 907, 909, 911, 918, 919, 920], "add": [46, 94, 123, 135, 146, 215, 216, 238, 407, 475, 508, 512, 536, 544, 573, 578, 614, 615, 616, 636, 644, 915], "context": [47, 171, 238, 245, 250, 269, 356, 394, 439, 440, 487, 492, 501, 511, 514, 529, 543, 544, 553, 615, 636, 665], "manag": [47, 553], "categor": [47, 88, 118, 160, 201, 238, 296, 388, 482, 544, 691, 692, 898, 915], "temporarili": [47, 146, 147, 238, 573, 574, 636], "cach": [47, 63, 98, 104, 106, 108, 118, 388, 417, 418, 419, 420, 421, 423, 424, 425, 469, 544, 559, 564, 566, 591, 600, 636, 877], "categori": [47, 65, 118, 296, 692, 707, 915], "until": [47, 162, 238], "finish": [47, 69, 135, 238, 644, 915], "global": [47, 115, 118, 388, 544], "invalid": [47, 93, 94, 104, 452, 453, 458, 860, 861, 866], "outermost": 47, "exit": [47, 120], "df1": [47, 56, 64, 111, 135, 141, 203, 213, 238], "color": [47, 220, 620], "red": [47, 220, 238, 620], "green": [47, 220, 620], "blue": 47, "orang": [47, 126, 221, 222, 224, 225, 226, 228, 230, 231, 238, 621, 622, 624, 625, 626, 628, 630, 631], "uint8": [47, 113, 307, 308, 476, 544, 704, 705, 885, 915], "df2": [47, 56, 64, 111, 135, 141, 203, 213, 238], "yellow": 47, "black": [47, 123, 238], "join": [47, 56, 63, 161, 210, 238, 364, 404, 544, 559, 564, 566, 579, 591, 600, 611, 615, 636], "succe": [47, 93, 94, 104], "df_join": 47, "cat": [47, 65, 444, 470, 471, 482, 499, 540, 544, 707, 852, 911, 915], "u8": [47, 88, 201, 238, 893, 915], "sequenc": [48, 56, 63, 81, 83, 84, 85, 87, 88, 90, 93, 94, 114, 115, 116, 129, 131, 134, 135, 160, 161, 167, 171, 174, 175, 193, 201, 206, 207, 208, 209, 210, 211, 238, 369, 386, 440, 474, 490, 491, 492, 494, 498, 503, 504, 505, 512, 514, 519, 520, 523, 527, 533, 544, 561, 562, 565, 578, 579, 590, 604, 609, 610, 611, 636, 644, 710, 777, 834, 883, 915], "map": [48, 83, 84, 93, 94, 98, 99, 102, 103, 104, 106, 123, 132, 158, 179, 183, 184, 199, 238, 336, 341, 387, 388, 487, 492, 544, 563, 594, 636, 740, 745, 795, 915], "composit": 48, "make": [48, 64, 81, 86, 93, 94, 95, 98, 102, 106, 108, 146, 147, 168, 171, 178, 211, 238, 348, 349, 413, 465, 472, 544, 573, 574, 588, 636, 754, 755, 873, 880, 915], "up": [48, 95, 158, 161, 184, 200, 238, 250, 297, 472, 544, 578, 579, 583, 636, 693, 880, 915], "dai": [49, 66, 146, 147, 159, 161, 211, 238, 319, 322, 329, 332, 333, 334, 336, 340, 341, 342, 343, 345, 417, 418, 419, 420, 421, 423, 424, 425, 506, 507, 508, 544, 573, 574, 579, 636, 736, 737, 740, 745, 747], "unsign": [50, 51, 52, 53, 412, 544, 815, 915], "could": [54, 69, 131, 146, 238, 295, 503, 512, 544, 562, 573, 636, 690, 915], "determin": [54, 56, 64, 84, 87, 93, 94, 97, 102, 108, 123, 140, 146, 147, 158, 159, 206, 211, 238, 287, 296, 394, 413, 417, 418, 419, 420, 421, 423, 424, 425, 437, 544, 573, 574, 636, 683, 692, 845, 915], "static": [54, 620], "utf": 55, "intern": [56, 61, 158, 183, 199, 238, 358, 493, 505, 514, 520, 523, 528, 532, 533, 544, 658, 691, 713, 831, 850, 915], "descend": [56, 193, 238, 259, 262, 283, 410, 429, 439, 440, 483, 494, 544, 604, 636, 654, 657, 679, 784, 813, 835, 847, 899, 915], "uniqu": [56, 113, 114, 116, 156, 171, 229, 238, 261, 368, 376, 400, 469, 485, 487, 524, 544, 629, 636, 656, 708, 775, 786, 802, 877, 901, 903, 915], "kei": [56, 62, 146, 161, 168, 173, 175, 179, 182, 238, 573, 579, 588, 594, 595, 636], "contain": [56, 62, 83, 86, 96, 105, 111, 131, 159, 171, 175, 238, 250, 369, 388, 445, 448, 450, 451, 453, 466, 467, 544, 562, 591, 636, 795, 801, 853, 856, 858, 859, 861, 874, 875, 892, 915], "have": [56, 82, 93, 94, 97, 115, 116, 118, 135, 158, 178, 184, 200, 238, 309, 347, 348, 349, 395, 410, 469, 544, 600, 616, 636, 644, 706, 739, 753, 754, 755, 765, 813, 877, 915], "inject": 56, "fill": [56, 64, 91, 119, 136, 137, 190, 209, 238, 289, 305, 308, 354, 355, 360, 364, 417, 418, 420, 423, 424, 425, 431, 455, 461, 472, 513, 544, 567, 568, 599, 615, 636, 759, 760, 806, 820, 821, 823, 826, 827, 828, 838, 863, 869, 880, 915], "each": [56, 94, 107, 111, 112, 114, 123, 144, 145, 159, 161, 173, 203, 208, 217, 218, 220, 221, 223, 232, 238, 250, 273, 285, 336, 341, 410, 451, 465, 466, 492, 499, 532, 544, 579, 591, 610, 618, 620, 621, 623, 632, 636, 669, 681, 694, 740, 745, 813, 859, 873, 874, 884, 915], "sort": [56, 57, 111, 146, 147, 161, 168, 174, 175, 211, 223, 232, 238, 259, 262, 296, 356, 429, 440, 487, 489, 494, 544, 564, 573, 574, 579, 588, 590, 591, 600, 623, 632, 636, 654, 657, 692, 784, 835, 900, 903, 915], "origin": [56, 93, 94, 207, 238, 335, 377, 388, 404, 412, 445, 450, 451, 453, 455, 461, 472, 544, 609, 636, 739, 795, 853, 858, 859, 861, 863, 869, 880, 915], "order": [56, 84, 111, 145, 146, 147, 173, 174, 175, 185, 193, 207, 211, 238, 259, 262, 283, 296, 410, 427, 428, 429, 439, 440, 474, 484, 485, 494, 544, 572, 573, 574, 601, 602, 604, 609, 636, 654, 657, 679, 692, 784, 813, 818, 830, 831, 835, 847, 883, 900, 901, 915], "unless": [56, 83, 203, 238, 636, 897, 905, 915], "case": [56, 81, 83, 84, 85, 87, 108, 123, 135, 146, 147, 158, 238, 386, 394, 395, 536, 544, 573, 574, 636, 644, 915], "final": [56, 108, 347, 348, 349, 544, 566, 636, 753, 754, 755, 915], "doe": [56, 75, 81, 83, 84, 85, 87, 93, 94, 96, 97, 104, 105, 109, 111, 112, 135, 159, 183, 184, 215, 238, 344, 388, 485, 511, 544, 566, 583, 614, 636, 644, 748, 765, 795, 840, 905, 915], "receiv": [56, 123, 174, 238, 544, 590, 636], "now": [56, 147, 238, 574, 636], "ha": [56, 65, 88, 105, 122, 211, 238, 250, 309, 377, 395, 483, 492, 544, 620, 695, 706, 765, 776, 899, 915], "whose": [56, 161, 175, 238, 350, 510, 544, 579, 636], "post": 56, "constrain": 56, "newli": 56, "singl": [56, 64, 93, 94, 95, 102, 104, 114, 129, 130, 131, 135, 142, 173, 183, 193, 238, 250, 267, 286, 332, 356, 386, 411, 414, 440, 443, 489, 492, 494, 497, 499, 519, 528, 544, 561, 562, 604, 636, 644, 663, 682, 736, 814, 817, 851, 892, 915], "boolean": [56, 61, 138, 140, 193, 238, 247, 248, 266, 290, 356, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 440, 452, 489, 494, 532, 544, 569, 604, 636, 642, 643, 655, 662, 685, 761, 770, 771, 772, 774, 775, 777, 778, 779, 780, 781, 782, 786, 809, 810, 833, 852, 906, 915], "associ": [56, 238], "2022": [56, 66, 110, 128, 144, 238, 315, 469, 508, 514, 715, 722, 877], "x": [56, 93, 94, 95, 104, 114, 115, 133, 151, 154, 156, 160, 167, 238, 250, 265, 274, 361, 386, 413, 434, 437, 465, 482, 492, 503, 504, 505, 512, 519, 527, 533, 544, 578, 583, 587, 603, 636, 641, 645, 760, 787, 842, 845, 873, 898, 915], "y": [56, 114, 115, 133, 154, 156, 160, 167, 238, 265, 274, 339, 413, 469, 505, 533, 544, 578, 587, 603, 636, 641, 743, 877, 915], "12": [56, 65, 66, 146, 147, 161, 211, 238, 307, 315, 320, 322, 329, 334, 336, 341, 345, 405, 432, 504, 506, 507, 519, 544, 573, 574, 575, 579, 582, 600, 607, 636, 645, 707, 715, 733, 740, 745, 829, 915], "df3": [56, 238], "set_tbl_format": 56, "09": [56, 147, 238, 315, 322, 574, 636, 717], "01": [56, 66, 128, 144, 146, 147, 211, 238, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 469, 508, 573, 574, 636, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 877], "02": [56, 66, 144, 146, 147, 211, 238, 314, 315, 319, 320, 321, 327, 328, 329, 337, 338, 340, 342, 344, 426, 469, 508, 544, 573, 574, 636, 714, 715, 719, 720, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 877], "03": [56, 66, 146, 147, 211, 238, 314, 315, 316, 318, 319, 321, 328, 329, 335, 336, 337, 338, 339, 340, 341, 342, 344, 573, 574, 636, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 730, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748], "af1": 56, "af2": 56, "af3": 56, "keep": [56, 93, 94, 104, 207, 210, 211, 238, 377, 388, 496, 544, 609, 611, 636, 795, 915], "easili": [56, 187, 215, 218, 238, 497, 532, 597, 614, 618, 636], "calcul": [56, 146, 238, 268, 310, 347, 348, 349, 378, 385, 422, 437, 486, 492, 544, 573, 636, 664, 709, 753, 754, 755, 789, 825, 845, 849, 904, 915], "wise": [56, 140, 238, 251, 252, 253, 254, 255, 256, 301, 302, 351, 384, 434, 435, 436, 480, 481, 503, 504, 512, 527, 544, 646, 647, 648, 649, 650, 651, 700, 701, 756, 793, 842, 843, 844, 889, 890, 915], "dot": [56, 544, 600, 636, 915], "product": [56, 127, 238, 307, 311, 492, 544, 704, 710, 915], "fill_nul": [56, 136, 238, 469, 544, 567, 615, 636, 877, 915], "sum": [56, 133, 140, 145, 147, 157, 175, 218, 238, 250, 287, 307, 308, 346, 356, 417, 418, 420, 423, 424, 425, 489, 490, 503, 505, 512, 520, 523, 527, 544, 559, 564, 566, 572, 574, 591, 600, 618, 636, 704, 705, 751, 752, 820, 821, 823, 826, 827, 828, 915], "167": 56, "47": 56, "callabl": [57, 58, 59, 60, 104, 123, 140, 174, 220, 238, 250, 287, 386, 387, 416, 492, 503, 504, 512, 519, 527, 544, 583, 590, 620, 636, 645, 683, 819, 915], "decor": [57, 58, 59, 60, 115, 116], "access": [57, 58, 59, 60, 158, 183, 184, 238, 388, 544, 615, 636], "by_first_letter_of_column_nam": 57, "f": [57, 94, 105, 128, 144, 159, 163, 198, 206, 209, 238, 250, 287, 432, 449, 469, 492, 498, 503, 504, 512, 519, 527, 544, 683, 857, 877], "fromkei": [57, 59], "by_first_letter_of_column_valu": 57, "starts_with": [57, 444, 448, 856], "slice": [57, 63, 133, 149, 159, 196, 238, 273, 285, 416, 417, 418, 419, 420, 421, 423, 424, 425, 544, 559, 564, 566, 583, 591, 600, 601, 602, 636, 669, 681, 752, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "to_seri": [57, 61, 238, 287, 683], "xx": [57, 59], "xy": [57, 59], "yy": [57, 59], "yz": [57, 59], "schema": [57, 58, 59, 64, 76, 77, 79, 81, 83, 84, 85, 87, 93, 94, 99, 103, 104, 107, 114, 115, 123, 124, 125, 132, 133, 168, 171, 238, 287, 394, 532, 557, 558, 563, 583, 588, 617, 620, 636, 699, 915], "a1": [57, 59, 238], "a2": [57, 59], "b1": [57, 59], "b2": [57, 59], "pow_n": 58, "powersofn": 58, "next": [58, 289, 410, 544, 813, 915], "p": [58, 174, 238, 532, 544, 590, 636], "ceil": [58, 544, 915], "previou": [58, 120, 405, 474, 544, 808, 915], "floor": [58, 544, 915], "nearest": [58, 161, 177, 230, 238, 297, 359, 409, 421, 526, 544, 579, 592, 630, 636, 693, 763, 769, 812, 824, 915], "24": [58, 123, 133, 147, 238, 307, 309, 321, 544, 574, 636, 706, 721, 915], "55": [58, 238], "001": [58, 323, 324, 326, 331, 508, 727, 729, 735], "next_pow2": 58, "prev_pow2": 58, "nearest_pow2": 58, "128": [58, 808, 915], "split_by_column_dtyp": 59, "dtype": [59, 81, 83, 85, 87, 91, 93, 94, 104, 113, 114, 115, 116, 119, 122, 146, 147, 161, 203, 238, 250, 251, 252, 253, 254, 255, 256, 259, 262, 263, 264, 265, 274, 286, 295, 298, 299, 300, 301, 302, 307, 308, 318, 321, 324, 326, 328, 331, 338, 344, 350, 352, 385, 386, 412, 413, 417, 418, 419, 420, 421, 423, 424, 425, 432, 435, 436, 443, 452, 463, 476, 478, 480, 481, 482, 486, 487, 492, 493, 498, 501, 510, 514, 518, 519, 532, 544, 573, 574, 579, 636, 659, 660, 661, 670, 682, 690, 695, 696, 697, 698, 704, 705, 709, 718, 721, 727, 729, 732, 735, 742, 748, 752, 757, 773, 785, 794, 818, 832, 839, 851, 860, 871, 877, 885, 896, 897, 898, 902, 915], "collect": [59, 63, 105, 109, 162, 198, 238, 250, 493, 498, 514, 532, 544, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 592, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636], "31": [60, 110, 315, 317, 318, 329, 342, 469, 506, 507, 514, 715, 717, 718, 877], "42": [60, 147, 148, 238, 574, 636, 766, 915], "961": 60, "1764": 60, "4160": 60, "condit": [61, 131, 138, 183, 238, 448, 467, 512, 562, 569, 636], "eager": [61, 146, 209, 238, 493, 514, 518, 528, 532, 543, 553, 573, 636], "indic": [61, 88, 92, 93, 94, 98, 102, 104, 113, 114, 116, 146, 147, 201, 238, 260, 286, 367, 370, 371, 373, 374, 375, 417, 418, 419, 420, 421, 423, 424, 425, 428, 434, 478, 494, 544, 573, 574, 636, 682, 774, 778, 779, 780, 781, 782, 831, 842, 887, 893, 915], "where": [61, 95, 131, 135, 158, 167, 184, 238, 260, 343, 346, 428, 437, 500, 530, 536, 544, 587, 636, 644, 655, 747, 751, 831, 845, 849, 904, 906, 915], "evalu": [61, 136, 138, 161, 238, 260, 309, 363, 365, 369, 388, 491, 493, 509, 528, 532, 544, 569, 576, 578, 579, 636, 655, 706, 906, 915], "immedi": [61, 410, 493, 528, 532, 544, 813, 915], "arg_tru": [61, 544, 915], "u32": [61, 146, 172, 216, 221, 229, 231, 238, 245, 257, 258, 259, 260, 261, 262, 263, 264, 267, 276, 303, 304, 317, 320, 323, 327, 329, 333, 334, 337, 342, 343, 380, 388, 400, 403, 410, 428, 445, 454, 457, 482, 485, 494, 501, 524, 544, 573, 616, 621, 629, 631, 636, 654, 655, 656, 672, 690, 717, 720, 726, 728, 731, 733, 734, 737, 738, 741, 746, 747, 813, 853, 862, 865, 898, 901, 903, 915], "build": [62, 82], "wa": 62, "compil": [62, 263, 264, 659, 660], "gate": 62, "info": [62, 96, 105, 110], "otherwis": [62, 168, 187, 238, 291, 298, 299, 300, 347, 348, 349, 412, 444, 446, 536, 544, 588, 597, 636, 645, 686, 696, 697, 698, 753, 754, 755, 815, 833, 834, 852, 854, 915], "version": [62, 65, 88, 96, 105, 110, 262, 352, 525, 527, 530, 544, 657, 757, 915], "follow": [62, 93, 94, 96, 104, 105, 123, 146, 147, 161, 174, 211, 238, 250, 332, 336, 341, 410, 417, 418, 419, 420, 421, 423, 424, 425, 474, 492, 537, 538, 540, 544, 545, 548, 549, 550, 573, 574, 579, 590, 636, 736, 740, 745, 813, 833, 834, 907, 909, 911, 915, 918, 919, 920, 922], "depend": [62, 110, 250, 263, 264, 394, 410, 492, 511, 514, 544, 659, 660, 813, 915], "host": [62, 93, 98, 102, 106, 108], "git": 62, "lazy_fram": 63, "type_coercion": [63, 559, 564, 566, 591, 600, 601, 602, 636], "predicate_pushdown": [63, 559, 564, 566, 583, 591, 600, 601, 602, 636], "projection_pushdown": [63, 559, 564, 566, 583, 591, 600, 601, 602, 636], "simplify_express": [63, 559, 564, 566, 591, 600, 601, 602, 636], "no_optim": [63, 559, 566, 583, 591, 601, 602, 636], "slice_pushdown": [63, 559, 564, 566, 583, 591, 600, 601, 602, 636], "common_subplan_elimin": [63, 559, 564, 566, 591, 600, 636], "multipl": [63, 64, 93, 94, 104, 106, 107, 108, 114, 116, 129, 133, 135, 138, 145, 146, 151, 159, 173, 175, 187, 193, 215, 218, 238, 286, 392, 395, 399, 404, 414, 417, 418, 419, 420, 421, 423, 424, 425, 440, 494, 497, 503, 504, 512, 519, 527, 536, 544, 561, 569, 572, 573, 597, 604, 614, 618, 636, 644, 682, 752, 800, 817, 915], "graph": [63, 162, 238, 576, 615, 636], "parallel": [63, 64, 90, 95, 102, 108, 146, 161, 162, 174, 238, 269, 309, 544, 553, 573, 578, 579, 636, 665, 706, 915], "threadpool": 63, "coercion": [63, 413, 544, 559, 564, 566, 591, 600, 601, 602, 636], "optim": [63, 102, 104, 106, 107, 108, 158, 162, 174, 178, 184, 238, 559, 564, 566, 583, 591, 600, 601, 602, 616, 636], "predic": [63, 104, 106, 107, 108, 109, 138, 183, 238, 356, 489, 512, 536, 544, 559, 564, 566, 569, 583, 591, 594, 600, 601, 602, 616, 636, 761, 833, 834, 915], "pushdown": [63, 559, 564, 566, 583, 591, 594, 600, 601, 602, 616, 636, 833, 834, 915], "project": [63, 104, 105, 106, 107, 108, 250, 439, 440, 544, 559, 564, 566, 583, 591, 594, 600, 601, 602, 617, 636], "simplifi": [63, 238, 559, 564, 566, 591, 600, 601, 602, 636], "turn": [63, 93, 94, 104, 118, 487, 544, 559, 564, 566, 583, 591, 601, 602, 636], "off": [63, 93, 94, 104, 118, 487, 544, 559, 564, 566, 583, 591, 601, 602, 636], "Will": [63, 206, 238, 520, 523, 559, 564, 566, 591, 600, 636, 915], "try": [63, 76, 78, 93, 94, 97, 98, 102, 104, 106, 108, 559, 564, 566, 591, 600, 636], "branch": [63, 559, 564, 566, 591, 600, 636], "subplan": [63, 559, 564, 566, 591, 600, 636], "occur": [63, 267, 399, 410, 544, 559, 564, 566, 591, 600, 636, 663, 800, 813, 915], "part": [63, 81, 465, 466, 559, 564, 566, 591, 600, 615, 636, 717, 720, 726, 728, 731, 733, 734, 741, 749, 873, 874], "fashion": [63, 160, 238, 559, 564, 566, 591, 600, 636], "alpha": [63, 250, 347, 348, 349, 544, 559, 564, 566, 591, 600, 636, 753, 754, 755, 915], "item": [64, 94, 185, 238, 266, 272, 274, 352, 427, 466, 544, 662, 668, 670, 757, 830, 874, 915], "iter": [64, 145, 146, 147, 158, 159, 173, 183, 184, 187, 193, 206, 215, 217, 218, 238, 309, 350, 404, 440, 494, 496, 497, 499, 510, 529, 532, 544, 572, 573, 574, 597, 604, 614, 618, 636, 706, 915], "rechunk": [64, 81, 86, 93, 94, 98, 102, 104, 106, 107, 108, 135, 238, 544, 644, 694, 801, 915], "concatmethod": 64, "vertic": [64, 135, 209, 213, 238, 443, 520, 851], "aggreg": [64, 93, 94, 102, 140, 146, 164, 165, 166, 169, 171, 175, 176, 177, 194, 195, 209, 212, 218, 219, 222, 224, 238, 245, 356, 382, 386, 404, 416, 417, 418, 419, 420, 421, 423, 424, 425, 487, 503, 504, 505, 512, 517, 520, 523, 527, 533, 544, 573, 583, 584, 585, 586, 589, 592, 605, 606, 612, 618, 619, 622, 624, 636, 819, 820, 821, 823, 826, 827, 828, 915], "concaten": [64, 140, 174, 238, 499, 544, 590, 636, 694, 801, 915], "sure": [64, 81, 86, 93, 94, 95, 98, 102, 178, 238, 493], "contigu": [64, 81, 86, 93, 94, 98, 102, 104, 106, 107, 108, 178, 238], "diagon": [64, 206, 238], "strategi": [64, 93, 113, 114, 115, 116, 137, 146, 160, 161, 170, 238, 250, 287, 355, 544, 568, 573, 578, 579, 636, 683, 760, 915], "vstack": [64, 135, 238], "find": [64, 139, 238, 428, 544, 831, 915], "miss": [64, 81, 93, 94, 104, 136, 238, 289, 347, 348, 349, 360, 364, 371, 373, 530, 544, 567, 636, 753, 754, 755, 905, 915], "stack": [64, 151, 213, 238], "length": [64, 65, 91, 114, 119, 146, 147, 192, 238, 282, 309, 336, 341, 395, 416, 417, 418, 419, 420, 421, 423, 424, 425, 438, 455, 457, 461, 463, 472, 493, 544, 573, 574, 591, 603, 636, 678, 683, 694, 706, 707, 715, 740, 745, 790, 806, 819, 820, 821, 822, 823, 824, 826, 827, 828, 846, 863, 865, 869, 871, 880, 915], "don": [64, 209, 238, 250, 269, 309, 492, 544, 665, 706, 832, 905, 915], "t": [64, 97, 104, 123, 174, 209, 238, 250, 269, 309, 346, 347, 348, 349, 456, 462, 468, 469, 492, 536, 544, 590, 636, 665, 706, 751, 753, 754, 755, 832, 864, 870, 876, 877, 905, 915], "match": [64, 75, 81, 83, 84, 85, 87, 111, 112, 137, 161, 183, 238, 393, 444, 445, 448, 451, 452, 453, 456, 459, 460, 462, 467, 468, 469, 497, 568, 579, 636, 785, 852, 853, 856, 859, 860, 861, 864, 867, 868, 870, 875, 876, 877, 915], "relev": 64, "execut": [64, 162, 238, 269, 556, 583, 591, 636, 665], "df_h1": 64, "l1": 64, "l2": 64, "df_h2": 64, "r1": 64, "r2": 64, "r3": 64, "df_d1": 64, "df_d2": 64, "bin": [65, 458, 538, 707, 866, 909, 915], "label": [65, 81, 416, 417, 418, 419, 420, 421, 423, 424, 425, 544, 591, 636, 707, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "break_point_label": [65, 707, 915], "break_point": [65, 707, 915], "category_label": [65, 707, 915], "discret": [65, 268, 310, 346, 544, 664, 707, 709, 751, 915], "deprec": [65, 88, 262, 352, 525, 530, 544, 636, 657, 757, 915], "sinc": [65, 88, 96, 105, 262, 319, 352, 514, 525, 530, 544, 657, 719, 757, 915], "assign": [65, 114, 146, 238, 410, 465, 466, 544, 573, 636, 707, 813, 873, 874, 915], "must": [65, 81, 82, 83, 96, 105, 134, 146, 147, 161, 168, 183, 238, 287, 386, 417, 418, 419, 420, 421, 423, 424, 425, 544, 565, 573, 574, 579, 583, 588, 636, 707, 915], "len": [65, 114, 115, 159, 238, 304, 414, 455, 461, 472, 544, 707, 817, 863, 869, 880, 915], "breakpoint": [65, 707, 915], "experiment": [65, 109, 187, 209, 210, 215, 238, 309, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 544, 597, 611, 614, 636, 706, 707, 740, 915], "being": [65, 93, 94, 104, 109, 209, 210, 238, 250, 309, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 509, 536, 544, 611, 636, 706, 707, 740, 915], "consid": [65, 93, 94, 104, 109, 131, 141, 167, 207, 209, 210, 238, 298, 299, 300, 309, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 503, 512, 544, 562, 575, 582, 587, 609, 611, 636, 696, 697, 698, 706, 707, 740, 832, 833, 834, 915], "break": [65, 109, 209, 210, 238, 250, 309, 336, 388, 417, 418, 419, 420, 421, 423, 424, 425, 544, 611, 636, 706, 707, 740, 915], "30": [65, 135, 146, 151, 174, 180, 181, 199, 215, 238, 257, 258, 259, 262, 310, 315, 318, 322, 334, 336, 341, 345, 361, 432, 544, 573, 590, 614, 636, 707, 709, 715, 718, 740, 745, 915], "inf": [65, 115, 116, 256, 367, 370, 544, 651, 707, 774, 778, 794, 808, 902, 915], "low": [66, 146, 238, 337, 493, 573, 636], "high": [66, 146, 238, 337, 493, 573, 636], "pli": [66, 164, 165, 169, 195, 238], "interv": [66, 146, 147, 211, 238, 336, 337, 341, 365, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 636, 717, 719, 720, 726, 728, 731, 733, 734, 737, 738, 740, 741, 743, 744, 745, 746, 747, 749, 770, 915], "1d": [66, 146, 147, 161, 211, 238, 314, 321, 328, 332, 336, 341, 344, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 714, 719, 721, 723, 724, 725, 730, 732, 736, 740, 743, 744, 745, 747, 748], "close": [66, 146, 147, 238, 365, 417, 418, 419, 420, 421, 423, 424, 425, 437, 544, 573, 574, 636, 770, 845, 915], "closedinterv": [66, 146, 147, 238, 365, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 636, 770, 915], "lower": [66, 104, 146, 177, 230, 238, 365, 385, 409, 412, 421, 493, 526, 544, 566, 573, 592, 630, 636, 770, 794, 812, 815, 824, 902, 915], "bound": [66, 93, 94, 133, 146, 238, 272, 286, 365, 385, 486, 493, 544, 573, 636, 668, 682, 752, 770, 794, 902, 915], "upper": [66, 93, 94, 133, 146, 238, 365, 486, 493, 544, 573, 636, 752, 770, 794, 902, 915], "period": [66, 146, 147, 189, 190, 238, 281, 336, 341, 347, 348, 349, 405, 430, 431, 544, 573, 574, 598, 599, 636, 677, 740, 745, 753, 754, 755, 808, 837, 838, 915], "It": [66, 123, 168, 174, 220, 238, 250, 287, 394, 544, 583, 588, 620, 636, 833, 834, 915], "like": [66, 82, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 154, 156, 160, 238, 269, 397, 410, 520, 523, 533, 544, 566, 593, 636, 665, 813, 915], "durat": [66, 161, 211, 238, 318, 321, 324, 326, 328, 331, 338, 344, 482, 544, 579, 636, 718, 721, 727, 729, 732, 735, 742, 748, 898, 915], "3d12h4m25": [66, 146, 147, 161, 211, 238, 336, 341, 573, 574, 579, 636, 740, 745], "hour": [66, 146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 507, 508, 544, 573, 574, 579, 636, 736, 740, 745], "minut": [66, 146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 507, 508, 544, 573, 574, 579, 636, 736, 740, 745], "tempor": [66, 146, 147, 158, 184, 200, 238, 365, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 636, 770, 785, 915], "window": [66, 146, 147, 238, 309, 336, 341, 347, 348, 349, 404, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 498, 544, 573, 574, 636, 706, 740, 745, 753, 754, 755, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 915], "granular": 66, "finer": 66, "than": [66, 80, 85, 87, 93, 94, 109, 115, 116, 123, 144, 145, 158, 161, 173, 183, 184, 185, 209, 220, 238, 377, 427, 437, 455, 461, 466, 472, 500, 520, 523, 530, 533, 544, 572, 579, 601, 602, 620, 636, 830, 845, 863, 869, 874, 880, 915], "also": [66, 84, 115, 116, 132, 145, 146, 147, 168, 171, 187, 193, 215, 238, 305, 308, 335, 364, 365, 410, 417, 418, 419, 420, 421, 423, 424, 425, 440, 503, 504, 512, 514, 527, 543, 544, 572, 573, 574, 588, 597, 604, 614, 615, 636, 739, 770, 813, 915], "permut": 66, "1mo": [66, 146, 147, 161, 211, 238, 316, 318, 332, 335, 336, 339, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 716, 718, 733, 736, 737, 738, 739, 740, 745, 746], "dtrang": 66, "1985": 66, "00": [66, 146, 161, 211, 238, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 469, 508, 573, 579, 636, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 877], "04": [66, 109, 146, 211, 238, 315, 316, 317, 318, 321, 327, 328, 329, 333, 335, 336, 337, 338, 339, 342, 343, 344, 469, 508, 573, 636, 716, 718, 721, 726, 728, 731, 732, 733, 734, 738, 739, 741, 742, 743, 746, 747, 748, 877], "05": [66, 109, 111, 112, 161, 211, 238, 315, 316, 318, 335, 337, 339, 579, 636, 715, 716, 717, 718, 739, 740, 745, 747], "07": [66, 315, 317, 333, 335, 336, 341, 343, 469, 514, 715, 717, 747, 877], "08": [66, 111, 112, 147, 238, 315, 336, 469, 508, 574, 636, 740, 745, 877], "zone": [66, 316, 335, 716, 739], "america": [66, 739], "new_york": [66, 739], "\u03bc": [66, 146, 147, 161, 211, 238, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 469, 514, 573, 574, 579, 636, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 877], "est": [66, 739], "encount": [67, 146, 238, 401, 402, 452, 453, 500, 503, 512, 530, 544, 573, 636, 804, 805, 860, 861, 915], "error": [67, 93, 94, 104, 183, 238, 274, 286, 291, 295, 377, 444, 446, 452, 453, 469, 544, 620, 670, 682, 686, 690, 852, 854, 860, 861, 877, 915], "duplic": [70, 154, 160, 161, 207, 238, 366, 544, 578, 579, 609, 636, 772, 915], "certain": [71, 96, 105, 152, 211, 238, 497, 559, 591, 601, 602, 636, 915], "structur": [72, 76, 78, 135, 174, 238, 544, 590, 636, 644, 915], "least": [73, 115, 405, 487, 544, 808, 903, 915], "expect": [73, 75, 80, 250, 492, 544, 581, 583, 636], "unexpect": [74, 238], "caus": [74, 82, 93, 94, 104, 122, 135, 238, 644, 915], "panic": 74, "combin": [76, 78, 146, 147, 148, 161, 211, 238, 260, 341, 456, 462, 468, 544, 573, 574, 579, 600, 636, 745, 864, 870, 876], "mismatch": 76, "incompat": 78, "pa": [81, 105, 109], "chunkedarrai": [81, 170, 238, 710, 915], "schema_overrid": [81, 83, 84, 85, 86, 87, 159, 238, 636], "schemadict": [81, 83, 84, 85, 86, 87, 104, 186, 238, 532, 583, 596, 620, 636], "zero": [81, 82, 92, 93, 94, 98, 102, 122, 124, 137, 158, 183, 198, 203, 238, 354, 355, 428, 437, 472, 544, 557, 568, 636, 683, 695, 760, 845, 880, 892, 896, 897, 915], "copi": [81, 82, 122, 124, 125, 159, 198, 203, 215, 238, 353, 472, 544, 557, 558, 614, 636, 641, 695, 699, 712, 758, 880, 892, 896, 897, 915], "most": [81, 395, 399, 405, 466, 487, 544, 800, 808, 874, 903, 915], "closest": 81, "dimens": [81, 83, 85, 87, 238, 414, 544, 636, 817, 915], "column_1": [81, 123, 206, 238], "pair": [81, 83, 84, 85, 87, 179, 238, 594, 636], "declar": [81, 83, 84, 85, 87, 238, 636], "sever": [81, 83, 84, 85, 87, 238, 636], "wai": [81, 83, 84, 85, 87, 129, 145, 159, 174, 193, 218, 238, 404, 440, 497, 544, 561, 572, 590, 604, 618, 636], "As": [81, 83, 84, 85, 87, 97, 238, 528, 636], "auto": [81, 83, 84, 85, 87, 102, 108, 206, 238, 636], "automat": [81, 83, 84, 85, 87, 93, 94, 95, 104, 115, 116, 187, 215, 238, 456, 462, 468, 469, 597, 614, 636, 864, 870, 876, 877, 915], "equival": [81, 83, 84, 85, 87, 96, 157, 171, 238, 457, 636, 788, 865, 878, 879, 915], "form": [81, 83, 84, 85, 87, 158, 184, 209, 238, 405, 544, 636, 808, 915], "suppli": [81, 83, 84, 85, 87, 183, 238, 636], "here": [81, 83, 84, 85, 87, 95, 96, 105, 114, 115, 116, 238, 453, 636, 861], "them": [81, 83, 84, 85, 87, 135, 146, 147, 161, 168, 211, 238, 274, 365, 401, 402, 498, 544, 573, 574, 579, 588, 636, 644, 670, 804, 805, 915], "param": [81, 83, 84, 85, 87, 93, 94, 104, 115, 116, 183, 238, 636], "overridden": [81, 83, 85, 87, 238, 636], "construct": [81, 83, 84, 85, 86, 87, 238, 388, 544, 571, 593, 636, 915], "allow_copi": [82, 122], "interchang": [82, 122], "protocol": [82, 95, 122], "__dataframe__": 82, "convers": [82, 122, 159, 203, 238, 469, 553, 877, 895, 896, 897, 915], "detail": [82, 95, 111, 112, 122, 238, 636, 922], "latest": [82, 96, 105, 122, 360, 395, 544], "index": [82, 86, 89, 95, 110, 122, 139, 146, 147, 152, 161, 175, 181, 183, 192, 204, 211, 216, 238, 245, 257, 258, 259, 261, 262, 263, 264, 272, 282, 286, 332, 417, 418, 419, 420, 421, 423, 424, 425, 428, 438, 450, 463, 478, 544, 573, 574, 579, 603, 616, 636, 652, 653, 654, 655, 656, 657, 659, 660, 668, 678, 682, 736, 806, 831, 834, 846, 858, 871, 887, 915], "html": [82, 95, 122, 127, 238], "throw": [82, 295, 452, 453, 544, 690, 860, 861, 915], "runtimeerror": 82, "from_panda": [82, 97], "from_arrow": 82, "effici": [82, 159, 238], "schemadefinit": [83, 84, 85, 87, 238, 636], "clone": [83, 84, 85, 86, 87, 124, 202, 203, 238, 557, 636, 695, 895, 896, 897, 905, 915], "two": [83, 85, 87, 95, 140, 167, 168, 175, 205, 219, 220, 238, 245, 311, 315, 439, 478, 490, 500, 502, 525, 530, 544, 587, 588, 619, 620, 636, 710, 715, 915], "dimension": [83, 85, 87, 238, 636, 915], "infer_schema_length": [84, 87, 93, 94, 97, 104, 107, 238, 636], "mani": [84, 87, 95, 135, 238, 644, 915], "scan": [84, 87, 93, 94, 102, 104, 105, 106, 107, 108, 109, 566, 575, 582, 636], "slow": [84, 87, 93, 94, 104, 250, 309, 544, 706, 915], "NOT": [84, 111, 112], "actual": [84, 97, 115, 116, 238, 840, 915], "thei": [84, 111, 120, 162, 238, 416, 544, 819, 915], "appear": [84, 111, 238, 485, 544, 901, 915], "typic": 84, "clearer": 84, "after": [84, 92, 93, 94, 98, 102, 104, 106, 107, 108, 135, 208, 237, 238, 350, 388, 410, 472, 544, 610, 636, 644, 739, 795, 813, 880, 915], "load": [84, 86, 96, 105, 238, 553, 575, 582, 636], "want": [84, 123, 135, 171, 238, 298, 299, 300, 356, 386, 388, 417, 418, 419, 420, 421, 423, 424, 425, 503, 512, 544, 559, 575, 582, 636, 644, 696, 697, 698, 896, 915], "some": [84, 93, 94, 104, 131, 238, 562, 636, 777, 915], "_partial_": [84, 238, 636], "omit": [84, 114, 115, 116, 171, 238], "similarli": [84, 238], "ad": [84, 122, 146, 206, 215, 238, 249, 353, 503, 504, 544, 573, 614, 636, 758, 915], "partial": 84, "present": [84, 111, 115, 369, 544, 905, 915], "np": [85, 138, 238, 478, 544, 636, 774, 778, 779, 780, 819, 915], "ndarrai": [85, 138, 202, 238, 478, 544, 636, 710, 831, 834, 887, 896, 915], "numpi": [85, 110, 127, 202, 203, 238, 401, 402, 544, 636, 774, 778, 779, 780, 804, 805, 819, 831, 887, 896, 897, 905, 915], "columnar": [85, 87, 158, 184, 238], "interpret": [85, 87, 93, 94, 104, 238, 636], "yield": [85, 87, 93, 94, 104, 133, 135, 206, 238, 636, 644, 752, 915], "conclus": [85, 87, 238, 636], "pd": [86, 97, 482, 544, 898, 915], "nan_to_nul": [86, 238, 636, 915], "include_index": 86, "datetimeindex": [86, 710, 915], "panda": [86, 97, 110, 203, 238, 482, 544, 636, 897, 898, 915], "instal": [86, 93, 94, 95, 98, 102, 105, 110, 127, 202, 203, 238, 600, 636, 897, 915], "nan": [86, 111, 112, 115, 122, 136, 203, 238, 312, 313, 354, 364, 371, 373, 374, 375, 389, 398, 401, 402, 500, 530, 544, 567, 636, 647, 651, 711, 759, 779, 780, 804, 805, 819, 897, 915], "convert": [86, 88, 96, 97, 105, 122, 199, 200, 201, 202, 205, 238, 287, 316, 458, 469, 636, 683, 716, 866, 877, 884, 895, 896, 897, 905, 915], "pd_df": 86, "pd_seri": 86, "dummi": [88, 201, 238, 893, 915], "to_dummi": [88, 238, 915], "foo_1": [88, 201, 238], "foo_2": [88, 201, 238], "bar_3": [88, 201, 238], "bar_4": [88, 201, 238], "ham_a": [88, 201, 238], "ham_b": [88, 201, 238], "get": [89, 99, 103, 117, 126, 132, 142, 143, 146, 147, 149, 150, 154, 156, 163, 170, 183, 186, 188, 192, 196, 214, 223, 232, 238, 245, 257, 258, 259, 261, 262, 271, 275, 276, 288, 304, 305, 306, 307, 308, 319, 357, 362, 366, 368, 376, 379, 381, 389, 390, 391, 394, 396, 398, 401, 402, 409, 438, 442, 454, 457, 476, 477, 484, 488, 511, 516, 520, 521, 522, 523, 531, 534, 535, 544, 560, 563, 570, 573, 574, 575, 580, 582, 596, 603, 607, 613, 623, 632, 636, 652, 653, 654, 655, 656, 657, 667, 671, 672, 684, 694, 702, 703, 704, 705, 719, 764, 767, 770, 772, 775, 786, 791, 796, 798, 799, 801, 804, 805, 809, 810, 812, 846, 849, 862, 865, 886, 892, 893, 900, 904, 905, 915], "uint32": [89, 110, 133, 238, 259, 262, 263, 264, 276, 317, 320, 323, 325, 327, 329, 330, 333, 334, 337, 342, 343, 413, 445, 454, 457, 478, 482, 544, 655, 659, 660, 672, 690, 717, 720, 726, 728, 731, 733, 734, 737, 738, 741, 746, 747, 752, 832, 853, 898, 915], "regular": [89, 158, 183, 184, 211, 238, 350, 497, 510, 520, 523, 533, 544], "uint64": [89, 148, 238, 263, 264, 361, 412, 544, 659, 660, 766, 815, 915], "bigidx": 89, "read": [90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 135, 238, 386, 544, 566, 571, 593, 636, 644, 915], "over": [90, 93, 94, 96, 104, 115, 123, 135, 158, 159, 183, 184, 206, 217, 220, 238, 250, 309, 355, 364, 386, 387, 416, 417, 418, 419, 420, 421, 423, 424, 425, 492, 503, 504, 512, 519, 527, 544, 620, 644, 645, 706, 819, 820, 821, 823, 827, 915], "avail": [90, 96, 105, 114, 237, 238, 410, 537, 538, 540, 543, 544, 545, 548, 549, 550, 553, 554, 566, 635, 636, 813, 907, 909, 911, 915, 918, 919, 920], "fetch": [90, 104, 162, 238, 557, 559, 575, 582, 636], "ideal": 90, "read_csv_batch": [90, 554], "tpch": [90, 94], "tables_scale_100": [90, 94], "lineitem": [90, 94, 95], "tbl": [90, 94], "try_parse_d": [90, 93, 94, 104], "polarsdatatyp": [91, 93, 94, 99, 103, 113, 115, 116, 119, 123, 132, 238, 250, 295, 350, 386, 452, 492, 493, 497, 510, 518, 519, 544, 563, 636, 645, 690, 860, 915], "In": [91, 96, 105, 108, 115, 116, 119, 123, 133, 135, 146, 147, 171, 238, 250, 394, 544, 573, 574, 636, 644, 752, 814, 915], "probabl": [91, 119, 346, 544, 751, 915], "n_row": [92, 93, 94, 98, 102, 104, 106, 107, 108, 159, 238, 566, 636], "accept": [92, 93, 94, 96, 98, 102, 134, 145, 187, 193, 215, 218, 238, 350, 404, 440, 494, 496, 497, 499, 510, 532, 544, 565, 572, 597, 604, 614, 618, 636], "start": [92, 93, 94, 98, 102, 104, 106, 107, 108, 145, 146, 162, 192, 211, 216, 238, 282, 294, 317, 319, 320, 322, 327, 329, 333, 334, 336, 337, 340, 341, 342, 343, 345, 350, 365, 438, 444, 448, 463, 467, 497, 503, 510, 512, 536, 544, 572, 573, 591, 603, 616, 636, 678, 689, 714, 716, 717, 719, 720, 726, 728, 731, 733, 734, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 770, 846, 856, 871, 875, 915], "stop": [92, 93, 94, 98, 102, 104, 106, 107, 108, 317, 319, 320, 322, 327, 329, 333, 334, 336, 337, 340, 341, 342, 343, 345, 714, 716, 717, 719, 720, 726, 728, 731, 733, 734, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749], "textio": 93, "new_column": [93, 94, 97], "comment_char": [93, 94, 104], "quote_char": [93, 94, 104], "skip_row": [93, 94, 104], "missing_utf8_is_empty_str": [93, 94, 104], "ignore_error": [93, 94, 104], "n_thread": [93, 94], "8192": 93, "csvencod": [93, 94, 104], "low_memori": [93, 94, 102, 104, 107, 108], "storage_opt": [93, 96, 98, 102, 105, 106, 108], "skip_rows_after_head": [93, 94, 104], "row_count_nam": [93, 94, 98, 102, 104, 106, 107, 108], "row_count_offset": [93, 94, 98, 102, 104, 106, 107, 108], "sample_s": [93, 94], "eol_char": [93, 94, 104], "By": [93, 94, 97, 104, 161, 238, 458, 518, 579, 636, 849, 866, 896, 904, 915], "we": [93, 94, 97, 104, 161, 238, 269, 458, 518, 536, 579, 583, 636, 645, 665, 866, 915], "handler": [93, 94, 97], "g": [93, 94, 96, 97, 98, 102, 105, 106, 108, 209, 238, 250, 350, 432, 510, 544, 594, 636, 832, 896, 915], "via": [93, 94, 97, 104, 106, 107, 108, 158, 184, 238, 250, 544], "builtin": [93, 94, 97], "open": [93, 94, 97, 98, 102, 106, 108, 238], "stringio": [93, 94], "fsspec": [93, 94, 98, 102, 105, 106, 108, 110], "remot": [93, 94, 98, 102], "first": [93, 94, 97, 104, 107, 123, 144, 146, 149, 161, 163, 170, 174, 175, 196, 206, 207, 211, 223, 238, 259, 261, 262, 269, 272, 273, 309, 332, 336, 362, 368, 381, 388, 428, 450, 452, 453, 459, 460, 496, 503, 512, 516, 544, 559, 573, 575, 579, 582, 590, 609, 615, 623, 636, 654, 657, 665, 668, 669, 683, 706, 708, 736, 740, 767, 775, 791, 831, 858, 860, 861, 867, 868, 915], "dataset": [93, 94, 104, 109, 378, 544, 553, 583, 636, 789, 915], "autogener": [93, 94, 104], "column_x": [93, 94, 104], "enumer": [93, 94, 104, 159, 238], "everi": [93, 94, 104, 146, 197, 200, 211, 238, 263, 264, 268, 270, 272, 273, 282, 285, 304, 305, 306, 307, 308, 309, 336, 341, 352, 449, 479, 503, 504, 544, 566, 573, 608, 636, 659, 660, 664, 666, 668, 669, 678, 681, 702, 703, 704, 705, 706, 740, 745, 757, 857, 888, 915], "shorter": [93, 94], "remain": [93, 94, 104, 133, 238, 250, 465, 466, 544, 583, 636, 752, 873, 874, 915], "comment": [93, 94, 104], "instanc": [93, 94, 104, 115, 116, 135, 140, 238, 287, 295, 395, 417, 418, 419, 420, 421, 423, 424, 425, 503, 512, 544, 583, 616, 636, 644, 690, 915], "special": [93, 94, 104, 645, 915], "handl": [93, 94, 104, 109, 268, 310, 472, 544, 664, 709, 880, 915], "escap": [93, 94, 104], "dure": [93, 94, 104, 120, 135, 238, 644, 915], "provid": [93, 94, 95, 96, 104, 105, 115, 116, 238, 287, 291, 292, 446, 447, 450, 452, 453, 514, 553, 601, 602, 636, 686, 687, 854, 855, 858, 860, 861, 922], "equal": [93, 94, 104, 111, 112, 118, 141, 146, 161, 168, 238, 416, 417, 418, 419, 420, 421, 423, 424, 425, 454, 455, 461, 472, 493, 544, 573, 579, 588, 636, 819, 820, 821, 822, 823, 824, 826, 827, 828, 832, 862, 863, 869, 880, 915], "would": [93, 94, 104, 259, 262, 272, 394, 410, 494, 544, 583, 636, 654, 657, 668, 813, 896, 915], "prefer": [93, 94, 96, 104, 123, 135, 158, 183, 184, 220, 238, 250, 416, 544, 620, 636, 644, 819, 915], "treat": [93, 94, 104, 444, 459, 460, 852, 867, 868], "befor": [93, 104, 120, 135, 146, 161, 208, 238, 307, 308, 309, 388, 405, 416, 417, 418, 419, 420, 421, 423, 424, 425, 472, 476, 544, 573, 576, 579, 610, 636, 644, 704, 705, 706, 795, 808, 819, 820, 821, 822, 823, 824, 826, 827, 828, 880, 885, 915], "increas": [93, 102, 238, 309, 544, 706, 915], "10000": [93, 159, 238, 472], "check": [93, 94, 104, 111, 112, 141, 155, 157, 238, 247, 248, 266, 290, 293, 294, 365, 369, 444, 448, 467, 544, 583, 636, 642, 643, 662, 685, 688, 689, 771, 773, 776, 777, 783, 784, 785, 787, 788, 832, 852, 856, 875, 915], "might": [93, 94, 104, 250, 394, 485, 544, 897, 915], "issu": [93, 94, 97, 104, 307, 308, 476, 544, 704, 705, 885, 915], "alwai": [93, 123, 220, 238, 394, 583, 620, 636], "physic": [93, 94, 161, 238, 296, 482, 544, 556, 578, 579, 636, 692, 898, 915], "cpu": [93, 94], "your": [93, 94, 111, 112, 158, 187, 215, 218, 238, 250, 544, 559, 575, 582, 583, 597, 614, 618, 636], "system": [93, 94], "wrongli": 93, "done": [93, 94, 104, 109, 144, 161, 238, 249, 295, 455, 461, 544, 579, 636, 690, 863, 869, 915], "buffer": [93, 94, 133, 158, 238, 752, 915], "onc": [93, 94, 97, 122, 185, 218, 238, 427, 544, 556, 618, 636, 830, 915], "modifi": [93, 94, 104, 120, 151, 158, 213, 238, 260, 335, 344, 544, 739, 748, 816, 878, 879, 915], "multi": [93, 94, 350, 544], "lossi": [93, 94, 104], "decod": [93, 94], "im": [93, 94], "usag": [93, 94, 104, 115, 116, 191, 238, 840, 915], "expens": [93, 94, 102, 104, 107, 108, 158, 183, 184, 206, 207, 238, 250, 544, 609, 636, 644, 915], "nativ": [93, 98, 102, 123, 158, 184, 200, 220, 238, 250, 544, 620], "parser": 93, "even": 93, "possibl": [93, 123, 158, 184, 220, 238, 250, 385, 394, 466, 486, 544, 620, 874, 915], "differ": [93, 109, 111, 135, 146, 147, 158, 184, 200, 206, 238, 268, 310, 317, 332, 333, 335, 342, 388, 401, 402, 469, 485, 511, 514, 520, 523, 544, 564, 573, 574, 636, 644, 664, 709, 717, 736, 737, 739, 746, 804, 805, 832, 877, 915], "regard": [93, 500, 530], "sens": [93, 98, 102, 106, 108, 146, 147, 168, 211, 238, 573, 574, 588, 636], "particular": [93, 98, 102, 106, 108, 133, 238, 752, 915], "storag": [93, 96, 98, 102, 105, 106, 108], "skip": [93, 94, 97, 102, 104, 108, 209, 238, 645, 915], "count": [93, 94, 98, 102, 104, 106, 107, 108, 128, 146, 147, 161, 171, 172, 175, 206, 210, 211, 216, 220, 229, 238, 267, 304, 332, 380, 400, 403, 417, 418, 419, 420, 421, 423, 424, 425, 445, 485, 487, 524, 544, 573, 574, 579, 611, 616, 620, 629, 636, 663, 708, 736, 802, 807, 853, 901, 903, 915], "offset": [93, 94, 98, 102, 104, 106, 107, 108, 146, 147, 192, 211, 216, 238, 282, 332, 336, 341, 438, 463, 469, 544, 573, 574, 603, 616, 636, 678, 736, 740, 745, 846, 871, 877, 915], "row_count": [93, 94, 98, 102, 104, 106, 107, 108], "sampl": [93, 94, 220, 238, 437, 544, 620, 845, 915], "estim": [93, 94, 133, 238, 348, 349, 378, 544, 752, 754, 755, 789, 915], "alloc": [93, 94, 133, 178, 238, 752, 915], "need": [93, 94, 97, 111, 112, 146, 147, 191, 202, 238, 287, 388, 432, 454, 544, 573, 574, 636, 839, 862, 915], "end": [93, 94, 102, 104, 146, 238, 282, 293, 336, 350, 365, 444, 448, 463, 467, 497, 510, 544, 573, 575, 582, 591, 636, 678, 688, 740, 770, 856, 871, 875, 915], "scan_csv": [93, 94, 601, 602, 636], "lazili": [93, 94, 104, 105, 106, 107, 108, 388, 544], "glob": [93, 94, 104, 106, 107, 108], "pattern": [93, 94, 104, 106, 107, 108, 158, 238, 393, 444, 445, 450, 451, 459, 460, 833, 834, 852, 853, 858, 859, 867, 868, 915], "store": [93, 102, 135, 158, 184, 238, 644, 915], "continu": [93, 102, 437, 544, 845, 915], "benchmark": [93, 102], "50000": 94, "batchedcsvread": [94, 553], "batch": [94, 107, 583, 636], "upon": 94, "creation": 94, "gather": 94, "work": [94, 97, 147, 180, 238, 250, 269, 297, 298, 299, 300, 350, 359, 404, 457, 484, 544, 574, 636, 665, 693, 696, 697, 698, 763, 865, 900, 915], "next_batch": 94, "call": [94, 115, 116, 145, 162, 237, 238, 250, 305, 308, 544, 554, 572, 635, 636, 645, 915], "big": 94, "interest": 94, "seen_group": 94, "big_fil": 94, "while": [94, 96, 97, 105, 115, 116, 158, 167, 206, 238, 587, 636], "df_current_batch": 94, "concat": [94, 498, 694, 801, 915], "partition_df": 94, "partition_bi": [94, 159, 238], "as_dict": [94, 173, 238], "fh": 94, "write_csv": [94, 104, 238], "els": 94, "partition_on": 95, "partition_rang": 95, "partition_num": 95, "dbreadengin": 95, "connectorx": [95, 110], "raw": 95, "partit": [95, 96, 102, 105, 109, 159, 173, 238], "backend": [95, 96, 105], "transfer": 95, "direct": [95, 102, 108, 209, 238], "see": [95, 96, 97, 105, 111, 112, 115, 116, 127, 160, 174, 238, 298, 299, 300, 339, 355, 364, 378, 386, 437, 527, 544, 696, 697, 698, 743, 789, 845, 915, 922], "document": [95, 97, 453, 469, 861, 877], "redshift": 95, "mysql": 95, "mariadb": 95, "clickhous": 95, "oracl": 95, "bigqueri": 95, "For": [95, 96, 97, 105, 135, 147, 160, 161, 220, 238, 287, 295, 347, 348, 349, 395, 412, 437, 503, 512, 513, 544, 574, 579, 620, 636, 644, 753, 754, 755, 815, 845, 896, 915], "pleas": [95, 105], "doc": [95, 127, 238], "github": 95, "com": [95, 347, 348, 349, 450, 544, 753, 754, 755, 858, 915], "sfu": 95, "db": 95, "connector": 95, "destin": 95, "just": [95, 104, 167, 238, 587, 636], "sqlite": 95, "develop": [95, 115, 116], "flight_sql": 95, "further": [95, 897, 915], "wide": [95, 144, 167, 209, 238, 587, 636], "adopt": 95, "significantli": 95, "better": [95, 123, 220, 238, 250, 487, 544, 620, 833, 834, 915], "driver": 95, "cpp": 95, "partition_col": 95, "explicitli": [95, 114, 115, 532], "table_uri": [96, 105], "delta_table_opt": [96, 105], "lake": [96, 105, 553], "root": [96, 105, 377, 387, 396, 407, 441, 475, 543, 544, 848, 915], "filesystem": [96, 105], "absolut": [96, 105, 111, 112, 183, 238, 244, 347, 348, 349, 544, 640, 753, 754, 755, 915], "rel": [96, 105, 111, 112, 332, 347, 348, 349, 544, 736, 753, 754, 755, 915], "But": [96, 105], "gc": [96, 105], "azur": [96, 105], "thu": [96, 104, 105, 135, 238, 500, 530, 644, 915], "deltalak": [96, 105], "cloud": [96, 105, 109], "configur": [96, 105], "authent": [96, 105], "keyword": [96, 102, 105, 127, 174, 183, 187, 215, 218, 238, 529, 532, 544, 590, 597, 614, 618, 636, 915], "table_path": [96, 105], "avoid": 96, "year": [96, 105, 146, 147, 161, 211, 238, 322, 332, 333, 336, 341, 342, 417, 418, 419, 420, 421, 423, 424, 425, 506, 507, 544, 573, 574, 579, 636, 722, 736, 737, 740, 745, 746], "2021": [96, 105, 128, 144, 146, 211, 238, 469, 518, 573, 636, 722, 785, 877, 915], "aw": [96, 105], "bucket": [96, 105, 336, 341, 740, 745], "aws_access_key_id": [96, 105], "the_aws_access_key_id": [96, 105], "aws_secret_access_kei": [96, 105], "the_aws_secret_access_kei": [96, 105], "googl": [96, 105], "service_account": [96, 105], "service_account_json_absolute_path": [96, 105], "az": [96, 105], "adl": [96, 105], "abf": [96, 105], "azure_storage_account_nam": [96, 105], "azure_storage_account_kei": [96, 105], "without_fil": [96, 105], "track": [96, 105, 123, 238], "sheet_id": 97, "sheet_nam": 97, "xlsx2csv_option": 97, "read_csv_opt": 97, "excel": [97, 238, 553], "xlsx": [97, 238], "sheet": [97, 238], "xlsx2csv": [97, 110], "read_csv": [97, 104], "skip_empty_lin": 97, "my": [97, 105, 109], "datasheet": 97, "excel_fil": 97, "correct": [97, 348, 349, 378, 422, 437, 544, 583, 636, 754, 755, 789, 825, 845, 915], "look": [97, 287, 290, 685], "fix": [97, 114, 115, 344, 417, 418, 419, 420, 421, 423, 424, 425, 544, 748], "whole": [97, 439, 440, 450, 544, 636, 858], "twice": [97, 238], "With": 97, "1000": [97, 133, 238, 323, 324, 472, 727], "spreadsheet": [97, 175, 238], "xl": 97, "xlsm": 97, "xlsb": 97, "odf": 97, "od": [97, 468, 876], "odt": 97, "memory_map": [98, 102, 106], "v2": [98, 106], "valid": [98, 102, 116, 120, 133, 238, 309, 444, 445, 450, 451, 453, 544, 706, 752, 765, 852, 853, 858, 859, 861, 867, 868, 915], "greatli": [98, 106], "repeat": [98, 106, 411, 413, 544], "o": [98, 106, 309, 449, 483, 544, 706, 857, 899, 915], "page": [98, 102, 106, 108, 238, 544, 553, 602, 636, 915], "give": [98, 102, 106, 107, 108, 167, 238, 319, 378, 413, 544, 553, 587, 636, 719, 789, 915], "That": [98, 583, 636], "filenam": 98, "my_fil": 98, "write_ipc": [98, 238], "read_ndjson": 100, "parallelstrategi": [102, 108], "use_statist": [102, 108], "directori": [102, 238], "awar": [102, 158, 184, 200, 238, 469, 877], "stabl": [102, 127, 185, 238], "row_group": [102, 108], "read_tabl": 102, "with_column_nam": 104, "push": [104, 106, 107, 108, 109], "down": [104, 106, 107, 108, 109, 359, 544, 763, 915], "therebi": [104, 106, 107, 108], "potenti": [104, 106, 107, 108], "overhead": [104, 106, 107, 108], "updat": [104, 238, 636], "realloc": [104, 106, 107, 135, 238, 644, 915], "my_long_fil": 104, "doesn": [104, 346, 544, 751, 905, 915], "thing": [104, 490, 511], "less": [104, 161, 238, 455, 461, 466, 472, 579, 636, 863, 869, 874, 880], "limit": [104, 137, 238, 289, 298, 299, 300, 355, 360, 544, 568, 575, 602, 636, 696, 697, 698, 760, 915], "breezah": 104, "languag": [104, 146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736, 740, 745], "terribl": 104, "mydf": 104, "lambda": [104, 123, 140, 174, 220, 238, 250, 287, 347, 348, 349, 386, 387, 416, 492, 503, 504, 505, 512, 519, 527, 533, 544, 583, 590, 620, 636, 645, 683, 753, 754, 755, 915], "raw_filesystem": 105, "adjust": [105, 347, 348, 349, 437, 544, 753, 754, 755, 845, 915], "subtreefilesystem": 105, "reli": 105, "mention": 105, "ensur": [105, 115, 116, 118, 145, 173, 183, 238, 365, 487, 544, 572, 583, 636, 896, 903, 915], "gcsf": 105, "pyfilesystem": 105, "fsspechandl": 105, "gcsfilesystem": 105, "id": [105, 220, 238, 459, 460, 485, 487, 544, 620, 901, 915], "token": 105, "pa_f": 105, "adlf": 105, "azureblobfilesystem": 105, "account_nam": 105, "account_kei": 105, "allow_pyarrow_filt": 109, "lead": [109, 238, 429, 456, 468, 472, 478, 487, 500, 520, 523, 530, 544, 583, 620, 636, 835, 864, 876, 880, 915], "comparison": 109, "dset": 109, "folder": 109, "1970": 109, "out": [110, 147, 238, 272, 286, 291, 367, 370, 444, 446, 544, 574, 601, 602, 636, 668, 682, 686, 852, 854], "stdout": [110, 144, 238], "14": [110, 123, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 322, 364, 544, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 740], "platform": 110, "linux": 110, "microsoft": 110, "standard": [110, 194, 238, 322, 348, 423, 437, 442, 453, 531, 544, 605, 636, 722, 754, 845, 849, 861, 915], "wsl2": 110, "x86_64": 110, "glibc2": 110, "main": 110, "jul": [110, 469, 877], "56": [110, 480, 544], "gcc": 110, "20210110": 110, "23": [110, 146, 147, 238, 315, 320, 336, 507, 573, 574, 636, 715, 720], "check_dtyp": [111, 112], "check_exact": [111, 112], "rtol": [111, 112], "1e": [111, 112], "atol": [111, 112], "nans_compare_equ": [111, 112], "check_column_ord": 111, "check_row_ord": 111, "assertionerror": [111, 112], "compar": [111, 112, 141, 238, 491, 832, 915], "exactli": [111, 112, 115, 116, 465, 466, 840, 873, 874, 915], "toler": [111, 112, 161, 238, 579, 636], "inexact": [111, 112], "assert": [111, 112, 114, 115, 116, 147, 238, 553, 574, 636, 765, 915], "irrespect": 111, "unsort": 111, "check_nam": 112, "s1": [112, 140, 238, 897, 906, 915], "searchstrategi": [113, 115, 116], "null_prob": [113, 115, 116], "percentag": [113, 115, 116, 405, 544, 808, 915], "chanc": [113, 115, 116], "flag": [113, 429, 544, 564, 583, 636, 835, 915], "hypothesi": [113, 114, 115, 116, 922], "sampled_from": 113, "unique_small_int": 113, "ccy": 113, "gbp": 113, "eur": [113, 128, 144, 238], "jpy": 113, "oneormoredatatyp": [114, 238, 785, 915], "min_col": [114, 115], "max_col": [114, 115], "suitabl": [114, 428, 544, 831, 915], "standalon": [114, 115], "itself": [114, 581, 636], "explicit": [114, 493, 527], "random": [114, 115, 116, 148, 185, 238, 361, 410, 427, 433, 544, 766, 813, 830, 841, 915], "mincol": 114, "exact": [114, 115, 116, 191, 238, 469, 877], "especi": 114, "punctuat": 114, "test_special_char_colname_init": 114, "z": [114, 115, 133, 154, 156, 160, 167, 238, 265, 296, 361, 413, 469, 544, 578, 587, 603, 636, 692, 760, 877, 915], "test_unique_xyz": 114, "assert_someth": 114, "min_siz": [115, 116], "max_siz": [115, 116], "include_col": 115, "allow_infin": [115, 116], "allowed_dtyp": [115, 116], "excluded_dtyp": [115, 116], "describ": [115, 144, 238, 915], "desir": 115, "ignor": [115, 116, 165, 195, 238, 268, 310, 335, 347, 348, 349, 401, 402, 544, 664, 709, 739, 753, 754, 755, 804, 805, 915], "n_chunk": [115, 116, 238, 915], "randomis": 115, "individu": [115, 147, 238, 250, 451, 544, 574, 602, 636, 694, 859, 915], "onto": 115, "independ": [115, 116], "either": [115, 147, 162, 165, 173, 183, 195, 238, 574, 581, 636], "basi": [115, 238], "pct": 115, "take": [115, 140, 168, 174, 197, 238, 332, 479, 509, 511, 544, 588, 608, 636, 736, 888, 906, 915], "preced": 115, "disallow": [115, 116], "exclud": [115, 116, 305, 308, 365, 497, 530, 544, 770, 785, 915], "deploi": [115, 116], "characterist": [115, 116], "directli": [115, 116, 347, 348, 349, 544, 636, 753, 754, 755, 915], "concret": [115, 116], "test_repr": [115, 116], "isinst": [115, 116, 238], "repr": [115, 116], "known": [115, 620], "colnam": [115, 132, 238, 387, 544, 563, 636], "df_strategi": 115, "15836": 115, "1755e": 115, "38": 115, "575050513": 115, "constructor": 116, "max_data_s": 116, "distinct": [116, 173, 238, 288, 410, 506, 507, 508, 544, 684, 813, 915], "54666": 116, "35": [116, 238, 310, 544, 709, 915], "6414": 116, "63290": 116, "pool": 117, "toggl": [118, 469, 877], "scope": 120, "lifetim": 120, "initi": [120, 503, 512], "whatev": 120, "were": 120, "enter": 120, "set_verbos": 120, "do_various_th": 120, "restor": 120, "nan_as_nul": 122, "_pyarrowdatafram": 122, "effect": [122, 140, 238, 250, 544, 616, 636], "nullabl": 122, "extens": [122, 203, 238, 897, 915], "propag": [122, 165, 195, 238, 401, 402, 544, 804, 805, 915], "return_dtyp": [123, 238, 250, 386, 492, 519, 544, 645, 915], "inference_s": [123, 238], "256": [123, 238, 808, 915], "user": [123, 174, 220, 238, 250, 429, 492, 544, 590, 620, 636, 645, 835, 915], "udf": [123, 174, 220, 238, 250, 492, 544, 590, 620, 636, 645, 915], "logic": [123, 220, 238, 482, 544, 571, 578, 593, 617, 620, 636, 898, 915], "almost": [123, 220, 238, 620], "_significantly_": [123, 220, 238, 620], "intens": [123, 220, 238, 620], "becaus": [123, 133, 146, 162, 209, 220, 238, 269, 573, 620, 636, 645, 665, 752, 915], "forc": [123, 161, 220, 238, 578, 579, 620, 636], "materi": [123, 220, 238, 591, 620, 636], "parallelis": [123, 220, 238, 620], "optimis": [123, 220, 238, 620, 636, 833, 834, 915], "wherev": [123, 220, 238, 250, 544, 620], "strongli": [123, 183, 220, 238, 250, 544, 620], "achiev": [123, 220, 238, 250, 544, 620], "best": [123, 220, 238, 250, 544, 620], "tri": [123, 238], "arbitrarili": [123, 238], "rearrang": [123, 238], "preserv": [123, 203, 238, 434, 544, 842, 897, 915], "syntax": [123, 171, 238, 600, 636, 915], "15": [123, 146, 147, 152, 238, 309, 310, 336, 341, 352, 504, 544, 573, 574, 636, 706, 709, 740, 745, 757, 915], "scalar": [123, 157, 238, 428, 492, 544, 788, 831, 915], "ident": [124, 125, 238, 557, 558, 636, 695, 699, 915], "cheap": [124, 125, 238, 557, 558, 636, 644, 695, 699, 915], "deepcopi": [124, 125, 238, 557, 558, 636, 695, 699, 915], "13": [124, 125, 136, 137, 143, 147, 152, 162, 170, 215, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 416, 418, 498, 503, 512, 535, 544, 557, 558, 567, 568, 574, 581, 614, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 645, 740, 745, 746, 915], "clear": [125, 238, 558, 636, 699, 915], "properti": [126, 132, 150, 186, 188, 214, 238, 553, 560, 563, 596, 613, 636], "appl": [126, 151, 160, 179, 181, 199, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 407, 415, 448, 467, 475, 544, 578, 594, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 856, 875], "banana": [126, 199, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 407, 415, 475, 544, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "pearson": [127, 238, 378, 437, 500, 525, 544, 789, 845, 915], "correl": [127, 238, 500, 525, 530], "coeffici": [127, 238, 437, 544, 845, 915], "corrcoef": [127, 238], "summari": [128, 238, 708, 915], "glimps": [128, 149, 238], "usd": [128, 144, 238], "2020": [128, 144, 147, 238, 316, 318, 321, 323, 324, 326, 328, 331, 335, 338, 339, 469, 574, 636, 716, 718, 721, 727, 729, 732, 735, 739, 742, 877], "null_count": [128, 131, 238, 309, 544, 706, 708, 915], "266667": [128, 238], "666667": [128, 165, 212, 226, 238, 347, 544, 612, 626, 636], "std": [128, 238, 416, 544, 636, 708, 826, 915], "101514": [128, 238], "707107": [128, 238, 348, 544, 754, 915], "57735": [128, 238], "median": [128, 175, 238, 419, 544, 615, 636, 822, 915], "more_column": [129, 134, 208, 238, 350, 510, 544, 561, 565, 610, 636], "posit": [129, 134, 145, 173, 187, 193, 208, 215, 218, 238, 347, 348, 349, 350, 404, 440, 458, 496, 497, 510, 529, 544, 561, 565, 572, 597, 604, 610, 614, 618, 636, 753, 754, 755, 866, 915], "Or": [129, 145, 146, 147, 161, 193, 211, 218, 238, 404, 440, 497, 536, 544, 561, 572, 573, 574, 579, 604, 618, 636], "subset": [131, 171, 207, 238, 562, 609, 636], "snippet": [131, 238, 562, 636], "is_nul": [131, 238, 544, 562, 636, 915], "height": [131, 238], "sizeunit": [133, 238, 752, 915], "total": [133, 238, 752, 915], "heap": [133, 238, 752, 915], "its": [133, 238, 315, 336, 341, 715, 740, 745, 752, 915], "bitmap": [133, 238, 752, 915], "therefor": [133, 238, 287, 752, 915], "structarrai": [133, 238, 752, 915], "constant": [133, 147, 238, 353, 544, 574, 636, 752, 758, 915], "unchang": [133, 238, 250, 482, 544, 583, 620, 636, 752, 898, 915], "visibl": [133, 238, 752, 915], "capac": [133, 191, 238, 752, 840, 915], "ffi": [133, 238, 752, 915], "kb": [133, 238, 752, 915], "mb": [133, 238, 752, 915], "gb": [133, 238, 752, 915], "tb": [133, 238, 752, 915], "scale": [133, 238, 752, 915], "revers": [133, 238, 283, 304, 305, 306, 307, 308, 387, 407, 475, 544, 636, 702, 703, 704, 705, 915], "1_000_000": [133, 238, 752, 915], "25888898": [133, 238], "689577102661133": [133, 238], "long": [134, 167, 209, 238, 565, 587, 636], "well": [134, 175, 238, 365, 544, 565, 636, 770, 915], "letter": [134, 223, 232, 238, 350, 510, 544, 565, 623, 632, 636], "locat": [135, 181, 204, 208, 238, 428, 544, 610, 636, 644, 831, 834, 887, 915], "faster": [135, 209, 238, 250, 416, 457, 485, 544, 601, 602, 636, 644, 645, 819, 865, 915], "onlin": [135, 238, 644, 915], "rerun": [135, 238, 644, 915], "latter": [135, 238, 644, 915], "20": [135, 151, 152, 174, 176, 180, 181, 238, 257, 258, 259, 262, 310, 336, 341, 361, 364, 514, 518, 544, 590, 636, 709, 745, 915], "40": [135, 174, 238, 336, 341, 361, 544, 590, 636, 722, 745], "50": [135, 238, 298, 299, 300, 336, 341, 544, 696, 745, 915], "60": [135, 238, 337, 338, 469, 737, 741, 742, 877], "fill_valu": [136, 190, 209, 238, 354, 431, 544, 567, 599, 636, 759, 838, 915], "Not": [136, 238, 371, 373, 388, 544, 567, 636], "To": [136, 238, 312, 313, 355, 520, 523, 533, 544, 567, 636], "fillnullstrategi": [137, 238, 355, 544, 568, 636, 760, 915], "matches_supertyp": [137, 238, 568, 636], "forward": [137, 161, 238, 355, 360, 544, 568, 579, 636, 760, 915], "consecut": [137, 238, 289, 355, 360, 443, 544, 568, 636, 760, 851, 915], "supertyp": [137, 238, 249, 544, 568, 636], "fill_nan": [137, 238, 544, 636, 915], "OR": [138, 238, 491, 569, 636], "reduct": [140, 238], "supercast": [140, 238], "similar": [140, 161, 238, 404, 544, 579, 636], "parent": [140, 238], "rule": [140, 238, 339, 743], "arithmet": [140, 238], "zip_with": [140, 238, 915], "foo11": [140, 238], "bar22": [140, 238], "null_equ": [141, 238, 832, 915], "retriev": [142, 238, 263, 264, 473, 659, 660, 881], "return_as_str": [144, 238], "preview": [144, 238], "nice": [144, 238], "few": [144, 238], "rather": [144, 161, 238, 472, 579, 636, 880], "head": [144, 163, 196, 238, 249, 381, 544, 582, 636, 791, 915], "tail": [144, 149, 238, 249, 437, 544, 636, 845, 915], "intoexpr": [145, 146, 147, 187, 193, 215, 218, 238, 404, 440, 494, 496, 499, 503, 512, 529, 532, 544, 572, 573, 574, 597, 604, 618, 636], "more_bi": [145, 173, 193, 238, 440, 544, 572, 604, 636], "maintain_ord": [145, 173, 175, 207, 211, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 238, 245, 250, 478, 484, 501, 544, 559, 564, 566, 572, 591, 600, 601, 602, 609, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 900, 915], "consist": [145, 173, 238, 469, 572, 636, 877], "agg": [145, 146, 147, 238, 245, 250, 356, 358, 439, 440, 478, 489, 501, 544, 559, 564, 566, 572, 573, 574, 591, 600, 636], "anoth": [145, 238, 286, 309, 314, 544, 572, 615, 636, 645, 682, 706, 714, 832, 915], "index_column": [146, 147, 238, 573, 574, 636], "truncat": [146, 238, 573, 591, 636], "include_boundari": [146, 238, 573, 636], "start_bi": [146, 238, 573, 636], "startbi": [146, 238, 573, 636], "dynamicgroupbi": [146, 238], "normal": [146, 238, 346, 378, 437, 544, 573, 636, 751, 789, 845, 915], "groupbi": [146, 147, 171, 238, 245, 250, 269, 309, 356, 358, 404, 439, 440, 478, 489, 492, 501, 544, 559, 564, 566, 573, 574, 591, 600, 636, 665, 706, 915], "member": [146, 238, 573, 636, 777, 915], "seen": [146, 238, 289, 360, 544, 573, 636], "roll": [146, 147, 238, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 498, 544, 573, 574, 636, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 915], "slot": [146, 238, 268, 309, 310, 544, 573, 636, 664, 706, 709, 915], "1n": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736, 740, 745], "nanosecond": [146, 147, 161, 211, 238, 332, 336, 337, 341, 417, 418, 419, 420, 421, 423, 424, 425, 508, 544, 573, 574, 579, 636, 736, 740, 741, 745], "1u": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736, 740, 745], "microsecond": [146, 147, 161, 211, 238, 332, 336, 337, 341, 417, 418, 419, 420, 421, 423, 424, 425, 507, 508, 544, 573, 574, 579, 591, 636, 736, 740, 745], "1m": [146, 147, 161, 211, 238, 323, 324, 326, 331, 332, 336, 338, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 727, 729, 735, 736, 740, 742, 745], "millisecond": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 508, 544, 573, 574, 579, 636, 736, 740, 745], "1h": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 720, 736, 740, 745], "1w": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736, 740, 745], "week": [146, 147, 161, 211, 238, 332, 336, 341, 343, 417, 418, 419, 420, 421, 423, 424, 425, 508, 544, 573, 574, 579, 636, 736, 740, 745, 747], "month": [146, 147, 161, 211, 238, 317, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 506, 507, 544, 573, 574, 579, 636, 717, 736, 740, 745], "1y": [146, 147, 161, 211, 238, 332, 336, 341, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736, 740, 745, 749], "1i": [146, 147, 161, 211, 238, 332, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 574, 579, 636, 736], "10i": [146, 147, 238, 573, 574, 636], "ascend": [146, 147, 238, 573, 574, 636], "often": [146, 147, 238, 267, 413, 544, 573, 574, 636, 663], "dynam": [146, 238, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 636], "matter": [146, 147, 158, 184, 200, 238, 573, 574, 636], "neg": [146, 149, 189, 190, 192, 196, 238, 281, 282, 430, 431, 438, 463, 544, 573, 598, 599, 603, 616, 636, 677, 678, 837, 838, 846, 871, 915], "_lower_bound": [146, 238, 573, 636], "_upper_bound": [146, 238, 573, 636], "impact": [146, 238, 573, 636], "harder": [146, 238, 573, 636], "side": [146, 147, 238, 365, 417, 418, 419, 420, 421, 423, 424, 425, 428, 544, 573, 574, 636, 770, 831, 915], "inclus": [146, 147, 238, 365, 417, 418, 419, 420, 421, 423, 424, 425, 464, 465, 544, 573, 574, 636, 770, 872, 873, 915], "datapoint": [146, 238, 573, 636], "mondai": [146, 238, 343, 573, 636, 747], "date_rang": [146, 211, 238, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 573, 636, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749], "30m": [146, 238, 336, 341, 573, 636, 740, 745], "time_min": [146, 238, 573, 636], "time_max": [146, 238, 573, 636], "boundari": [146, 238, 298, 299, 300, 544, 573, 636, 696, 697, 698, 915], "time_count": [146, 238, 573, 636], "_lower_boundari": [146, 238, 573, 636], "_upper_boundari": [146, 238, 573, 636], "lower_bound": [146, 238, 544, 573, 636, 902, 915], "upper_bound": [146, 238, 287, 544, 573, 636, 794, 915], "time_agg_list": [146, 238, 573, 636], "idx": [146, 159, 238, 287, 573, 636, 683, 834, 915], "arang": [146, 209, 220, 238, 573, 620, 636], "2i": [146, 238, 573, 636], "3i": [146, 238, 573, 636], "a_agg_list": [146, 238, 573, 636], "rollinggroupbi": [147, 238], "dynamic_groupbi": [147, 238, 574, 636], "groupby_dynam": [147, 238, 574, 636], "45": [147, 238, 315, 336, 341, 445, 451, 574, 636, 715, 740, 745, 853, 859], "48": [147, 238, 574, 636], "18": [147, 238, 308, 336, 341, 344, 364, 377, 544, 574, 591, 636, 748], "19": [147, 161, 238, 336, 574, 579, 636, 740, 745], "43": [147, 238, 308, 544, 574, 636], "strptime": [147, 238, 339, 574, 636, 743], "2d": [147, 202, 238, 574, 636, 717], "sum_a": [147, 238, 574, 636], "min_a": [147, 238, 574, 636], "max_a": [147, 238, 574, 636], "to_list": [147, 238, 287, 574, 636, 683, 915], "seed": [148, 185, 238, 361, 427, 433, 544, 766, 830, 841, 915], "seed_1": [148, 238, 361, 544, 766, 915], "seed_2": [148, 238, 361, 544, 766, 915], "seed_3": [148, 238, 361, 544, 766, 915], "hash": [148, 238, 544, 915], "u64": [148, 238, 361, 412, 544, 591, 636, 766, 915], "10783150408545073287": [148, 238], "1438741209321515184": [148, 238], "10047419486152048166": [148, 238], "2047317070637311557": [148, 238], "last": [149, 161, 175, 193, 196, 207, 232, 238, 259, 262, 272, 285, 309, 317, 333, 342, 439, 466, 477, 534, 544, 579, 604, 607, 609, 632, 636, 654, 657, 668, 681, 706, 717, 737, 746, 874, 886, 915], "_except_": [149, 196, 238], "ab": [149, 196, 215, 238, 473, 474, 520, 523, 544, 614, 636, 915], "grown": [151, 238], "baz": [152, 153, 175, 208, 238, 464, 466, 577, 610, 636, 874], "intermedi": [153, 238, 577, 636, 769, 915], "linear": [153, 177, 230, 238, 265, 364, 391, 409, 421, 498, 499, 526, 544, 577, 592, 630, 636, 661, 769, 812, 824, 915], "mask": [154, 156, 238, 266, 290, 291, 366, 368, 376, 444, 446, 544, 662, 685, 686, 761, 770, 772, 775, 786, 809, 810, 833, 852, 854, 906, 915], "visual": [154, 156, 238], "buffer_s": [158, 238], "500": [158, 210, 238, 566, 611, 636, 726, 728, 734, 741, 820, 821, 823, 915], "veri": [158, 206, 238, 250, 544, 558, 636, 699, 915], "fit": [158, 191, 209, 238, 432, 544, 839, 840, 915], "speedup": [158, 238], "signific": [158, 238, 250, 544], "4x": [158, 238], "disabl": [158, 238], "export": [158, 159, 184, 200, 238, 517], "materialis": [158, 159, 183, 184, 238], "iter_row": [159, 183, 184, 238], "17_500": [159, 238], "2023": [159, 238, 315, 715], "klmnoopqrstuvwxyz": [159, 238], "__name__": [159, 238], "7500": [159, 238], "recordbatch": [159, 238], "15_000": [159, 238], "record_batch": [159, 238], "to_arrow": [159, 238, 915], "to_batch": [159, 238], "date32": [159, 238], "large_str": [159, 198, 203, 238], "15000": [159, 238], "2500": [159, 238], "left_on": [160, 161, 238, 578, 579, 636], "right_on": [160, 161, 238, 578, 579, 636], "joinstrategi": [160, 238, 578, 636], "suffix": [160, 161, 187, 215, 218, 238, 293, 371, 373, 374, 375, 404, 415, 448, 544, 578, 579, 597, 614, 615, 618, 636, 688, 856], "_right": [160, 161, 238, 578, 579, 636], "outer": [160, 238, 578, 636], "semi": [160, 238, 578, 636], "anti": [160, 238, 578, 636, 833, 834, 915], "cross": [160, 238, 578, 636], "join_asof": [160, 238, 578, 636], "stringcach": [160, 238, 553], "other_df": [160, 238, 578, 636], "by_left": [161, 238, 579, 636], "by_right": [161, 238, 579, 636], "asofjoinstrategi": [161, 238, 579, 636], "allow_parallel": [161, 238, 578, 579, 636], "force_parallel": [161, 238, 578, 579, 636], "asof": [161, 238, 579, 636], "asof_join": [161, 238], "search": [161, 238, 579, 636], "greater": [161, 238, 437, 466, 544, 579, 636, 845, 874, 915], "numer": [161, 238, 298, 299, 300, 365, 413, 432, 544, 553, 579, 636, 696, 697, 698, 770, 783, 832, 839, 915], "distanc": [161, 238, 579, 636], "plan": [161, 162, 238, 556, 564, 571, 578, 579, 593, 600, 617, 636], "gdp": [161, 238, 579, 636], "2016": [161, 238, 579, 636], "2017": [161, 238, 579, 636], "2018": [161, 238, 579, 636], "2019": [161, 238, 579, 636], "record": [161, 238, 579, 636], "jan": [161, 238, 579, 636], "1st": [161, 238, 579, 636], "4164": [161, 238, 579, 636], "4411": [161, 238, 579, 636], "4566": [161, 238, 579, 636], "4696": [161, 238, 579, 636], "popul": [161, 238, 579, 636], "12th": [161, 238, 579, 636], "82": [161, 238, 579, 636], "66": [161, 238, 579, 636, 824, 915], "83": [161, 238, 579, 636], "52": [161, 215, 238, 426, 544, 579, 614, 636], "request": [162, 238], "small": [162, 238, 336, 566, 636], "describe_plan": [162, 238, 636], "unoptim": [162, 238, 636], "describe_optimized_plan": [162, 238, 636], "show_graph": [162, 238, 636], "un": [162, 238], "graphviz": [162, 238, 600, 636], "advis": [162, 238], "axi": [164, 165, 167, 169, 195, 238, 587, 636], "null_strategi": [165, 195, 238], "nullstrategi": [165, 195, 238], "spam": [165, 238], "id_var": [167, 238, 587, 636], "value_var": [167, 238, 587, 636], "variable_nam": [167, 238, 587, 636], "value_nam": [167, 238, 587, 636], "unpivot": [167, 238, 587, 636], "leav": [167, 238, 587, 636], "identifi": [167, 173, 207, 238, 587, 609, 636], "massag": [167, 238, 587, 636], "measur": [167, 238, 587, 636], "merg": [168, 238, 588, 636], "caller": [168, 238, 287, 583, 588, 620, 636], "respons": [168, 238, 588, 636], "One": [171, 175, 238, 915], "what": [171, 238, 896, 905, 915], "struct": [171, 187, 205, 208, 215, 238, 287, 388, 452, 465, 466, 487, 503, 504, 505, 519, 544, 597, 610, 614, 636, 683, 860, 873, 874], "pack": [171, 238], "expr_unique_subset": [171, 238], "df_nuniqu": [171, 238], "df_agg_nuniqu": [171, 238], "simpl": [171, 238], "func": [174, 238, 590, 636], "offer": [174, 238, 544, 590, 636], "recommend": [174, 238], "fulli": [174, 185, 238], "advantag": [174, 238], "cast_str_to_int": [174, 238, 590, 636], "col_nam": [174, 238, 590, 636], "tdf": [174, 238, 590, 636], "aggregate_funct": [175, 238], "pivotagg": [175, 238], "sort_column": [175, 238], "predefin": [175, 238], "predict": [175, 178, 211, 238], "transpos": [175, 238], "discoveri": [175, 238], "interpol": [177, 230, 238, 355, 391, 409, 421, 526, 544, 592, 630, 636, 812, 824, 915], "rollinginterpolationmethod": [177, 230, 238, 409, 421, 526, 544, 592, 630, 636, 812, 824, 915], "midpoint": [177, 230, 238, 409, 421, 526, 544, 592, 630, 636, 812, 824, 915], "subsequ": [178, 203, 238, 564, 636], "old": [179, 238, 594, 636], "new_col": [180, 238], "val": [182, 238, 296, 482, 544, 595, 636, 692], "by_pred": [183, 238], "accord": [183, 238, 388, 544, 722], "never": [183, 238], "mutual": [183, 238], "exclus": [183, 238], "addition": [183, 238], "clariti": [183, 238], "anyth": [183, 238], "toomanyrowsreturn": [183, 238, 553], "norowsreturn": [183, 238, 553], "inherit": [183, 238], "rowsexcept": [183, 238, 553], "frac": [185, 238, 347, 348, 349, 427, 437, 483, 544, 753, 754, 755, 830, 845, 899, 915], "with_replac": [185, 238, 427, 544, 830, 915], "shuffl": [185, 220, 238, 427, 544, 620, 830, 915], "neither": [185, 238], "nor": [185, 238], "modul": [185, 238, 427, 433, 543, 544, 830, 841, 915], "more_expr": [187, 215, 238, 404, 496, 529, 544, 597, 614, 636], "named_expr": [187, 215, 238, 529, 532, 597, 614, 636], "threshold": [187, 238, 597, 636], "instanti": [187, 215, 238, 597, 614, 636], "set_auto_structifi": [187, 215, 238, 597, 614, 636], "integer_dtyp": [187, 238, 597, 636], "is_odd": [187, 238, 597, 636], "_is_odd": [187, 238, 597, 636], "shift_and_fil": [189, 238, 544, 636, 915], "shift": [190, 238, 268, 310, 405, 431, 498, 544, 599, 636, 664, 709, 808, 838, 915], "shrink": [191, 238, 432, 544, 839, 840, 915], "hold": [191, 238], "nulls_last": [193, 238, 259, 262, 439, 544, 604, 636, 654, 657, 915], "ddof": [194, 212, 238, 442, 488, 500, 525, 530, 531, 535, 544, 605, 612, 636, 849, 904, 915], "deviat": [194, 238, 348, 423, 442, 531, 544, 605, 636, 754, 849, 915], "degre": [194, 212, 238, 442, 488, 500, 525, 530, 544, 849, 904, 915], "freedom": [194, 212, 238, 442, 488, 500, 525, 530, 544, 849, 904, 915], "816497": [194, 238], "21": [195, 238, 514], "16a": [195, 238], "27b": [195, 238], "38c": [195, 238], "nth": [197, 238, 466, 479, 544, 608, 636, 874, 888, 915], "mostli": [198, 238, 356, 544], "categoricaltyp": [198, 238], "as_seri": [199, 238], "fruit": [199, 238, 407, 415, 448, 467, 475, 544, 856, 875], "car": [199, 238, 407, 415, 475, 544], "beetl": [199, 238, 407, 415, 475, 544], "audi": [199, 238, 407, 415, 475, 544], "28": [199, 238, 344, 748], "300": [199, 238, 820, 821, 823, 915], "re": [202, 238, 517], "ll": [202, 238], "numpy_arrai": [202, 238], "use_pyarrow_extension_arrai": [203, 238, 897, 915], "trigger": [203, 238, 897, 915], "sent": [203, 238, 896, 897, 915], "pandas_df1": [203, 238], "pandas_df2": [203, 238], "pandas_df2_pa": [203, 238], "na": [203, 238, 897, 915], "three": [205, 238, 428, 544], "four": [205, 238], "five": [205, 238], "num": [205, 238, 365, 368, 472, 544, 770, 915], "include_head": [206, 238], "header_nam": [206, 238], "column_nam": [206, 238], "perhap": [206, 238], "column_2": [206, 238], "name_gener": [206, 238, 287, 683], "base_nam": [206, 238], "my_column_": [206, 238], "my_column_0": [206, 238], "my_column_1": [206, 238], "my_column_2": [206, 238], "uniquekeepstrategi": [207, 238, 609, 636], "decompos": [208, 238, 610, 636], "t_a": [208, 238, 610, 636], "t_b": [208, 238, 610, 636], "t_c": [208, 238, 610, 636], "t_d": [208, 238, 610, 636], "womp": [208, 238, 610, 636], "t_": [208, 238, 610, 636], "t_struct": [208, 238, 610, 636], "step": [209, 238, 493], "unstackdirect": [209, 238], "much": [209, 238, 286, 309, 544, 682, 706, 915], "pivot": [209, 238], "phase": [209, 238], "subject": [209, 238], "ascii_uppercas": [209, 238], "col1": [209, 238, 636], "col2": [209, 238, 636], "h": [209, 238, 339, 432, 469, 544, 877], "col1_0": [209, 238], "col1_1": [209, 238], "col1_2": [209, 238], "col2_0": [209, 238], "col2_1": [209, 238], "col2_2": [209, 238], "syntact": [210, 238, 505, 510, 511, 515, 526, 529, 533, 611, 636, 848, 915], "sugar": [210, 238, 505, 510, 511, 515, 526, 529, 533, 611, 636, 848, 915], "coalesc": [210, 238, 611, 636], "400": [210, 238, 611, 636, 820, 821, 823, 915], "600": [210, 238, 611, 636], "700": [210, 238, 611, 636], "new_df": [210, 238, 611, 636], "time_column": [211, 238], "frequenc": [211, 238], "forward_fil": [211, 238, 305, 308, 544], "06": [211, 238, 315, 322, 334, 335, 345, 740, 747], "varianc": [212, 238, 349, 378, 425, 488, 535, 544, 612, 636, 755, 789, 828, 904, 915], "grow": [213, 238], "is_not": [215, 238, 544, 614, 636], "not_c": [215, 238, 614, 636], "diff": [215, 238, 318, 321, 324, 326, 328, 331, 338, 544, 614, 636, 718, 721, 727, 729, 732, 735, 742, 915], "_diff": [215, 238, 614, 636], "row_nr": [216, 238, 388, 544, 616, 636, 834, 915], "more_agg": [218, 618], "named_agg": [218, 618], "_sum": [218, 618], "_mean_squar": [218, 618], "b_sum": [218, 618], "c_mean_squar": [218, 618], "17": [218, 426, 514, 544, 618, 700, 740, 915], "sub": [220, 293, 294, 448, 467, 688, 689, 856, 875], "triangl": [220, 620], "group_df": [220, 620], "nr": [223, 232, 623, 632], "maxim": [225, 257, 544, 625, 652, 915], "833333": [226, 626], "minim": [228, 258, 264, 432, 544, 628, 653, 660, 799, 839, 915], "overview": [238, 544, 553, 636, 915], "public": [238, 544, 553, 636, 915], "frameinittyp": [238, 636], "variou": [238, 544, 636, 915], "entri": [238, 636], "prevent": [238, 307, 308, 377, 476, 544, 636, 704, 705, 885, 915], "come": [238, 378, 544, 554, 635, 636, 789, 915], "behavior": [238, 250, 286, 492, 520, 523, 544, 682], "mydatafram": 238, "notic": [238, 636, 915], "df4": 238, "df5": 238, "df6": 238, "corr": [238, 525, 530], "drop_in_plac": 238, "drop_nul": [238, 312, 544, 636, 915], "estimated_s": [238, 915], "explod": [238, 358, 414, 544, 636, 817, 915], "find_idx_by_nam": 238, "fold": [238, 395, 496, 503, 504, 527, 533], "frame_equ": [238, 336, 341], "get_column": [238, 533], "groupby_rol": [238, 417, 418, 419, 420, 421, 423, 424, 425, 544, 573, 636], "hash_row": 238, "hstack": 238, "insert_at_idx": 238, "is_dupl": [238, 544, 915], "is_empti": [238, 915], "is_uniqu": [238, 544, 915], "iter_slic": 238, "melt": [238, 636], "merge_sort": [238, 636], "n_uniqu": [238, 544, 915], "pipe": [238, 544, 636], "quantil": [238, 421, 544, 636, 824, 915], "replace_at_idx": 238, "shrink_to_fit": [238, 915], "take_everi": [238, 544, 636, 915], "to_dict": 238, "to_numpi": [238, 386, 544, 915], "to_panda": [238, 915], "to_struct": 238, "unnest": [238, 465, 466, 474, 636, 873, 874], "unstack": 238, "upsampl": 238, "var": [238, 544, 636, 915], "write_avro": 238, "write_databas": 238, "write_excel": 238, "workbook": 238, "worksheet": 238, "table_styl": 238, "column_width": 238, "column_tot": 238, "column_format": 238, "conditional_format": 238, "dtype_format": 238, "sparklin": 238, "autofilt": 238, "autofit": 238, "hidden_column": 238, "hide_gridlin": 238, "xlsxwriter": 238, "sheet1": 238, "notat": 238, "eg": [238, 336, 469], "medium": 238, "first_column": 238, "last_column": 238, "banded_column": 238, "banded_row": 238, "formula": [238, 346, 544, 751, 915], "chart": [238, 591, 636], "pixel": 238, "fn": [238, 503, 504, 512, 527], "averag": [238, 347, 348, 349, 410, 544, 753, 754, 755, 813, 915], "count_num": 238, "std_dev": 238, "dd": 238, "mm": 238, "yyyi": 238, "0_": 238, "typenam": 238, "3_color_scal": 238, "data_bar": 238, "definit": [238, 378, 544, 789, 915], "complet": [238, 896, 915], "flexibl": 238, "icon": 238, "float_dtyp": 238, "uniform": 238, "marker": 238, "compliant": 238, "insert_befor": 238, "insert_aft": 238, "respect": 238, "far": 238, "pure": 238, "gridlin": 238, "care": [238, 250, 429, 544, 835, 915], "readthedoc": [238, 922], "io": [238, 922], "working_with_conditional_format": 238, "mandatori": 238, "adjac": 238, "help": [238, 566, 636], "working_with_sparklin": 238, "dtm": [238, 315, 715], "10_000": 238, "20_000": 238, "30_000": 238, "b4": 238, "light": 238, "titl": 238, "integr": 238, "multi_fram": 238, "wb": 238, "basic": 238, "coordin": 238, "advanc": 238, "min_color": 238, "76933c": 238, "mid_color": 238, "c4d79b": 238, "max_color": 238, "ebf1d": 238, "data_bar_2010": 238, "bar_color": 238, "9bbb59": 238, "bar_negative_color_sam": 238, "bar_negative_border_color_sam": 238, "000": 238, "white": 238, "w": [238, 450, 858], "get_worksheet_by_nam": 238, "fmt_titl": 238, "add_format": 238, "font_color": 238, "4f6228": 238, "font_siz": 238, "ital": 238, "bold": 238, "customis": 238, "trend": 238, "win_loss": 238, "hidden": 238, "q1": 238, "q2": 238, "q3": 238, "80": 238, "q4": 238, "75": 238, "write_json": [238, 593, 636], "write_parquet": 238, "94": [245, 544], "confus": [247, 371, 373, 544], "tt": [247, 544], "tf": [247, 248, 544], "ff": [247, 248, 544], "upcast": [249, 544], "skip_nul": [250, 544, 645, 915], "pass_nam": [250, 544], "applystrategi": [250, 544], "thread_loc": [250, 544], "assum": [250, 544, 583, 620, 636], "stage": [250, 544], "considd": [250, 544], "code": [250, 429, 544, 581, 636, 835, 915], "amount": [250, 544], "releas": [250, 544], "gil": [250, 544], "discourag": [250, 544], "loop": [250, 544], "a_times_2": [250, 544], "invers": [251, 252, 253, 254, 255, 256, 544, 646, 647, 648, 649, 650, 651, 915], "cosin": [251, 252, 301, 302, 386, 544, 646, 647, 700, 701, 915], "570796": [251, 253, 544, 646, 648, 915], "hyperbol": [252, 254, 256, 302, 436, 481, 544, 647, 649, 651, 701, 844, 890, 915], "sine": [253, 254, 386, 435, 436, 544, 648, 649, 843, 844, 915], "881374": [254, 544, 649, 915], "tangent": [255, 256, 480, 481, 544, 650, 651, 889, 890, 915], "785398": [255, 544, 650, 915], "arg_wher": [260, 544], "arg_sort": [262, 544, 657, 915], "favour": [262, 352, 544, 657, 757, 915], "sublist": [263, 264, 266, 268, 271, 272, 273, 274, 275, 282, 285, 286, 659, 660, 662, 664, 667, 668, 669, 670, 671, 678, 681, 682, 683, 777, 915], "membership": [266, 662], "listcol": 267, "number_of_two": 267, "null_behavior": [268, 310, 544, 664, 709, 915], "nullbehavior": [268, 310, 544, 664, 709, 915], "th": [268, 310, 437, 544, 664, 709, 845, 915], "against": [269, 636, 665, 921], "blindli": [269, 665], "worth": [269, 665], "enough": [269, 437, 544, 665, 845, 915], "concat_list": [269, 509, 665], "rank": [269, 500, 509, 530, 544, 665, 915], "exprnamespac": 270, "reshap": [270, 544, 666, 915], "flat": [270, 414, 544, 666, 817, 915], "taken": [282, 463, 478, 544, 678, 871], "null_on_oob": [286, 682], "cheaper": [286, 682], "n_field_strategi": [287, 683], "tostructstrategi": [287, 683], "first_non_nul": [287, 683], "max_width": [287, 683], "field_0": [287, 683], "field_1": [287, 683], "field_n": [287, 683], "know": [287, 457, 865, 896, 905, 915], "incorrectli": 287, "downstream": [287, 429, 544, 835, 915], "advic": 287, "col_name_": [287, 683], "col_name_0": [287, 683], "col_name_1": [287, 683], "col_name_2": [287, 683], "substr": [290, 293, 294, 444, 448, 459, 460, 464, 465, 466, 467, 685, 688, 689, 852, 856, 867, 868, 872, 873, 874, 875], "transferencod": [291, 292, 446, 447, 686, 687, 854, 855], "strict": [291, 295, 444, 446, 458, 469, 544, 686, 690, 832, 852, 854, 866, 877, 915], "hex": [291, 292, 446, 447, 458, 686, 687, 854, 855, 866], "base64": [291, 292, 446, 447, 686, 687, 854, 855], "prefix": [294, 467, 472, 544, 689, 875, 880], "due": [295, 544, 690, 915], "overflow": [295, 307, 308, 458, 476, 544, 690, 704, 705, 866, 885, 915], "categoricalord": [296, 692], "lexic": [296, 692], "k": [296, 378, 483, 544, 692, 789, 899, 915], "min_val": [298, 300, 544, 696, 698, 915], "max_val": [298, 299, 544, 696, 697, 915], "foo_clip": [298, 299, 300, 544], "clip": [299, 300, 544, 697, 698, 915], "543081": [302, 544, 701, 915], "cumul": [304, 305, 306, 307, 308, 503, 504, 505, 544, 702, 703, 704, 705, 915], "a_revers": [304, 305, 306, 307, 308, 387, 415, 475, 544], "value_cummax": [305, 544], "value_cummax_all_fil": [305, 544], "uint16": [307, 308, 476, 544, 704, 705, 885, 915], "value_cumsum": [308, 544], "value_cumsum_all_fil": [308, 544], "min_period": [309, 347, 348, 349, 416, 417, 418, 419, 420, 421, 423, 424, 425, 544, 706, 753, 754, 755, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "slide": [309, 544, 706, 915], "realli": [309, 544, 706, 915], "complex": [309, 483, 544, 706, 899, 915], "visit": [309, 544, 706, 915], "44": [311, 544], "drop_nan": [313, 544, 915], "tu": [314, 315, 319, 340, 344, 714, 715, 719, 739, 744, 748], "lose": [314, 714], "2001": [314, 317, 319, 320, 322, 327, 329, 332, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 469, 714, 717, 719, 720, 723, 724, 725, 726, 728, 730, 731, 733, 734, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 877], "tu_m": [314, 714], "tu_n": [314, 714], "tm": [315, 715], "naiv": [315, 715], "compon": [315, 337, 469, 506, 507, 508, 715, 741], "resolv": 315, "59": [315, 327, 337, 507, 715, 731, 741], "456000": [315, 715], "101000": 315, "456": [315, 715, 894, 915], "101": [315, 458, 866], "d1": 315, "d2": 315, "d3": 315, "utc": [316, 335, 469, 716, 739, 877], "tz": [316, 335, 716, 739], "europ": [316, 335, 716, 739], "london": [316, 335, 716, 739], "gmt": [316, 335, 716, 739], "bst": [316, 335, 716, 739], "extract": [317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 337, 338, 342, 343, 345, 451, 452, 453, 544, 717, 718, 720, 721, 722, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 741, 742, 746, 747, 749, 859, 860, 861], "weekdai": [317, 333], "day_of_month": [317, 333, 343], "ordinal_dai": [317, 343], "day_of_year": [317, 333, 343], "days_diff": 318, "epochtimeunit": [319, 514, 719], "unix": [319, 514, 719], "epoch_n": [319, 719], "epoch_": [319, 719], "978307200000000": [319, 340, 719, 744], "978307200": [319, 719], "978393600000000": [319, 340, 719, 744], "978393600": [319, 719], "978480000000000": [319, 340, 719, 744], "978480000": [319, 719], "hours_diff": 321, "iso": [322, 342, 343, 722, 746, 747], "correspond": [322, 410, 544, 722, 813, 915], "2006": [322, 332, 736], "180": [322, 334, 345], "2002": [322, 332, 334, 345, 736, 749], "2004": [322, 332, 736], "2005": [322, 332, 736], "1001": [323, 324, 326, 331], "002": [323, 324, 326, 331, 508, 727, 729, 735], "2000": [323, 332, 736], "003": [323, 324, 326, 331], "3000": 323, "997": [323, 324, 326, 331], "997000": 323, "998": [323, 324, 326, 331], "998000": 323, "999": [323, 324, 326, 331], "999000": 323, "microseconds_diff": 324, "milliseconds_diff": 326, "minutes_diff": 328, "1440": [328, 732], "nanoseconds_diff": 331, "1000000": [331, 472, 735], "leap": [332, 736], "account": [332, 347, 348, 349, 544, 736, 753, 754, 755, 915], "minu": [332, 736], "dictat": [332, 736], "date_plus_1i": [332, 736], "1y2mo": [332, 736], "date_min": 332, "1998": [332, 736], "1999": [332, 736], "2003": [332, 514, 736], "ordin": [333, 410, 544, 737, 813, 915], "366": [333, 737], "convert_time_zon": [335, 739], "timestamp": [335, 514, 739], "unset": [335, 739], "london_timezon": 335, "amsterdam": 335, "london_to_amsterdam": 335, "cet": 335, "cest": 335, "half": [336, 347, 348, 349, 544, 740, 753, 754, 755, 915], "225": [336, 341], "to_fram": [336, 341, 469, 833, 834, 873, 874, 877, 915], "10m": [336, 341, 740, 745], "milli": [337, 741], "micro": [337, 741], "456789": 337, "654321": 337, "111110": 337, "765431": 337, "sec": 337, "11111": 337, "seconds_diff": 338, "timestamp_n": [340, 744], "timestamp_m": 340, "978307200000": 340, "978393600000": 340, "978480000000": 340, "53": [342, 746], "sundai": [343, 747], "incorrect": [344, 429, 544, 620, 748, 835, 915], "tu_u": [344, 748], "32971": [344, 748], "32974": [344, 748], "32976": [344, 748], "718281828459045": [346, 383, 544, 751, 792, 915], "pk": [346, 544, 751, 915], "459148": [346, 544], "754888": [346, 544], "span": [347, 348, 349, 544, 753, 754, 755, 915], "half_lif": [347, 348, 349, 544, 753, 754, 755, 915], "ignore_nul": [347, 348, 349, 544, 753, 754, 755, 905, 915], "exponenti": [347, 348, 349, 351, 544, 753, 754, 755, 756, 915], "weight": [347, 348, 349, 416, 417, 418, 419, 420, 421, 423, 424, 425, 437, 544, 753, 754, 755, 819, 820, 821, 822, 823, 824, 826, 827, 828, 845, 915], "decai": [347, 348, 349, 544, 753, 754, 755, 915], "term": [347, 348, 349, 454, 457, 544, 753, 754, 755, 862, 865, 915], "mass": [347, 348, 349, 544, 753, 754, 755, 915], "gamma": [347, 348, 349, 544, 753, 754, 755, 915], "foral": [347, 348, 349, 544, 753, 754, 755, 915], "geq": [347, 348, 349, 544, 753, 754, 755, 915], "theta": [347, 348, 349, 544, 753, 754, 755, 915], "life": [347, 348, 349, 544, 753, 754, 755, 915], "exp": [347, 348, 349, 544, 753, 754, 755, 915], "ln": [347, 348, 349, 544, 753, 754, 755, 915], "smooth": [347, 348, 349, 544, 753, 754, 755, 915], "factor": [347, 348, 349, 482, 544, 753, 754, 755, 898, 915], "leq": [347, 348, 349, 544, 753, 754, 755, 915], "begin": [347, 348, 349, 450, 544, 753, 754, 755, 858, 915], "imbal": [347, 348, 349, 544, 753, 754, 755, 915], "ew": [347, 348, 349, 544, 753, 754, 755, 915], "w_i": [347, 348, 349, 544, 753, 754, 755, 915], "recurs": [347, 348, 349, 544, 753, 754, 755, 915], "y_0": [347, 348, 349, 544, 753, 754, 755, 915], "x_0": [347, 348, 349, 544, 753, 754, 755, 915], "y_t": [347, 348, 349, 544, 753, 754, 755, 915], "y_": [347, 348, 349, 544, 753, 754, 755, 915], "x_t": [347, 348, 349, 544, 753, 754, 755, 915], "observ": [347, 348, 349, 544, 753, 754, 755, 915], "x_2": [347, 348, 349, 544, 753, 754, 755, 915], "428571": [347, 544], "bia": [348, 349, 378, 422, 437, 544, 754, 755, 789, 825, 845, 915], "unbias": [348, 349, 544, 754, 755, 915], "963624": [348, 544, 754, 915], "928571": [349, 544, 755, 915], "wildcard": [350, 490, 497, 503, 504, 512, 527, 544], "regex": [350, 393, 444, 445, 448, 450, 451, 459, 460, 467, 510, 520, 523, 533, 544, 852, 853, 856, 858, 859, 867, 868, 875], "aa": [350, 510, 544], "ba": [350, 510, 544], "cc": [350, 510, 544], "718282": [351, 544], "389056": [351, 544], "54": [351, 544], "59815": [351, 544], "expand": [352, 392, 393, 413, 544, 757, 915], "arr": [352, 509, 537, 544, 757, 896, 907, 915], "exprlistnamespac": [352, 358, 414, 544], "exprstringnamespac": [352, 544], "pythonliter": [353, 544, 614, 636, 758, 915], "extrem": [353, 544, 758, 915], "group_col": [356, 489, 544], "g1": [356, 489, 544], "g2": [356, 489, 544], "lt": [356, 489, 544, 915], "gte": [356, 489, 544], "9774092659964970114": [361, 544], "13614470193936745724": [361, 544], "1101441246220388612": [361, 544], "11638928888656214026": [361, 544], "13382926553367784577": [361, 544], "cumsum": [363, 544, 576, 636, 915], "interpolationmethod": [364, 544, 769, 915], "regrid": [364, 544], "grid": [364, 544], "df_original_grid": [364, 544], "grid_point": [364, 544], "df_new_grid": [364, 544], "conflat": [365, 544], "finit": [367, 500, 530, 544, 774, 915], "primit": [369, 544, 896, 915], "optional_memb": [369, 544, 777, 915], "infinit": [370, 544, 778, 915], "_isnan": [371, 544], "b_isnan": [371, 544], "negat": [372, 544], "_is_not_nan": [373, 544], "b_is_not_nan": [373, 544], "_not_nul": [374, 544], "a_not_nul": [374, 544], "b_not_nul": [374, 544], "_isnul": [375, 544], "a_isnul": [375, 544], "b_isnul": [375, 544], "undo": [377, 397, 544], "duplicateerror": [377, 544, 553], "occurr": [377, 544], "333333": [377, 425, 544, 808, 828, 915], "fisher": [378, 437, 544, 789, 845, 915], "fourth": [378, 544, 789, 915], "central": [378, 437, 544, 789, 845, 915], "subtract": [378, 544, 789, 915], "distribut": [378, 437, 544, 789, 845, 915], "elimin": [378, 544, 789, 915], "bias": [378, 437, 544, 789, 845, 915], "scipi": [378, 437, 544, 789, 845, 915], "stat": [378, 437, 544, 789, 845, 915], "153061": [378, 544], "logarithm": [383, 384, 544, 792, 793, 915], "584963": [383, 544], "30103": [384, 544], "60206": [384, 544], "lowest": [385, 544], "9223372036854775808": [385, 544], "agg_list": [386, 544], "elementwis": [386, 416, 417, 418, 419, 420, 421, 423, 424, 425, 490, 491, 544, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "third": [386, 544], "parti": [386, 544], "book": [386, 544], "argmax": [386, 544], "_revers": [387, 415, 475, 544], "b_revers": [387, 415, 475, 544], "remap": [388, 544, 795, 915], "lookup": [388, 544, 795, 915], "country_code_dict": [388, 544], "ca": [388, 544], "canada": [388, 544], "de": [388, 544], "germani": [388, 544], "fr": [388, 544], "franc": [388, 544], "country_cod": [388, 544], "unknown": [388, 518, 544], "rest": [388, 544], "computeerror": [394, 458, 553, 866], "keep_nam": [397, 544], "poison": [401, 402, 544, 804, 805, 915], "nanmax": [401, 402, 544, 804, 805, 915], "wherea": [401, 402, 544, 575, 582, 636, 804, 805, 915], "outcom": [404, 544], "_max": [404, 544], "c_max": [404, 544], "_min": [404, 544], "c_min": [404, 544], "recent": [405, 544, 808, 915], "percent": [405, 544, 808, 915], "090909": [405, 544], "expon": [406, 544], "power": [406, 544], "reverse_": [407, 544], "reverse_a": [407, 544], "reverse_fruit": [407, 544], "reverse_b": [407, 544], "reverse_car": [407, 544], "rankmethod": [410, 544, 813, 915], "ti": [410, 544, 813, 915], "appropri": [410, 544, 813, 915], "competit": [410, 544, 813, 915], "highest": [410, 486, 500, 530, 544, 636, 813, 915], "64bit": [412, 544, 815, 915], "safe": [412, 544, 815, 896, 915], "coerc": [413, 544], "dim": [414, 544, 817, 915], "fruits_revers": [415, 475, 544], "cars_revers": [415, 475, 544], "window_s": [416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 544, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 915], "rolling_min": [416, 544, 819, 915], "rolling_max": [416, 544, 819, 915], "rolling_mean": [416, 544, 819, 915], "rolling_sum": [416, 544, 819, 915], "multipli": [416, 417, 418, 419, 420, 421, 423, 424, 425, 544, 819, 820, 821, 822, 823, 824, 826, 827, 828, 915], "358899": [416, 544], "041452": [416, 544], "567764": [416, 544], "travers": [417, 418, 420, 423, 424, 425, 544, 820, 821, 823, 826, 827, 828, 915], "vector": [417, 418, 420, 423, 424, 425, 544, 820, 821, 823, 826, 827, 828, 915], "5h": [417, 418, 419, 420, 421, 423, 424, 425, 544], "33": [421, 426, 497, 544, 824, 915], "skew": [422, 544, 825, 915], "527525": [423, 544, 826, 915], "digit": [426, 472, 544, 829, 853, 880, 915], "searchsortedsid": [428, 544, 831, 915], "maintain": [428, 484, 544, 601, 602, 636, 831, 900, 915], "leftmost": [428, 544, 831, 915], "rightmost": [428, 544, 831, 915], "six": [428, 544], "extrema": [432, 544, 839, 915], "112": [432, 544], "129": [432, 544], "i8": [432, 544, 709, 818, 902, 915], "8589934592": [432, 544], "1073741824": [432, 544], "content": [433, 487, 544, 841, 915], "175201": [436, 544, 844, 915], "about": [437, 544, 845, 915], "unimod": [437, 544, 845, 915], "skewtest": [437, 544, 845, 915], "speak": [437, 544, 845, 915], "g_1": [437, 544, 845, 915], "m_3": [437, 544, 845, 915], "m_2": [437, 544, 845, 915], "m_i": [437, 544, 845, 915], "sum_": [437, 544, 845, 915], "texttt": [437, 544, 845, 915], "k_3": [437, 544, 845, 915], "k_2": [437, 544, 845, 915], "sqrt": [437, 544, 845, 915], "343622": [437, 544], "value1": [440, 544], "value2": [440, 544], "414214": [441, 544, 848, 915], "ends_with": [444, 467, 875], "crab": [444, 852], "dog": [444, 470, 471, 499, 852], "rab": [444, 852], "success": [445, 451, 853, 859], "overlap": [445, 451, 853, 859], "captur": [445, 450, 451, 853, 858, 859], "123": [445, 451, 460, 853, 859, 868, 894, 915], "bla": [445, 451, 853, 859], "asd": [445, 451, 853, 859], "678": [445, 451, 853, 859], "910t": [445, 451, 853, 859], "r": [445, 449, 450, 451, 459, 544, 853, 857, 858, 859, 867], "count_digit": 445, "666f6f": [447, 855], "626172": [447, 855], "mango": [448, 467, 856, 875], "go": [448, 856], "has_suffix": 448, "group_index": [450, 858], "vote": [450, 858], "ballon_dor": [450, 858], "candid": [450, 858], "messi": [450, 858], "ref": [450, 858], "candidat": [450, 858], "jorginho": [450, 858], "ronaldo": [450, 858], "extracted_nr": 451, "910": [451, 859], "json_path_match": [452, 860], "jsonpath": [452, 453, 860, 861], "json_path": [453, 861], "regardless": [453, 861], "json_val": [453, 861], "n_char": [454, 862], "caf\u00e9": [454, 457, 862, 865], "345": [454, 457, 862, 865], "\u6771\u4eac": [454, 457, 862, 865], "nchar": [454, 457], "fillchar": [455, 461, 863, 869], "justifi": [455, 461, 863, 869], "pad": [455, 461, 472, 863, 869, 880], "cow": [455, 461, 863, 869], "monkei": [455, 461, 863, 869], "hippopotamu": [455, 461, 863, 869], "strip": [456, 462, 864, 870], "whitespac": [456, 462, 468, 864, 870, 876], "tworld": [456, 468, 864, 876], "wod": [456, 462, 864, 870], "rld": [456, 864], "text": [457, 459, 460, 865], "radix": [458, 866], "parseerror": [458, 866], "becom": [458, 866], "defult": [458, 866], "silent": [458, 866], "110": [458, 866], "010": [458, 866], "fa1e": [458, 866], "ff00": [458, 866], "cafe": [458, 866], "64030": [458, 866], "65280": [458, 866], "51966": [458, 866], "replace_al": [459, 867], "123abc": [459, 867], "abc456": [459, 867], "abcabc": [460, 868], "123a123": [460, 868], "bc": [460, 533, 868], "trail": [462, 468, 870, 876], "worl": [462, 468, 870, 876], "subslic": [463, 871], "pear": [463, 871], "papaya": [463, 871], "dragonfruit": [463, 871], "s_slice": 463, "ear": [463, 871], "aya": [463, 871], "uit": [463, 871], "ya": [463, 871], "onf": [463, 871], "a_1": [465, 873, 893, 915], "d_4": [465, 873], "rename_field": [465, 466, 873, 874], "first_part": [465, 466, 873, 874], "second_part": [465, 466, 873, 874], "remaind": [466, 874], "app": [467, 875], "has_prefix": 467, "polarstemporaltyp": [469, 877], "tz_awar": [469, 877], "strftime": [469, 877], "anywher": [469, 877], "3f": 469, "00z": [469, 877], "sun": [469, 877], "34": [469, 877], "lowercas": [470, 878], "variant": [470, 471], "uppercas": [471, 879], "100000": 472, "0010": 472, "0001": 472, "00000": 472, "00001": 472, "cd": [473, 474], "struct_col": [473, 474], "www": 474, "xxx": 474, "yyi": 474, "zzz": 474, "obvious": 474, "referenc": 474, "structfieldnotfounderror": [474, 553], "761594": [481, 544, 890, 915], "replic": [482, 544, 898, 915], "vals_phys": [482, 544], "largest": [483, 544, 899, 915], "smallest": [483, 544, 899, 915], "bottom_k": [483, 544], "value_count": [485, 544, 915], "9223372036854775807": [486, 544], "multithread": [487, 544], "columnwis": [490, 491], "AND": 490, "bitwis": [490, 491], "returns_scalar": 492, "product_a": 492, "49": 492, "Be": 493, "more_nam": 497, "hamburg": 497, "lag": 498, "mimic": 498, "a_lag_": 498, "a_rol": 498, "plai": 499, "swim": 499, "walk": 499, "full_sent": 499, "correlationmethod": 500, "propagate_nan": [500, 530], "spearman": [500, 530], "larger": [500, 530, 601, 602, 636], "544705": [500, 525], "covari": 502, "acc": [503, 504, 512, 527], "include_init": 503, "accumul": [503, 504, 512, 527], "new_valu": [503, 504, 512, 527], "simpli": [503, 512], "cumreduc": 503, "across": [505, 533], "cumfold": 505, "999999": 507, "add_week": 508, "add_dai": 508, "add_second": 508, "add_millisecond": 508, "add_hour": 508, "add_millisec": 508, "ond": 508, "eval": 509, "mathemat": 509, "a_b_doubl": 509, "fstring": 513, "placehold": 513, "hello_": 513, "_world": 513, "foo_": 513, "_bar_": 513, "foo_a_bar_1": 513, "foo_b_bar_2": 513, "foo_c_bar_3": 513, "epoch": [514, 739], "timestep": 514, "1666683077": 514, "1666683099": 514, "39": 514, "12345": [514, 693, 763, 829, 915], "12346": 514, "agg_group": [515, 544], "allow_object": 518, "valueexcept": 518, "test_func": 519, "selector": [520, 523, 533], "favor": [525, 530], "605551": 531, "605551275463989": 531, "my_struct": 532, "q": 532, "isn": 536, "thens": 536, "chain": 536, "sometim": 543, "arcco": [544, 915], "arccosh": [544, 915], "arcsin": [544, 915], "arcsinh": [544, 915], "arctan": [544, 915], "arctanh": [544, 915], "arg_max": [544, 915], "arg_min": [544, 915], "arg_uniqu": [544, 915], "argsort": [544, 915], "backward_fil": 544, "clip_max": [544, 915], "clip_min": [544, 915], "co": [544, 915], "cosh": [544, 915], "cumcount": 544, "cummax": [544, 915], "cummin": [544, 915], "cumprod": [544, 915], "cumulative_ev": [544, 915], "entropi": [544, 915], "ewm_mean": [544, 915], "ewm_std": [544, 915], "ewm_var": [544, 915], "extend_const": [544, 915], "flatten": 544, "inspect": [544, 636], "is_between": [544, 915], "is_finit": [544, 915], "is_first": [544, 915], "is_in": [544, 915], "is_infinit": [544, 915], "is_nan": [544, 915], "is_not_nan": [544, 915], "is_not_nul": [544, 915], "kurtosi": [544, 915], "log10": [544, 915], "map_alia": 544, "map_dict": [544, 915], "nan_max": [544, 915], "nan_min": [544, 915], "pct_chang": [544, 915], "extract_numb": 544, "pow": 544, "reinterpret": [544, 915], "repeat_bi": 544, "rolling_appli": [544, 915], "rolling_median": [544, 915], "rolling_quantil": [544, 915], "rolling_skew": [544, 915], "rolling_std": [544, 915], "rolling_var": [544, 915], "search_sort": [544, 915], "set_sort": [544, 915], "shrink_dtyp": [544, 915], "sin": [544, 915], "sinh": [544, 915], "sort_bi": 544, "tan": [544, 915], "tanh": [544, 915], "to_phys": [544, 915], "top_k": [544, 915], "unique_count": [544, 915], "expos": 553, "registr": 553, "miscellan": 553, "arrowerror": 553, "columnnotfounderror": 553, "invalidoperationerror": 553, "nodataerror": 553, "panicexcept": 553, "schemaerror": 553, "schemafieldnotfounderror": 553, "shapeerror": 553, "build_info": 553, "show_vers": 553, "sqlcontext": [553, 921], "hit": [556, 636], "node": [556, 576, 583, 591, 594, 636], "huge": [559, 636], "saver": [559, 636], "purpos": [566, 636], "influenc": [566, 583, 636], "read_json": [571, 617, 636], "lazygroupbi": [572, 573, 574, 636], "validate_output_schema": [583, 636], "streamabl": [583, 636], "past": [583, 636], "paramount": [583, 636], "hard": [583, 636], "bug": [583, 620, 636], "elig": [583, 636], "ot": [583, 636], "exectut": [583, 636], "invari": [583, 636], "upheld": [583, 636], "prune": [583, 636], "show_plot": [591, 636], "truncate_nod": [591, 636], "figsiz": [591, 600, 636], "gantt": [591, 636], "matplotlib": [591, 600, 636], "plot": [591, 600, 636], "groupby_partit": [591, 636], "470": [591, 636], "475": [591, 636], "1964": [591, 636], "from_json": [593, 636], "swap": [594, 636], "output_path": [600, 636], "raw_output": [600, 636], "figur": [600, 636], "persist": [601, 602, 636], "ram": [601, 602, 636], "slightli": [601, 602, 636], "my_larger_than_ram_fil": [601, 602, 636], "data_pagesize_limit": [602, 636], "290994": [605, 636], "118034": [605, 636], "433013": [605, 636], "1875": [612, 636], "polarsexprtyp": [614, 636], "extern": [615, 636], "df_a": [615, 636], "df_other": [615, 636], "afoo": [615, 636], "cfoo": [615, 636], "train_df": [615, 636], "feature_0": [615, 636], "feature_1": [615, 636], "test_df": [615, 636], "_train": [615, 636], "feature_0_train": [615, 636], "dataframescan": [617, 636], "output_schema": [617, 636], "initialis": 636, "ldf2": 636, "ldf3": 636, "ldf4": 636, "ldf5": 636, "ldf6": 636, "explain": 636, "profil": 636, "sink_ipc": 636, "sink_parquet": 636, "with_context": 636, "sr": [641, 915], "new_aliased_sr": [641, 915], "append_chunk": [644, 915], "super": [644, 915], "141593": [646, 915], "292432": [647, 915], "549306": [651, 915], "listnamespac": [658, 757, 817, 915], "catnamespac": 691, "56789": [693, 763, 829, 915], "901234": [693, 763, 829, 915], "pi": [700, 843, 889, 915], "1232e": [700, 915], "quick": [708, 915], "series_num": [708, 915], "581139": [708, 915], "series_str": [708, 915], "datetimenamespac": 713, "500m": [726, 728, 734, 741], "500000": 726, "2m": 731, "500000000": 734, "date_minus_1y_2mon": 736, "1583020800": 739, "1585699200": 739, "1588291200": 739, "nyc": 739, "edt": 739, "1583038800": 739, "1585717200": 739, "1588309200": 739, "165": [740, 745], "series_equ": [740, 745, 915], "timestamp_u": 744, "978307200000000000": 744, "978393600000000000": 744, "978480000000000000": 744, "005": [751, 915], "06293300616044681": [751, 915], "65": [751, 915], "8568409950394724": [751, 915], "4000000": [752, 915], "814697265625": [752, 915], "stringnamespac": [757, 850, 915], "bitmask": [765, 915], "swiftli": [765, 915], "10734580197236529959": [766, 915], "3022416320763508302": [766, 915], "13756996518000038261": [766, 915], "fall": [770, 915], "2147483648": [794, 915], "iso3166": [795, 915], "tur": [795, 915], "jpn": [795, 915], "nld": [795, 915], "country_lookup": [795, 915], "japan": [795, 915], "t\u00fcrkiy": [795, 915], "netherland": [795, 915], "unrecognis": [795, 915], "unspecifi": [795, 915], "country_nam": [795, 915], "166667": [808, 915], "142857": [808, 915], "512": [808, 915], "peak": [809, 810, 915], "nanstd": [819, 915], "858612": [819, 915], "200": [820, 821, 823, 915], "150": [821, 915], "250": [821, 915], "350": [821, 915], "450": [821, 915], "381802": [825, 915], "dev": [826, 915], "57": [829, 915], "frequent": [833, 834, 915], "mutat": [834, 915], "2246e": [843, 889, 915], "divisor": [849, 904, 915], "6331e16": [889, 915], "lib": [892, 915], "int64arrai": [892, 915], "a_2": [893, 915], "a_3": [893, 915], "zero_copy_onli": [896, 915], "writabl": [896, 915], "view": [896, 915], "presenc": [896, 915], "immut": [896, 915], "made": [896, 915], "127": [902, 915], "seriesview": [905, 915], "arraylik": 915, "dtype_if_empti": 915, "position": 915, "scenario": 915, "through": 915, "chunk_length": 915, "cut": 915, "eq": 915, "ge": 915, "get_chunk": 915, "gt": 915, "has_valid": 915, "is_boolean": 915, "is_float": 915, "is_numer": 915, "is_sort": 915, "is_tempor": 915, "is_utf8": 915, "le": 915, "ne": 915, "new_from_index": 915, "peak_max": 915, "peak_min": 915, "set_at_idx": 915}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [31, 0, 1, "", "DataType"], [32, 0, 1, "", "Date"], [33, 0, 1, "", "Datetime"], [34, 0, 1, "", "Duration"], [35, 0, 1, "", "Float32"], [36, 0, 1, "", "Float64"], [37, 0, 1, "", "Int16"], [38, 0, 1, "", "Int32"], [39, 0, 1, "", "Int64"], [40, 0, 1, "", "Int8"], [41, 0, 1, "", "List"], [42, 0, 1, "", "Null"], [43, 0, 1, "", "Object"], [921, 0, 1, "", "SQLContext"], [47, 0, 1, "", "StringCache"], [48, 0, 1, "", "Struct"], [49, 0, 1, "", "Time"], [50, 0, 1, "", "UInt16"], [51, 0, 1, "", "UInt32"], [52, 0, 1, "", "UInt64"], [53, 0, 1, "", "UInt8"], [54, 0, 1, "", "Unknown"], [55, 0, 1, "", "Utf8"], [56, 4, 1, "", "align_frames"], [490, 4, 1, "", "all"], [491, 4, 1, "", "any"], [492, 4, 1, "", "apply"], [493, 4, 1, "", "arange"], [494, 4, 1, "", "arg_sort_by"], [61, 4, 1, "", "arg_where"], [495, 4, 1, "", "avg"], [62, 4, 1, "", "build_info"], [496, 4, 1, "", "coalesce"], [497, 4, 1, "", "col"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "concat"], [498, 4, 1, "", "concat_list"], [499, 4, 1, "", "concat_str"], [500, 4, 1, "", "corr"], [501, 4, 1, "", "count"], [502, 4, 1, "", "cov"], [503, 4, 1, "", "cumfold"], [504, 4, 1, "", "cumreduce"], [505, 4, 1, "", "cumsum"], [65, 4, 1, "", "cut"], [506, 4, 1, "", "date"], [66, 4, 1, "", "date_range"], [507, 4, 1, "", "datetime"], [508, 4, 1, "", "duration"], [509, 4, 1, "", "element"], [510, 4, 1, "", "exclude"], [511, 4, 1, "", "first"], [512, 4, 1, "", "fold"], [513, 4, 1, "", "format"], [81, 4, 1, "", "from_arrow"], [82, 4, 1, "", "from_dataframe"], [83, 4, 1, "", "from_dict"], [84, 4, 1, "", "from_dicts"], [514, 4, 1, "", "from_epoch"], [85, 4, 1, "", "from_numpy"], [86, 4, 1, "", "from_pandas"], [87, 4, 1, "", "from_records"], [88, 4, 1, "", "get_dummies"], [89, 4, 1, "", "get_idx_type"], [515, 4, 1, "", "groups"], [516, 4, 1, "", "head"], [517, 4, 1, "", "list"], [518, 4, 1, "", "lit"], [519, 4, 1, "", "map"], [520, 4, 1, "", "max"], [521, 4, 1, "", "mean"], [522, 4, 1, "", "median"], [523, 4, 1, "", "min"], [524, 4, 1, "", "n_unique"], [91, 4, 1, "", "ones"], [525, 4, 1, "", "pearson_corr"], [526, 4, 1, "", "quantile"], [92, 4, 1, "", "read_avro"], [93, 4, 1, "", "read_csv"], [94, 4, 1, "", "read_csv_batched"], [95, 4, 1, "", "read_database"], [96, 4, 1, "", "read_delta"], [97, 4, 1, "", "read_excel"], [98, 4, 1, "", "read_ipc"], [99, 4, 1, "", "read_ipc_schema"], [100, 4, 1, "", "read_json"], [101, 4, 1, "", "read_ndjson"], [102, 4, 1, "", "read_parquet"], [103, 4, 1, "", "read_parquet_schema"], [527, 4, 1, "", "reduce"], [528, 4, 1, "", "repeat"], [104, 4, 1, "", "scan_csv"], [105, 4, 1, "", "scan_delta"], [106, 4, 1, "", "scan_ipc"], [107, 4, 1, "", "scan_ndjson"], [108, 4, 1, "", "scan_parquet"], [109, 4, 1, "", "scan_pyarrow_dataset"], [529, 4, 1, "", "select"], [110, 4, 1, "", "show_versions"], [530, 4, 1, "", "spearman_rank_corr"], [531, 4, 1, "", "std"], [532, 4, 1, "", "struct"], [533, 4, 1, "", "sum"], [534, 4, 1, "", "tail"], [117, 4, 1, "", "threadpool_size"], [118, 4, 1, "", "toggle_string_cache"], [535, 4, 1, "", "var"], [536, 4, 1, "", "when"], [119, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[122, 1, 1, "", "__dataframe__"], [123, 1, 1, "", "apply"], [124, 1, 1, "", "clear"], [125, 1, 1, "", "clone"], [126, 2, 1, "", "columns"], [127, 1, 1, "", "corr"], [128, 1, 1, "", "describe"], [129, 1, 1, "", "drop"], [130, 1, 1, "", "drop_in_place"], [131, 1, 1, "", "drop_nulls"], [132, 2, 1, "", "dtypes"], [133, 1, 1, "", "estimated_size"], [134, 1, 1, "", "explode"], [135, 1, 1, "", "extend"], [136, 1, 1, "", "fill_nan"], [137, 1, 1, "", "fill_null"], [138, 1, 1, "", "filter"], [139, 1, 1, "", "find_idx_by_name"], [140, 1, 1, "", "fold"], [141, 1, 1, "", "frame_equal"], [142, 1, 1, "", "get_column"], [143, 1, 1, "", "get_columns"], [144, 1, 1, "", "glimpse"], [145, 1, 1, "", "groupby"], [146, 1, 1, "", "groupby_dynamic"], [147, 1, 1, "", "groupby_rolling"], [148, 1, 1, "", "hash_rows"], [149, 1, 1, "", "head"], [150, 2, 1, "", "height"], [151, 1, 1, "", "hstack"], [152, 1, 1, "", "insert_at_idx"], [153, 1, 1, "", "interpolate"], [154, 1, 1, "", "is_duplicated"], [155, 1, 1, "", "is_empty"], [156, 1, 1, "", "is_unique"], [157, 1, 1, "", "item"], [158, 1, 1, "", "iter_rows"], [159, 1, 1, "", "iter_slices"], [160, 1, 1, "", "join"], [161, 1, 1, "", "join_asof"], [162, 1, 1, "", "lazy"], [163, 1, 1, "", "limit"], [164, 1, 1, "", "max"], [165, 1, 1, "", "mean"], [166, 1, 1, "", "median"], [167, 1, 1, "", "melt"], [168, 1, 1, "", "merge_sorted"], [169, 1, 1, "", "min"], [170, 1, 1, "", "n_chunks"], [171, 1, 1, "", "n_unique"], [172, 1, 1, "", "null_count"], [173, 1, 1, "", "partition_by"], [174, 1, 1, "", "pipe"], [175, 1, 1, "", "pivot"], [176, 1, 1, "", "product"], [177, 1, 1, "", "quantile"], [178, 1, 1, "", "rechunk"], [179, 1, 1, "", "rename"], [180, 1, 1, "", "replace"], [181, 1, 1, "", "replace_at_idx"], [182, 1, 1, "", "reverse"], [183, 1, 1, "", "row"], [184, 1, 1, "", "rows"], [185, 1, 1, "", "sample"], [186, 2, 1, "", "schema"], [187, 1, 1, "", "select"], [188, 2, 1, "", "shape"], [189, 1, 1, "", "shift"], [190, 1, 1, "", "shift_and_fill"], [191, 1, 1, "", "shrink_to_fit"], [192, 1, 1, "", "slice"], [193, 1, 1, "", "sort"], [194, 1, 1, "", "std"], [195, 1, 1, "", "sum"], [196, 1, 1, "", "tail"], [197, 1, 1, "", "take_every"], [198, 1, 1, "", "to_arrow"], [199, 1, 1, "", "to_dict"], [200, 1, 1, "", "to_dicts"], [201, 1, 1, "", "to_dummies"], [202, 1, 1, "", "to_numpy"], [203, 1, 1, "", "to_pandas"], [204, 1, 1, "", "to_series"], [205, 1, 1, "", "to_struct"], [206, 1, 1, "", "transpose"], [207, 1, 1, "", "unique"], [208, 1, 1, "", "unnest"], [209, 1, 1, "", "unstack"], [210, 1, 1, "", "update"], [211, 1, 1, "", "upsample"], [212, 1, 1, "", "var"], [213, 1, 1, "", "vstack"], [214, 2, 1, "", "width"], [215, 1, 1, "", "with_columns"], [216, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_database"], [27, 1, 1, "", "write_ipc"], [28, 1, 1, "", "write_json"], [29, 1, 1, "", "write_ndjson"], [30, 1, 1, "", "write_parquet"]], "polars.DataType": [[31, 1, 1, "", "__init__"]], "polars.Date": [[32, 1, 1, "", "__init__"]], "polars.Datetime": [[33, 1, 1, "", "__init__"]], "polars.Duration": [[34, 1, 1, "", "__init__"]], "polars.Expr": [[244, 1, 1, "", "abs"], [245, 1, 1, "", "agg_groups"], [246, 1, 1, "", "alias"], [247, 1, 1, "", "all"], [248, 1, 1, "", "any"], [249, 1, 1, "", "append"], [250, 1, 1, "", "apply"], [251, 1, 1, "", "arccos"], [252, 1, 1, "", "arccosh"], [253, 1, 1, "", "arcsin"], [254, 1, 1, "", "arcsinh"], [255, 1, 1, "", "arctan"], [256, 1, 1, "", "arctanh"], [257, 1, 1, "", "arg_max"], [258, 1, 1, "", "arg_min"], [259, 1, 1, "", "arg_sort"], [260, 1, 1, "", "arg_true"], [261, 1, 1, "", "arg_unique"], [262, 1, 1, "", "argsort"], [289, 1, 1, "", "backward_fill"], [295, 1, 1, "", "cast"], [297, 1, 1, "", "ceil"], [298, 1, 1, "", "clip"], [299, 1, 1, "", "clip_max"], [300, 1, 1, "", "clip_min"], [301, 1, 1, "", "cos"], [302, 1, 1, "", "cosh"], [303, 1, 1, "", "count"], [304, 1, 1, "", "cumcount"], [305, 1, 1, "", "cummax"], [306, 1, 1, "", "cummin"], [307, 1, 1, "", "cumprod"], [308, 1, 1, "", "cumsum"], [309, 1, 1, "", "cumulative_eval"], [310, 1, 1, "", "diff"], [311, 1, 1, "", "dot"], [312, 1, 1, "", "drop_nans"], [313, 1, 1, "", "drop_nulls"], [346, 1, 1, "", "entropy"], [347, 1, 1, "", "ewm_mean"], [348, 1, 1, "", "ewm_std"], [349, 1, 1, "", "ewm_var"], [350, 1, 1, "", "exclude"], [351, 1, 1, "", "exp"], [352, 1, 1, "", "explode"], [353, 1, 1, "", "extend_constant"], [354, 1, 1, "", "fill_nan"], [355, 1, 1, "", "fill_null"], [356, 1, 1, "", "filter"], [357, 1, 1, "", "first"], [358, 1, 1, "", "flatten"], [359, 1, 1, "", "floor"], [360, 1, 1, "", "forward_fill"], [361, 1, 1, "", "hash"], [362, 1, 1, "", "head"], [363, 1, 1, "", "inspect"], [364, 1, 1, "", "interpolate"], [365, 1, 1, "", "is_between"], [366, 1, 1, "", "is_duplicated"], [367, 1, 1, "", "is_finite"], [368, 1, 1, "", "is_first"], [369, 1, 1, "", "is_in"], [370, 1, 1, "", "is_infinite"], [371, 1, 1, "", "is_nan"], [372, 1, 1, "", "is_not"], [373, 1, 1, "", "is_not_nan"], [374, 1, 1, "", "is_not_null"], [375, 1, 1, "", "is_null"], [376, 1, 1, "", "is_unique"], [377, 1, 1, "", "keep_name"], [378, 1, 1, "", "kurtosis"], [379, 1, 1, "", "last"], [380, 1, 1, "", "len"], [381, 1, 1, "", "limit"], [382, 1, 1, "", "list"], [383, 1, 1, "", "log"], [384, 1, 1, "", "log10"], [385, 1, 1, "", "lower_bound"], [386, 1, 1, "", "map"], [387, 1, 1, "", "map_alias"], [388, 1, 1, "", "map_dict"], [389, 1, 1, "", "max"], [390, 1, 1, "", "mean"], [391, 1, 1, "", "median"], [398, 1, 1, "", "min"], [399, 1, 1, "", "mode"], [400, 1, 1, "", "n_unique"], [401, 1, 1, "", "nan_max"], [402, 1, 1, "", "nan_min"], [403, 1, 1, "", "null_count"], [404, 1, 1, "", "over"], [405, 1, 1, "", "pct_change"], [406, 1, 1, "", "pow"], [407, 1, 1, "", "prefix"], [408, 1, 1, "", "product"], [409, 1, 1, "", "quantile"], [410, 1, 1, "", "rank"], [411, 1, 1, "", "rechunk"], [412, 1, 1, "", "reinterpret"], [413, 1, 1, "", "repeat_by"], [414, 1, 1, "", "reshape"], [415, 1, 1, "", "reverse"], [416, 1, 1, "", "rolling_apply"], [417, 1, 1, "", "rolling_max"], [418, 1, 1, "", "rolling_mean"], [419, 1, 1, "", "rolling_median"], [420, 1, 1, "", "rolling_min"], [421, 1, 1, "", "rolling_quantile"], [422, 1, 1, "", "rolling_skew"], [423, 1, 1, "", "rolling_std"], [424, 1, 1, "", "rolling_sum"], [425, 1, 1, "", "rolling_var"], [426, 1, 1, "", "round"], [427, 1, 1, "", "sample"], [428, 1, 1, "", "search_sorted"], [429, 1, 1, "", "set_sorted"], [430, 1, 1, "", "shift"], [431, 1, 1, "", "shift_and_fill"], [432, 1, 1, "", "shrink_dtype"], [433, 1, 1, "", "shuffle"], [434, 1, 1, "", "sign"], [435, 1, 1, "", "sin"], [436, 1, 1, "", "sinh"], [437, 1, 1, "", "skew"], [438, 1, 1, "", "slice"], [439, 1, 1, "", "sort"], [440, 1, 1, "", "sort_by"], [441, 1, 1, "", "sqrt"], [442, 1, 1, "", "std"], [475, 1, 1, "", "suffix"], [476, 1, 1, "", "sum"], [477, 1, 1, "", "tail"], [478, 1, 1, "", "take"], [479, 1, 1, "", "take_every"], [480, 1, 1, "", "tan"], [481, 1, 1, "", "tanh"], [482, 1, 1, "", "to_physical"], [483, 1, 1, "", "top_k"], [484, 1, 1, "", "unique"], [485, 1, 1, "", "unique_counts"], [486, 1, 1, "", "upper_bound"], [487, 1, 1, "", "value_counts"], [488, 1, 1, "", "var"], [489, 1, 1, "", "where"]], "polars.Expr.arr": [[263, 1, 1, "", "arg_max"], [264, 1, 1, "", "arg_min"], [265, 1, 1, "", "concat"], [266, 1, 1, "", "contains"], [267, 1, 1, "", "count_match"], [268, 1, 1, "", "diff"], [269, 1, 1, "", "eval"], [270, 1, 1, "", "explode"], [271, 1, 1, "", "first"], [272, 1, 1, "", "get"], [273, 1, 1, "", "head"], [274, 1, 1, "", "join"], [275, 1, 1, "", "last"], [276, 1, 1, "", "lengths"], [277, 1, 1, "", "max"], [278, 1, 1, "", "mean"], [279, 1, 1, "", "min"], [280, 1, 1, "", "reverse"], [281, 1, 1, "", "shift"], [282, 1, 1, "", "slice"], [283, 1, 1, "", "sort"], [284, 1, 1, "", "sum"], [285, 1, 1, "", "tail"], [286, 1, 1, "", "take"], [287, 1, 1, "", "to_struct"], [288, 1, 1, "", "unique"]], "polars.Expr.bin": [[290, 1, 1, "", "contains"], [291, 1, 1, "", "decode"], [292, 1, 1, "", "encode"], [293, 1, 1, "", "ends_with"], [294, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[296, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[314, 1, 1, "", "cast_time_unit"], [315, 1, 1, "", "combine"], [316, 1, 1, "", "convert_time_zone"], [317, 1, 1, "", "day"], [318, 1, 1, "", "days"], [319, 1, 1, "", "epoch"], [320, 1, 1, "", "hour"], [321, 1, 1, "", "hours"], [322, 1, 1, "", "iso_year"], [323, 1, 1, "", "microsecond"], [324, 1, 1, "", "microseconds"], [325, 1, 1, "", "millisecond"], [326, 1, 1, "", "milliseconds"], [327, 1, 1, "", "minute"], [328, 1, 1, "", "minutes"], [329, 1, 1, "", "month"], [330, 1, 1, "", "nanosecond"], [331, 1, 1, "", "nanoseconds"], [332, 1, 1, "", "offset_by"], [333, 1, 1, "", "ordinal_day"], [334, 1, 1, "", "quarter"], [335, 1, 1, "", "replace_time_zone"], [336, 1, 1, "", "round"], [337, 1, 1, "", "second"], [338, 1, 1, "", "seconds"], [339, 1, 1, "", "strftime"], [340, 1, 1, "", "timestamp"], [341, 1, 1, "", "truncate"], [342, 1, 1, "", "week"], [343, 1, 1, "", "weekday"], [344, 1, 1, "", "with_time_unit"], [345, 1, 1, "", "year"]], "polars.Expr.meta": [[392, 1, 1, "", "has_multiple_outputs"], [393, 1, 1, "", "is_regex_projection"], [394, 1, 1, "", "output_name"], [395, 1, 1, "", "pop"], [396, 1, 1, "", "root_names"], [397, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[443, 1, 1, "", "concat"], [444, 1, 1, "", "contains"], [445, 1, 1, "", "count_match"], [446, 1, 1, "", "decode"], [447, 1, 1, "", "encode"], [448, 1, 1, "", "ends_with"], [449, 1, 1, "", "explode"], [450, 1, 1, "", "extract"], [451, 1, 1, "", "extract_all"], [452, 1, 1, "", "json_extract"], [453, 1, 1, "", "json_path_match"], [454, 1, 1, "", "lengths"], [455, 1, 1, "", "ljust"], [456, 1, 1, "", "lstrip"], [457, 1, 1, "", "n_chars"], [458, 1, 1, "", "parse_int"], [459, 1, 1, "", "replace"], [460, 1, 1, "", "replace_all"], [461, 1, 1, "", "rjust"], [462, 1, 1, "", "rstrip"], [463, 1, 1, "", "slice"], [464, 1, 1, "", "split"], [465, 1, 1, "", "split_exact"], [466, 1, 1, "", "splitn"], [467, 1, 1, "", "starts_with"], [468, 1, 1, "", "strip"], [469, 1, 1, "", "strptime"], [470, 1, 1, "", "to_lowercase"], [471, 1, 1, "", "to_uppercase"], [472, 1, 1, "", "zfill"]], "polars.Expr.struct": [[473, 1, 1, "", "field"], [474, 1, 1, "", "rename_fields"]], "polars.Float32": [[35, 1, 1, "", "__init__"]], "polars.Float64": [[36, 1, 1, "", "__init__"]], "polars.Int16": [[37, 1, 1, "", "__init__"]], "polars.Int32": [[38, 1, 1, "", "__init__"]], "polars.Int64": [[39, 1, 1, "", "__init__"]], "polars.Int8": [[40, 1, 1, "", "__init__"]], "polars.LazyFrame": [[556, 1, 1, "", "cache"], [557, 1, 1, "", "clear"], [558, 1, 1, "", "clone"], [559, 1, 1, "", "collect"], [560, 2, 1, "", "columns"], [561, 1, 1, "", "drop"], [562, 1, 1, "", "drop_nulls"], [563, 2, 1, "", "dtypes"], [564, 1, 1, "", "explain"], [565, 1, 1, "", "explode"], [566, 1, 1, "", "fetch"], [567, 1, 1, "", "fill_nan"], [568, 1, 1, "", "fill_null"], [569, 1, 1, "", "filter"], [570, 1, 1, "", "first"], [571, 1, 1, "", "from_json"], [572, 1, 1, "", "groupby"], [573, 1, 1, "", "groupby_dynamic"], [574, 1, 1, "", "groupby_rolling"], [575, 1, 1, "", "head"], [576, 1, 1, "", "inspect"], [577, 1, 1, "", "interpolate"], [578, 1, 1, "", "join"], [579, 1, 1, "", "join_asof"], [580, 1, 1, "", "last"], [581, 1, 1, "", "lazy"], [582, 1, 1, "", "limit"], [583, 1, 1, "", "map"], [584, 1, 1, "", "max"], [585, 1, 1, "", "mean"], [586, 1, 1, "", "median"], [587, 1, 1, "", "melt"], [588, 1, 1, "", "merge_sorted"], [589, 1, 1, "", "min"], [590, 1, 1, "", "pipe"], [591, 1, 1, "", "profile"], [592, 1, 1, "", "quantile"], [593, 1, 1, "", "read_json"], [594, 1, 1, "", "rename"], [595, 1, 1, "", "reverse"], [596, 2, 1, "", "schema"], [597, 1, 1, "", "select"], [598, 1, 1, "", "shift"], [599, 1, 1, "", "shift_and_fill"], [600, 1, 1, "", "show_graph"], [601, 1, 1, "", "sink_ipc"], [602, 1, 1, "", "sink_parquet"], [603, 1, 1, "", "slice"], [604, 1, 1, "", "sort"], [605, 1, 1, "", "std"], [606, 1, 1, "", "sum"], [607, 1, 1, "", "tail"], [608, 1, 1, "", "take_every"], [609, 1, 1, "", "unique"], [610, 1, 1, "", "unnest"], [611, 1, 1, "", "update"], [612, 1, 1, "", "var"], [613, 2, 1, "", "width"], [614, 1, 1, "", "with_columns"], [615, 1, 1, "", "with_context"], [616, 1, 1, "", "with_row_count"], [617, 1, 1, "", "write_json"]], "polars.List": [[41, 1, 1, "", "__init__"]], "polars.Null": [[42, 1, 1, "", "__init__"]], "polars.Object": [[43, 1, 1, "", "__init__"]], "polars.SQLContext": [[44, 1, 1, "", "execute"], [45, 1, 1, "", "query"], [46, 1, 1, "", "register"]], "polars.Series": [[640, 1, 1, "", "abs"], [641, 1, 1, "", "alias"], [642, 1, 1, "", "all"], [643, 1, 1, "", "any"], [644, 1, 1, "", "append"], [645, 1, 1, "", "apply"], [646, 1, 1, "", "arccos"], [647, 1, 1, "", "arccosh"], [648, 1, 1, "", "arcsin"], [649, 1, 1, "", "arcsinh"], [650, 1, 1, "", "arctan"], [651, 1, 1, "", "arctanh"], [652, 1, 1, "", "arg_max"], [653, 1, 1, "", "arg_min"], [654, 1, 1, "", "arg_sort"], [655, 1, 1, "", "arg_true"], [656, 1, 1, "", "arg_unique"], [657, 1, 1, "", "argsort"], [658, 3, 1, "", "arr"], [690, 1, 1, "", "cast"], [691, 3, 1, "", "cat"], [693, 1, 1, "", "ceil"], [694, 1, 1, "", "chunk_lengths"], [695, 1, 1, "", "clear"], [696, 1, 1, "", "clip"], [697, 1, 1, "", "clip_max"], [698, 1, 1, "", "clip_min"], [699, 1, 1, "", "clone"], [700, 1, 1, "", "cos"], [701, 1, 1, "", "cosh"], [702, 1, 1, "", "cummax"], [703, 1, 1, "", "cummin"], [704, 1, 1, "", "cumprod"], [705, 1, 1, "", "cumsum"], [706, 1, 1, "", "cumulative_eval"], [707, 1, 1, "", "cut"], [708, 1, 1, "", "describe"], [709, 1, 1, "", "diff"], [710, 1, 1, "", "dot"], [711, 1, 1, "", "drop_nans"], [712, 1, 1, "", "drop_nulls"], [713, 3, 1, "", "dt"], [750, 3, 1, "", "dtype"], [751, 1, 1, "", "entropy"], [752, 1, 1, "", "estimated_size"], [753, 1, 1, "", "ewm_mean"], [754, 1, 1, "", "ewm_std"], [755, 1, 1, "", "ewm_var"], [756, 1, 1, "", "exp"], [757, 1, 1, "", "explode"], [758, 1, 1, "", "extend_constant"], [759, 1, 1, "", "fill_nan"], [760, 1, 1, "", "fill_null"], [761, 1, 1, "", "filter"], [762, 3, 1, "", "flags"], [763, 1, 1, "", "floor"], [764, 1, 1, "", "get_chunks"], [765, 1, 1, "", "has_validity"], [766, 1, 1, "", "hash"], [767, 1, 1, "", "head"], [768, 3, 1, "", "inner_dtype"], [769, 1, 1, "", "interpolate"], [770, 1, 1, "", "is_between"], [771, 1, 1, "", "is_boolean"], [772, 1, 1, "", "is_duplicated"], [773, 1, 1, "", "is_empty"], [774, 1, 1, "", "is_finite"], [775, 1, 1, "", "is_first"], [776, 1, 1, "", "is_float"], [777, 1, 1, "", "is_in"], [778, 1, 1, "", "is_infinite"], [779, 1, 1, "", "is_nan"], [780, 1, 1, "", "is_not_nan"], [781, 1, 1, "", "is_not_null"], [782, 1, 1, "", "is_null"], [783, 1, 1, "", "is_numeric"], [784, 1, 1, "", "is_sorted"], [785, 1, 1, "", "is_temporal"], [786, 1, 1, "", "is_unique"], [787, 1, 1, "", "is_utf8"], [788, 1, 1, "", "item"], [789, 1, 1, "", "kurtosis"], [790, 1, 1, "", "len"], [791, 1, 1, "", "limit"], [792, 1, 1, "", "log"], [793, 1, 1, "", "log10"], [794, 1, 1, "", "lower_bound"], [795, 1, 1, "", "map_dict"], [796, 1, 1, "", "max"], [797, 1, 1, "", "mean"], [798, 1, 1, "", "median"], [799, 1, 1, "", "min"], [800, 1, 1, "", "mode"], [801, 1, 1, "", "n_chunks"], [802, 1, 1, "", "n_unique"], [803, 3, 1, "", "name"], [804, 1, 1, "", "nan_max"], [805, 1, 1, "", "nan_min"], [806, 1, 1, "", "new_from_index"], [807, 1, 1, "", "null_count"], [808, 1, 1, "", "pct_change"], [809, 1, 1, "", "peak_max"], [810, 1, 1, "", "peak_min"], [811, 1, 1, "", "product"], [812, 1, 1, "", "quantile"], [813, 1, 1, "", "rank"], [814, 1, 1, "", "rechunk"], [815, 1, 1, "", "reinterpret"], [816, 1, 1, "", "rename"], [817, 1, 1, "", "reshape"], [818, 1, 1, "", "reverse"], [819, 1, 1, "", "rolling_apply"], [820, 1, 1, "", "rolling_max"], [821, 1, 1, "", "rolling_mean"], [822, 1, 1, "", "rolling_median"], [823, 1, 1, "", "rolling_min"], [824, 1, 1, "", "rolling_quantile"], [825, 1, 1, "", "rolling_skew"], [826, 1, 1, "", "rolling_std"], [827, 1, 1, "", "rolling_sum"], [828, 1, 1, "", "rolling_var"], [829, 1, 1, "", "round"], [830, 1, 1, "", "sample"], [831, 1, 1, "", "search_sorted"], [832, 1, 1, "", "series_equal"], [833, 1, 1, "", "set"], [834, 1, 1, "", "set_at_idx"], [835, 1, 1, "", "set_sorted"], [836, 3, 1, "", "shape"], [837, 1, 1, "", "shift"], [838, 1, 1, "", "shift_and_fill"], [839, 1, 1, "", "shrink_dtype"], [840, 1, 1, "", "shrink_to_fit"], [841, 1, 1, "", "shuffle"], [842, 1, 1, "", "sign"], [843, 1, 1, "", "sin"], [844, 1, 1, "", "sinh"], [845, 1, 1, "", "skew"], [846, 1, 1, "", "slice"], [847, 1, 1, "", "sort"], [848, 1, 1, "", "sqrt"], [849, 1, 1, "", "std"], [850, 3, 1, "", "str"], [885, 1, 1, "", "sum"], [886, 1, 1, "", "tail"], [887, 1, 1, "", "take"], [888, 1, 1, "", "take_every"], [889, 1, 1, "", "tan"], [890, 1, 1, "", "tanh"], [891, 3, 1, "", "time_unit"], [892, 1, 1, "", "to_arrow"], [893, 1, 1, "", "to_dummies"], [894, 1, 1, "", "to_frame"], [895, 1, 1, "", "to_list"], [896, 1, 1, "", "to_numpy"], [897, 1, 1, "", "to_pandas"], [898, 1, 1, "", "to_physical"], [899, 1, 1, "", "top_k"], [900, 1, 1, "", "unique"], [901, 1, 1, "", "unique_counts"], [902, 1, 1, "", "upper_bound"], [903, 1, 1, "", "value_counts"], [904, 1, 1, "", "var"], [905, 1, 1, "", "view"], [906, 1, 1, "", "zip_with"]], "polars.Series.arr": [[659, 1, 1, "", "arg_max"], [660, 1, 1, "", "arg_min"], [661, 1, 1, "", "concat"], [662, 1, 1, "", "contains"], [663, 1, 1, "", "count_match"], [664, 1, 1, "", "diff"], [665, 1, 1, "", "eval"], [666, 1, 1, "", "explode"], [667, 1, 1, "", "first"], [668, 1, 1, "", "get"], [669, 1, 1, "", "head"], [670, 1, 1, "", "join"], [671, 1, 1, "", "last"], [672, 1, 1, "", "lengths"], [673, 1, 1, "", "max"], [674, 1, 1, "", "mean"], [675, 1, 1, "", "min"], [676, 1, 1, "", "reverse"], [677, 1, 1, "", "shift"], [678, 1, 1, "", "slice"], [679, 1, 1, "", "sort"], [680, 1, 1, "", "sum"], [681, 1, 1, "", "tail"], [682, 1, 1, "", "take"], [683, 1, 1, "", "to_struct"], [684, 1, 1, "", "unique"]], "polars.Series.bin": [[685, 1, 1, "", "contains"], [686, 1, 1, "", "decode"], [687, 1, 1, "", "encode"], [688, 1, 1, "", "ends_with"], [689, 1, 1, "", "starts_with"]], "polars.Series.cat": [[692, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[714, 1, 1, "", "cast_time_unit"], [715, 1, 1, "", "combine"], [716, 1, 1, "", "convert_time_zone"], [717, 1, 1, "", "day"], [718, 1, 1, "", "days"], [719, 1, 1, "", "epoch"], [720, 1, 1, "", "hour"], [721, 1, 1, "", "hours"], [722, 1, 1, "", "iso_year"], [723, 1, 1, "", "max"], [724, 1, 1, "", "mean"], [725, 1, 1, "", "median"], [726, 1, 1, "", "microsecond"], [727, 1, 1, "", "microseconds"], [728, 1, 1, "", "millisecond"], [729, 1, 1, "", "milliseconds"], [730, 1, 1, "", "min"], [731, 1, 1, "", "minute"], [732, 1, 1, "", "minutes"], [733, 1, 1, "", "month"], [734, 1, 1, "", "nanosecond"], [735, 1, 1, "", "nanoseconds"], [736, 1, 1, "", "offset_by"], [737, 1, 1, "", "ordinal_day"], [738, 1, 1, "", "quarter"], [739, 1, 1, "", "replace_time_zone"], [740, 1, 1, "", "round"], [741, 1, 1, "", "second"], [742, 1, 1, "", "seconds"], [743, 1, 1, "", "strftime"], [744, 1, 1, "", "timestamp"], [745, 1, 1, "", "truncate"], [746, 1, 1, "", "week"], [747, 1, 1, "", "weekday"], [748, 1, 1, "", "with_time_unit"], [749, 1, 1, "", "year"]], "polars.Series.str": [[851, 1, 1, "", "concat"], [852, 1, 1, "", "contains"], [853, 1, 1, "", "count_match"], [854, 1, 1, "", "decode"], [855, 1, 1, "", "encode"], [856, 1, 1, "", "ends_with"], [857, 1, 1, "", "explode"], [858, 1, 1, "", "extract"], [859, 1, 1, "", "extract_all"], [860, 1, 1, "", "json_extract"], [861, 1, 1, "", "json_path_match"], [862, 1, 1, "", "lengths"], [863, 1, 1, "", "ljust"], [864, 1, 1, "", "lstrip"], [865, 1, 1, "", "n_chars"], [866, 1, 1, "", "parse_int"], [867, 1, 1, "", "replace"], [868, 1, 1, "", "replace_all"], [869, 1, 1, "", "rjust"], [870, 1, 1, "", "rstrip"], [871, 1, 1, "", "slice"], [872, 1, 1, "", "split"], [873, 1, 1, "", "split_exact"], [874, 1, 1, "", "splitn"], [875, 1, 1, "", "starts_with"], [876, 1, 1, "", "strip"], [877, 1, 1, "", "strptime"], [878, 1, 1, "", "to_lowercase"], [879, 1, 1, "", "to_uppercase"], [880, 1, 1, "", "zfill"]], "polars.Series.struct": [[881, 1, 1, "", "field"], [882, 3, 1, "", "fields"], [883, 1, 1, "", "rename_fields"], [884, 1, 1, "", "unnest"]], "polars.StringCache": [[47, 1, 1, "", "__init__"]], "polars.Struct": [[48, 1, 1, "", "__init__"]], "polars.Time": [[49, 1, 1, "", "__init__"]], "polars.UInt16": [[50, 1, 1, "", "__init__"]], "polars.UInt32": [[51, 1, 1, "", "__init__"]], "polars.UInt64": [[52, 1, 1, "", "__init__"]], "polars.UInt8": [[53, 1, 1, "", "__init__"]], "polars.Unknown": [[54, 1, 1, "", "__init__"]], "polars.Utf8": [[55, 1, 1, "", "__init__"]], "polars.api": [[57, 4, 1, "", "register_dataframe_namespace"], [58, 4, 1, "", "register_expr_namespace"], [59, 4, 1, "", "register_lazyframe_namespace"], [60, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[67, 5, 1, "", "ArrowError"], [68, 5, 1, "", "ColumnNotFoundError"], [69, 5, 1, "", "ComputeError"], [70, 5, 1, "", "DuplicateError"], [71, 5, 1, "", "InvalidOperationError"], [72, 5, 1, "", "NoDataError"], [73, 5, 1, "", "NoRowsReturned"], [74, 5, 1, "", "PanicException"], [75, 5, 1, "", "RowsException"], [76, 5, 1, "", "SchemaError"], [77, 5, 1, "", "SchemaFieldNotFoundError"], [78, 5, 1, "", "ShapeError"], [79, 5, 1, "", "StructFieldNotFoundError"], [80, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[90, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[217, 1, 1, "", "__iter__"], [218, 1, 1, "", "agg"], [219, 1, 1, "", "all"], [220, 1, 1, "", "apply"], [221, 1, 1, "", "count"], [222, 1, 1, "", "first"], [223, 1, 1, "", "head"], [224, 1, 1, "", "last"], [225, 1, 1, "", "max"], [226, 1, 1, "", "mean"], [227, 1, 1, "", "median"], [228, 1, 1, "", "min"], [229, 1, 1, "", "n_unique"], [230, 1, 1, "", "quantile"], [231, 1, 1, "", "sum"], [232, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[618, 1, 1, "", "agg"], [619, 1, 1, "", "all"], [620, 1, 1, "", "apply"], [621, 1, 1, "", "count"], [622, 1, 1, "", "first"], [623, 1, 1, "", "head"], [624, 1, 1, "", "last"], [625, 1, 1, "", "max"], [626, 1, 1, "", "mean"], [627, 1, 1, "", "median"], [628, 1, 1, "", "min"], [629, 1, 1, "", "n_unique"], [630, 1, 1, "", "quantile"], [631, 1, 1, "", "sum"], [632, 1, 1, "", "tail"]], "polars.testing": [[111, 4, 1, "", "assert_frame_equal"], [112, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[113, 0, 1, "", "column"], [114, 4, 1, "", "columns"], [115, 4, 1, "", "dataframes"], [116, 4, 1, "", "series"]], "polars.testing.parametric.column": [[113, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 135], "api": [1, 57, 58, 59, 60, 553], "provid": 1, "new": 1, "function": [1, 241, 543, 552], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906], "binari": [2, 538, 909], "boolean": [3, 539, 910], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 120], "load": [5, 120], "restore_default": 6, "save": [7, 120], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 120], "datafram": [24, 25, 26, 27, 28, 29, 30, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238], "write_avro": 24, "write_csv": 25, "write_databas": 26, "write_ipc": 27, "write_json": [28, 617], "write_ndjson": 29, "write_parquet": 30, "datatyp": 31, "date": [32, 241, 506], "datetim": [33, 507], "durat": [34, 508], "float32": 35, "float64": 36, "int16": 37, "int32": 38, "int64": 39, "int8": 40, "list": [41, 382, 517], "null": 42, "object": 43, "sqlcontext": [44, 45, 46], "execut": 44, "queri": 45, "regist": 46, "stringcach": [47, 552], "struct": [48, 473, 474, 532, 549, 881, 882, 883, 884, 919], "time": [49, 241], "uint16": 50, "uint32": 51, "uint64": 52, "uint8": 53, "unknown": 54, "utf8": 55, "align_fram": 56, "register_dataframe_namespac": 57, "register_expr_namespac": 58, "register_lazyframe_namespac": 59, "register_series_namespac": 60, "arg_wher": 61, "build_info": 62, "collect_al": 63, "concat": [64, 265, 443, 661, 851], "cut": [65, 707], "date_rang": 66, "except": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 242], "arrowerror": 67, "columnnotfounderror": 68, "computeerror": 69, "duplicateerror": 70, "invalidoperationerror": 71, "nodataerror": 72, "norowsreturn": 73, "panicexcept": 74, "rowsexcept": 75, "schemaerror": 76, "schemafieldnotfounderror": 77, "shapeerror": 78, "structfieldnotfounderror": 79, "toomanyrowsreturn": 80, "from_arrow": 81, "from_datafram": 82, "from_dict": [83, 84], "from_numpi": 85, "from_panda": 86, "from_record": 87, "get_dummi": 88, "get_idx_typ": 89, "intern": [90, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632], "batch": 90, "batchedcsvread": [90, 554], "next_batch": 90, "ones": 91, "read_avro": 92, "read_csv": 93, "read_csv_batch": 94, "read_databas": 95, "read_delta": 96, "read_excel": 97, "read_ipc": 98, "read_ipc_schema": 99, "read_json": [100, 593], "read_ndjson": 101, "read_parquet": 102, "read_parquet_schema": 103, "scan_csv": 104, "scan_delta": 105, "scan_ipc": 106, "scan_ndjson": 107, "scan_parquet": 108, "scan_pyarrow_dataset": 109, "show_vers": 110, "test": [111, 112, 113, 114, 115, 116, 922], "assert_frame_equ": 111, "assert_series_equ": 112, "parametr": [113, 114, 115, 116], "column": [113, 114, 126, 541, 560], "seri": [116, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 915], "threadpool_s": 117, "toggle_string_cach": 118, "zero": 119, "option": 120, "current": 120, "us": 120, "context": 120, "manag": 120, "aggreg": [121, 243, 555, 639], "__dataframe__": 122, "appli": [123, 220, 250, 492, 620, 645], "clear": [124, 557, 695], "clone": [125, 558, 699], "corr": [127, 500], "describ": [128, 708], "drop": [129, 561], "drop_in_plac": 130, "drop_nul": [131, 313, 562, 712], "dtype": [132, 563, 750], "estimated_s": [133, 752], "explod": [134, 270, 352, 449, 565, 666, 757, 857], "fill_nan": [136, 354, 567, 759], "fill_nul": [137, 355, 568, 760], "filter": [138, 356, 569, 761], "find_idx_by_nam": 139, "fold": [140, 512], "frame_equ": 141, "get_column": [142, 143], "glimps": 144, "groupbi": [145, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 572, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635], "groupby_dynam": [146, 573], "groupby_rol": [147, 574], "hash_row": 148, "head": [149, 223, 273, 362, 516, 575, 623, 669, 767], "height": 150, "hstack": 151, "insert_at_idx": 152, "interpol": [153, 364, 577, 769], "is_dupl": [154, 366, 772], "is_empti": [155, 773], "is_uniqu": [156, 376, 786], "item": [157, 788], "iter_row": 158, "iter_slic": 159, "join": [160, 274, 578, 670], "join_asof": [161, 579], "lazi": [162, 552, 581], "limit": [163, 381, 582, 791], "max": [164, 225, 277, 389, 520, 584, 625, 673, 723, 796], "mean": [165, 226, 278, 390, 521, 585, 626, 674, 724, 797], "median": [166, 227, 391, 522, 586, 627, 725, 798], "melt": [167, 587], "merge_sort": [168, 588], "min": [169, 228, 279, 398, 523, 589, 628, 675, 730, 799], "n_chunk": [170, 801], "n_uniqu": [171, 229, 400, 524, 629, 802], "null_count": [172, 403, 807], "partition_bi": 173, "pipe": [174, 590], "pivot": 175, "product": [176, 408, 811], "quantil": [177, 230, 409, 526, 592, 630, 812], "rechunk": [178, 411, 814], "renam": [179, 594, 816], "replac": [180, 459, 867], "replace_at_idx": 181, "revers": [182, 280, 415, 595, 676, 818], "row": [183, 184], "sampl": [185, 427, 830], "schema": [186, 596], "select": [187, 240, 529, 547, 597, 638, 917], "shape": [188, 836], "shift": [189, 281, 430, 598, 677, 837], "shift_and_fil": [190, 431, 599, 838], "shrink_to_fit": [191, 840], "slice": [192, 282, 438, 463, 603, 678, 846, 871], "sort": [193, 283, 439, 604, 679, 847], "std": [194, 442, 531, 605, 849], "sum": [195, 231, 284, 476, 533, 606, 631, 680, 885], "tail": [196, 232, 285, 477, 534, 607, 632, 681, 886], "take_everi": [197, 479, 608, 888], "to_arrow": [198, 892], "to_dict": [199, 200], "to_dummi": [201, 893], "to_numpi": [202, 896], "to_panda": [203, 897], "to_seri": 204, "to_struct": [205, 287, 683], "transpos": 206, "uniqu": [207, 288, 484, 609, 684, 900], "unnest": [208, 610, 884], "unstack": 209, "updat": [210, 611], "upsampl": 211, "var": [212, 488, 535, 612, 904], "vstack": 213, "width": [214, 613], "with_column": [215, 614], "with_row_count": [216, 616], "__iter__": 217, "agg": [218, 618], "all": [219, 247, 490, 619, 642], "count": [221, 303, 501, 621], "first": [222, 271, 357, 511, 570, 622, 667], "last": [224, 275, 379, 580, 624, 671], "attribut": [233, 633, 908], "comput": [234, 542, 912], "descript": [235, 634, 913], "export": [236, 914], "miscellan": [239, 546, 552, 637, 916], "manipul": [240, 547, 638, 917], "data": 241, "type": 241, "numer": 241, "nest": 241, "other": 241, "expr": [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489], "ab": [244, 640], "agg_group": 245, "alia": [246, 641], "ani": [248, 491, 643], "append": [249, 644], "arcco": [251, 646], "arccosh": [252, 647], "arcsin": [253, 648], "arcsinh": [254, 649], "arctan": [255, 650], "arctanh": [256, 651], "arg_max": [257, 263, 652, 659], "arg_min": [258, 264, 653, 660], "arg_sort": [259, 654], "arg_tru": [260, 655], "arg_uniqu": [261, 656], "argsort": [262, 657], "arr": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684], "contain": [266, 290, 444, 662, 685, 852], "count_match": [267, 445, 663, 853], "diff": [268, 310, 664, 709], "eval": [269, 665], "get": [272, 668], "length": [276, 454, 672, 862], "take": [286, 478, 682, 887], "backward_fil": 289, "bin": [290, 291, 292, 293, 294, 685, 686, 687, 688, 689], "decod": [291, 446, 686, 854], "encod": [292, 447, 687, 855], "ends_with": [293, 448, 688, 856], "starts_with": [294, 467, 689, 875], "cast": [295, 690], "cat": [296, 691, 692], "set_ord": [296, 692], "ceil": [297, 693], "clip": [298, 696], "clip_max": [299, 697], "clip_min": [300, 698], "co": [301, 700], "cosh": [302, 701], "cumcount": 304, "cummax": [305, 702], "cummin": [306, 703], "cumprod": [307, 704], "cumsum": [308, 505, 705], "cumulative_ev": [309, 706], "dot": [311, 710], "drop_nan": [312, 711], "dt": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749], "cast_time_unit": [314, 714], "combin": [315, 715], "convert_time_zon": [316, 716], "dai": [317, 318, 717, 718], "epoch": [319, 719], "hour": [320, 321, 720, 721], "iso_year": [322, 722], "microsecond": [323, 324, 726, 727], "millisecond": [325, 326, 728, 729], "minut": [327, 328, 731, 732], "month": [329, 733], "nanosecond": [330, 331, 734, 735], "offset_bi": [332, 736], "ordinal_dai": [333, 737], "quarter": [334, 738], "replace_time_zon": [335, 739], "round": [336, 426, 740, 829], "second": [337, 338, 741, 742], "strftime": [339, 743], "timestamp": [340, 744], "truncat": [341, 745], "week": [342, 746], "weekdai": [343, 747], "with_time_unit": [344, 748], "year": [345, 749], "entropi": [346, 751], "ewm_mean": [347, 753], "ewm_std": [348, 754], "ewm_var": [349, 755], "exclud": [350, 510], "exp": [351, 756], "extend_const": [353, 758], "flatten": 358, "floor": [359, 763], "forward_fil": 360, "hash": [361, 766], "inspect": [363, 576], "is_between": [365, 770], "is_finit": [367, 774], "is_first": [368, 775], "is_in": [369, 777], "is_infinit": [370, 778], "is_nan": [371, 779], "is_not": 372, "is_not_nan": [373, 780], "is_not_nul": [374, 781], "is_nul": [375, 782], "keep_nam": 377, "kurtosi": [378, 789], "len": [380, 790], "log": [383, 792], "log10": [384, 793], "lower_bound": [385, 794], "map": [386, 519, 583], "map_alia": 387, "map_dict": [388, 795], "meta": [392, 393, 394, 395, 396, 397, 545], "has_multiple_output": 392, "is_regex_project": 393, "output_nam": 394, "pop": 395, "root_nam": 396, "undo_alias": 397, "mode": [399, 800], "nan_max": [401, 804], "nan_min": [402, 805], "over": 404, "pct_chang": [405, 808], "pow": 406, "prefix": 407, "rank": [410, 813], "reinterpret": [412, 815], "repeat_bi": 413, "reshap": [414, 817], "rolling_appli": [416, 819], "rolling_max": [417, 820], "rolling_mean": [418, 821], "rolling_median": [419, 822], "rolling_min": [420, 823], "rolling_quantil": [421, 824], "rolling_skew": [422, 825], "rolling_std": [423, 826], "rolling_sum": [424, 827], "rolling_var": [425, 828], "search_sort": [428, 831], "set_sort": [429, 835], "shrink_dtyp": [432, 839], "shuffl": [433, 841], "sign": [434, 842], "sin": [435, 843], "sinh": [436, 844], "skew": [437, 845], "sort_bi": 440, "sqrt": [441, 848], "str": [443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "extract": [450, 858], "extract_al": [451, 859], "json_extract": [452, 860], "json_path_match": [453, 861], "ljust": [455, 863], "lstrip": [456, 864], "n_char": [457, 865], "parse_int": [458, 866], "replace_al": [460, 868], "rjust": [461, 869], "rstrip": [462, 870], "split": [464, 872], "split_exact": [465, 873], "splitn": [466, 874], "strip": [468, 876], "strptime": [469, 877], "to_lowercas": [470, 878], "to_uppercas": [471, 879], "zfill": [472, 880], "field": [473, 881, 882], "rename_field": [474, 883], "suffix": 475, "tan": [480, 889], "tanh": [481, 890], "to_phys": [482, 898], "top_k": [483, 899], "unique_count": [485, 901], "upper_bound": [486, 902], "value_count": [487, 903], "where": 489, "arang": 493, "arg_sort_bi": 494, "avg": 495, "coalesc": 496, "col": 497, "concat_list": 498, "concat_str": 499, "cov": 502, "cumfold": 503, "cumreduc": 504, "element": 509, "format": 513, "from_epoch": 514, "group": 515, "lit": 518, "pearson_corr": 525, "reduc": 527, "repeat": 528, "spearman_rank_corr": 530, "when": 536, "arrai": [537, 907], "categori": [540, 911], "name": [541, 803], "express": 544, "string": [548, 918], "tempor": [550, 920], "window": 551, "convers": 552, "eager": 552, "parallel": 552, "refer": 553, "input": 554, "output": 554, "csv": 554, "feather": 554, "ipc": 554, "parquet": 554, "databas": 554, "json": 554, "avro": 554, "excel": 554, "delta": 554, "lake": 554, "dataset": 554, "lazyfram": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636], "cach": 556, "collect": 559, "explain": 564, "fetch": 566, "from_json": 571, "profil": 591, "show_graph": 600, "sink_ipc": 601, "sink_parquet": 602, "with_context": 615, "lazygroupbi": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632], "read": 637, "write": 637, "logic": 637, "plan": 637, "chunk_length": 694, "flag": 762, "get_chunk": 764, "has_valid": 765, "inner_dtyp": 768, "is_boolean": 771, "is_float": 776, "is_numer": 783, "is_sort": 784, "is_tempor": 785, "is_utf8": 787, "new_from_index": 806, "peak_max": 809, "peak_min": 810, "series_equ": 832, "set": 833, "set_at_idx": 834, "time_unit": 891, "to_fram": 894, "to_list": 895, "view": 905, "zip_with": 906, "sql": 921, "method": 921, "assert": 922, "properti": 922, "base": 922, "strategi": 922, "helper": 922, "util": 923}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.TooManyRowsReturned": [[80, "polars-exceptions-toomanyrowsreturned"]], "polars.from_numpy": [[85, "polars-from-numpy"]], "polars.threadpool_size": [[117, "polars-threadpool-size"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[90, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.read_excel": [[97, "polars-read-excel"]], "polars.DataFrame.drop_in_place": [[130, "polars-dataframe-drop-in-place"]], "polars.get_idx_type": [[89, "polars-get-idx-type"]], "polars.exceptions.DuplicateError": [[70, "polars-exceptions-duplicateerror"]], "polars.exceptions.ArrowError": [[67, "polars-exceptions-arrowerror"]], "Config": [[120, "config"]], "Config options": [[120, "config-options"]], "Config load, save, and current state": [[120, "config-load-save-and-current-state"]], "Use as a context manager": [[120, "use-as-a-context-manager"]], "polars.from_dicts": [[84, "polars-from-dicts"]], "polars.DataFrame.describe": [[128, "polars-dataframe-describe"]], "polars.exceptions.ColumnNotFoundError": [[68, "polars-exceptions-columnnotfounderror"]], "polars.from_pandas": [[86, "polars-from-pandas"]], "polars.exceptions.SchemaFieldNotFoundError": [[77, "polars-exceptions-schemafieldnotfounderror"]], "polars.ones": [[91, "polars-ones"]], "polars.testing.parametric.columns": [[114, "polars-testing-parametric-columns"]], "polars.read_csv_batched": [[94, "polars-read-csv-batched"]], "polars.exceptions.RowsException": [[75, "polars-exceptions-rowsexception"]], "polars.exceptions.StructFieldNotFoundError": [[79, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.drop": [[129, "polars-dataframe-drop"]], "polars.read_parquet_schema": [[103, "polars-read-parquet-schema"]], "polars.read_parquet": [[102, "polars-read-parquet"]], "polars.get_dummies": [[88, "polars-get-dummies"]], "polars.exceptions.ShapeError": [[78, "polars-exceptions-shapeerror"]], "polars.from_dict": [[83, "polars-from-dict"]], "polars.exceptions.NoDataError": [[72, "polars-exceptions-nodataerror"]], "polars.scan_delta": [[105, "polars-scan-delta"]], "polars.read_json": [[100, "polars-read-json"]], "polars.testing.parametric.series": [[116, "polars-testing-parametric-series"]], "polars.read_csv": [[93, "polars-read-csv"]], "polars.read_ndjson": [[101, "polars-read-ndjson"]], "polars.scan_ndjson": [[107, "polars-scan-ndjson"]], "polars.testing.parametric.dataframes": [[115, "polars-testing-parametric-dataframes"]], "polars.DataFrame.corr": [[127, "polars-dataframe-corr"]], "Aggregation": [[121, "aggregation"], [639, "aggregation"], [555, "aggregation"], [243, "aggregation"]], "polars.testing.assert_series_equal": [[112, "polars-testing-assert-series-equal"]], "polars.read_database": [[95, "polars-read-database"]], "polars.read_ipc_schema": [[99, "polars-read-ipc-schema"]], "polars.exceptions.InvalidOperationError": [[71, "polars-exceptions-invalidoperationerror"]], "polars.scan_pyarrow_dataset": [[109, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.apply": [[123, "polars-dataframe-apply"]], "polars.DataFrame.columns": [[126, "polars-dataframe-columns"]], "polars.from_dataframe": [[82, "polars-from-dataframe"]], "polars.read_ipc": [[98, "polars-read-ipc"]], "polars.exceptions.SchemaError": [[76, "polars-exceptions-schemaerror"]], "polars.DataFrame.clone": [[125, "polars-dataframe-clone"]], "polars.DataFrame.estimated_size": [[133, "polars-dataframe-estimated-size"]], "polars.DataFrame.clear": [[124, "polars-dataframe-clear"]], "polars.toggle_string_cache": [[118, "polars-toggle-string-cache"]], "polars.exceptions.ComputeError": [[69, "polars-exceptions-computeerror"]], "polars.from_records": [[87, "polars-from-records"]], "polars.DataFrame.dtypes": [[132, "polars-dataframe-dtypes"]], "polars.from_arrow": [[81, "polars-from-arrow"]], "polars.testing.parametric.column": [[113, "polars-testing-parametric-column"]], "polars.read_avro": [[92, "polars-read-avro"]], "polars.scan_ipc": [[106, "polars-scan-ipc"]], "polars.exceptions.PanicException": [[74, "polars-exceptions-panicexception"]], "polars.DataFrame.drop_nulls": [[131, "polars-dataframe-drop-nulls"]], "polars.exceptions.NoRowsReturned": [[73, "polars-exceptions-norowsreturned"]], "polars.DataFrame.__dataframe__": [[122, "polars-dataframe-dataframe"]], "polars.scan_csv": [[104, "polars-scan-csv"]], "polars.show_versions": [[110, "polars-show-versions"]], "polars.read_delta": [[96, "polars-read-delta"]], "polars.testing.assert_frame_equal": [[111, "polars-testing-assert-frame-equal"]], "polars.zeros": [[119, "polars-zeros"]], "polars.scan_parquet": [[108, "polars-scan-parquet"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.api.register_lazyframe_namespace": [[59, "polars-api-register-lazyframe-namespace"]], "polars.UInt8": [[53, "polars-uint8"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.Int64": [[39, "polars-int64"]], "polars.Duration": [[34, "polars-duration"]], "polars.Struct": [[48, "polars-struct"]], "polars.arg_where": [[61, "polars-arg-where"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.date_range": [[66, "polars-date-range"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.DataType": [[31, "polars-datatype"]], "polars.StringCache": [[47, "polars-stringcache"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.api.register_dataframe_namespace": [[57, "polars-api-register-dataframe-namespace"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.DataFrame.write_ipc": [[27, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[28, "polars-dataframe-write-json"]], "polars.Unknown": [[54, "polars-unknown"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Float32": [[35, "polars-float32"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Utf8": [[55, "polars-utf8"]], "polars.DataFrame.write_database": [[26, "polars-dataframe-write-database"]], "polars.align_frames": [[56, "polars-align-frames"]], "polars.UInt16": [[50, "polars-uint16"]], "polars.build_info": [[62, "polars-build-info"]], "polars.Time": [[49, "polars-time"]], "polars.Config.state": [[23, "polars-config-state"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_parquet": [[30, "polars-dataframe-write-parquet"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ndjson": [[29, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.Float64": [[36, "polars-float64"]], "polars.UInt32": [[51, "polars-uint32"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.Null": [[42, "polars-null"]], "polars.SQLContext.query": [[45, "polars-sqlcontext-query"]], "polars.Date": [[32, "polars-date"]], "polars.UInt64": [[52, "polars-uint64"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.collect_all": [[63, "polars-collect-all"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.api.register_series_namespace": [[60, "polars-api-register-series-namespace"]], "polars.cut": [[65, "polars-cut"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.Object": [[43, "polars-object"]], "polars.api.register_expr_namespace": [[58, "polars-api-register-expr-namespace"]], "polars.Int32": [[38, "polars-int32"]], "polars.Datetime": [[33, "polars-datetime"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.Int8": [[40, "polars-int8"]], "polars.SQLContext.execute": [[44, "polars-sqlcontext-execute"]], "polars.concat": [[64, "polars-concat"]], "polars.List": [[41, "polars-list"]], "polars.SQLContext.register": [[46, "polars-sqlcontext-register"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Int16": [[37, "polars-int16"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.Series.str.contains": [[852, "polars-series-str-contains"]], "polars.Series.skew": [[845, "polars-series-skew"]], "polars.Series.search_sorted": [[831, "polars-series-search-sorted"]], "polars.Series.set": [[833, "polars-series-set"]], "polars.Series.shape": [[836, "polars-series-shape"]], "polars.Series.reinterpret": [[815, "polars-series-reinterpret"]], "polars.Series.nan_max": [[804, "polars-series-nan-max"]], "polars.Series.peak_min": [[810, "polars-series-peak-min"]], "polars.Series.str.n_chars": [[865, "polars-series-str-n-chars"]], "polars.Series.str.parse_int": [[866, "polars-series-str-parse-int"]], "polars.Series.str.json_path_match": [[861, "polars-series-str-json-path-match"]], "polars.Series.str": [[850, "polars-series-str"]], "polars.Series.str.replace": [[867, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[868, "polars-series-str-replace-all"]], "polars.Series.rolling_median": [[822, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[823, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[824, "polars-series-rolling-quantile"]], "polars.Series.rechunk": [[814, "polars-series-rechunk"]], "polars.Series.shift": [[837, "polars-series-shift"]], "polars.Series.rolling_var": [[828, "polars-series-rolling-var"]], "polars.Series.sample": [[830, "polars-series-sample"]], "polars.Series.str.lstrip": [[864, "polars-series-str-lstrip"]], "polars.Series.rolling_max": [[820, "polars-series-rolling-max"]], "polars.Series.peak_max": [[809, "polars-series-peak-max"]], "polars.Series.str.extract_all": [[859, "polars-series-str-extract-all"]], "polars.Series.rolling_apply": [[819, "polars-series-rolling-apply"]], "polars.Series.new_from_index": [[806, "polars-series-new-from-index"]], "polars.Series.std": [[849, "polars-series-std"]], "polars.Series.set_at_idx": [[834, "polars-series-set-at-idx"]], "polars.Series.rolling_skew": [[825, "polars-series-rolling-skew"]], "polars.Series.str.concat": [[851, "polars-series-str-concat"]], "polars.Series.round": [[829, "polars-series-round"]], "polars.Series.series_equal": [[832, "polars-series-series-equal"]], "polars.Series.str.ends_with": [[856, "polars-series-str-ends-with"]], "polars.Series.shrink_dtype": [[839, "polars-series-shrink-dtype"]], "polars.Series.str.encode": [[855, "polars-series-str-encode"]], "polars.Series.shift_and_fill": [[838, "polars-series-shift-and-fill"]], "polars.Series.str.count_match": [[853, "polars-series-str-count-match"]], "polars.Series.sinh": [[844, "polars-series-sinh"]], "polars.Series.sign": [[842, "polars-series-sign"]], "polars.Series.str.rstrip": [[870, "polars-series-str-rstrip"]], "polars.Series.shuffle": [[841, "polars-series-shuffle"]], "polars.Series.rank": [[813, "polars-series-rank"]], "polars.Series.reverse": [[818, "polars-series-reverse"]], "polars.Series.rolling_mean": [[821, "polars-series-rolling-mean"]], "polars.Series.rename": [[816, "polars-series-rename"]], "polars.Series.pct_change": [[808, "polars-series-pct-change"]], "polars.Series.sin": [[843, "polars-series-sin"]], "polars.Series.product": [[811, "polars-series-product"]], "polars.Series.str.lengths": [[862, "polars-series-str-lengths"]], "polars.Series.nan_min": [[805, "polars-series-nan-min"]], "polars.Series.sort": [[847, "polars-series-sort"]], "polars.Series.str.decode": [[854, "polars-series-str-decode"]], "polars.Series.str.json_extract": [[860, "polars-series-str-json-extract"]], "polars.Series.str.ljust": [[863, "polars-series-str-ljust"]], "polars.Series.null_count": [[807, "polars-series-null-count"]], "polars.Series.str.extract": [[858, "polars-series-str-extract"]], "polars.Series.rolling_std": [[826, "polars-series-rolling-std"]], "polars.Series.set_sorted": [[835, "polars-series-set-sorted"]], "polars.Series.shrink_to_fit": [[840, "polars-series-shrink-to-fit"]], "polars.Series.str.explode": [[857, "polars-series-str-explode"]], "polars.Series.slice": [[846, "polars-series-slice"]], "polars.Series.reshape": [[817, "polars-series-reshape"]], "polars.Series.rolling_sum": [[827, "polars-series-rolling-sum"]], "polars.Series.quantile": [[812, "polars-series-quantile"]], "polars.Series.sqrt": [[848, "polars-series-sqrt"]], "polars.Series.str.rjust": [[869, "polars-series-str-rjust"]], "polars.Series.flags": [[762, "polars-series-flags"]], "polars.Series.mode": [[800, "polars-series-mode"]], "polars.Series.n_unique": [[802, "polars-series-n-unique"]], "polars.Series.extend_constant": [[758, "polars-series-extend-constant"]], "polars.Series.is_float": [[776, "polars-series-is-float"]], "polars.Series.lower_bound": [[794, "polars-series-lower-bound"]], "polars.Series.max": [[796, "polars-series-max"]], "polars.Series.dt.year": [[749, "polars-series-dt-year"]], "polars.Series.inner_dtype": [[768, "polars-series-inner-dtype"]], "polars.Series.dt.strftime": [[743, "polars-series-dt-strftime"]], "polars.Series.ewm_std": [[754, "polars-series-ewm-std"]], "polars.Series.is_first": [[775, "polars-series-is-first"]], "polars.Series.is_unique": [[786, "polars-series-is-unique"]], "polars.Series.mean": [[797, "polars-series-mean"]], "polars.Series.floor": [[763, "polars-series-floor"]], "polars.Series.dtype": [[750, "polars-series-dtype"]], "polars.Series.entropy": [[751, "polars-series-entropy"]], "polars.Series.fill_nan": [[759, "polars-series-fill-nan"]], "polars.Series.len": [[790, "polars-series-len"]], "polars.Series.is_duplicated": [[772, "polars-series-is-duplicated"]], "polars.Series.is_sorted": [[784, "polars-series-is-sorted"]], "polars.Series.is_in": [[777, "polars-series-is-in"]], "polars.Series.item": [[788, "polars-series-item"]], "polars.Series.ewm_var": [[755, "polars-series-ewm-var"]], "polars.Series.is_utf8": [[787, "polars-series-is-utf8"]], "polars.Series.dt.seconds": [[742, "polars-series-dt-seconds"]], "polars.Series.is_not_nan": [[780, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[781, "polars-series-is-not-null"]], "polars.Series.dt.truncate": [[745, "polars-series-dt-truncate"]], "polars.Series.dt.ordinal_day": [[737, "polars-series-dt-ordinal-day"]], "polars.Series.dt.weekday": [[747, "polars-series-dt-weekday"]], "polars.Series.dt.round": [[740, "polars-series-dt-round"]], "polars.Series.fill_null": [[760, "polars-series-fill-null"]], "polars.Series.is_nan": [[779, "polars-series-is-nan"]], "polars.Series.ewm_mean": [[753, "polars-series-ewm-mean"]], "polars.Series.explode": [[757, "polars-series-explode"]], "polars.Series.kurtosis": [[789, "polars-series-kurtosis"]], "polars.Series.dt.with_time_unit": [[748, "polars-series-dt-with-time-unit"]], "polars.Series.filter": [[761, "polars-series-filter"]], "polars.Series.estimated_size": [[752, "polars-series-estimated-size"]], "polars.Series.n_chunks": [[801, "polars-series-n-chunks"]], "polars.Series.median": [[798, "polars-series-median"]], "polars.Series.dt.week": [[746, "polars-series-dt-week"]], "polars.Series.exp": [[756, "polars-series-exp"]], "polars.Series.dt.quarter": [[738, "polars-series-dt-quarter"]], "polars.Series.head": [[767, "polars-series-head"]], "polars.Series.min": [[799, "polars-series-min"]], "polars.Series.name": [[803, "polars-series-name"]], "polars.Series.is_finite": [[774, "polars-series-is-finite"]], "polars.Series.is_infinite": [[778, "polars-series-is-infinite"]], "polars.Series.is_null": [[782, "polars-series-is-null"]], "polars.Series.log": [[792, "polars-series-log"]], "polars.Series.log10": [[793, "polars-series-log10"]], "polars.Series.is_boolean": [[771, "polars-series-is-boolean"]], "polars.Series.is_temporal": [[785, "polars-series-is-temporal"]], "polars.Series.map_dict": [[795, "polars-series-map-dict"]], "polars.Series.dt.second": [[741, "polars-series-dt-second"]], "polars.Series.dt.replace_time_zone": [[739, "polars-series-dt-replace-time-zone"]], "polars.Series.is_empty": [[773, "polars-series-is-empty"]], "polars.Series.interpolate": [[769, "polars-series-interpolate"]], "polars.Series.has_validity": [[765, "polars-series-has-validity"]], "polars.Series.limit": [[791, "polars-series-limit"]], "polars.Series.dt.timestamp": [[744, "polars-series-dt-timestamp"]], "polars.Series.is_numeric": [[783, "polars-series-is-numeric"]], "polars.Series.hash": [[766, "polars-series-hash"]], "polars.Series.is_between": [[770, "polars-series-is-between"]], "polars.Series.get_chunks": [[764, "polars-series-get-chunks"]], "polars.Series.arr.mean": [[674, "polars-series-arr-mean"]], "polars.Series.cumsum": [[705, "polars-series-cumsum"]], "polars.Series.dt.hours": [[721, "polars-series-dt-hours"]], "polars.Series.arr.take": [[682, "polars-series-arr-take"]], "polars.Series.clear": [[695, "polars-series-clear"]], "polars.Series.cummax": [[702, "polars-series-cummax"]], "polars.Series.dt.days": [[718, "polars-series-dt-days"]], "polars.Series.dt.nanosecond": [[734, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[736, "polars-series-dt-offset-by"]], "polars.Series.dt.day": [[717, "polars-series-dt-day"]], "polars.Series.cummin": [[703, "polars-series-cummin"]], "polars.Series.dt.month": [[733, "polars-series-dt-month"]], "polars.Series.arr.tail": [[681, "polars-series-arr-tail"]], "polars.Series.dt.hour": [[720, "polars-series-dt-hour"]], "polars.Series.bin.encode": [[687, "polars-series-bin-encode"]], "polars.Series.cumulative_eval": [[706, "polars-series-cumulative-eval"]], "polars.Series.arr.to_struct": [[683, "polars-series-arr-to-struct"]], "polars.Series.arr.sum": [[680, "polars-series-arr-sum"]], "polars.Series.cumprod": [[704, "polars-series-cumprod"]], "polars.Series.arr.unique": [[684, "polars-series-arr-unique"]], "polars.Series.dt.mean": [[724, "polars-series-dt-mean"]], "polars.Series.arr.last": [[671, "polars-series-arr-last"]], "polars.Series.dt.milliseconds": [[729, "polars-series-dt-milliseconds"]], "polars.Series.drop_nulls": [[712, "polars-series-drop-nulls"]], "polars.Series.dt.combine": [[715, "polars-series-dt-combine"]], "polars.Series.arr.slice": [[678, "polars-series-arr-slice"]], "polars.Series.dt.convert_time_zone": [[716, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.iso_year": [[722, "polars-series-dt-iso-year"]], "polars.Series.ceil": [[693, "polars-series-ceil"]], "polars.Series.dt.minute": [[731, "polars-series-dt-minute"]], "polars.Series.dt.minutes": [[732, "polars-series-dt-minutes"]], "polars.Series.bin.contains": [[685, "polars-series-bin-contains"]], "polars.Series.arr.min": [[675, "polars-series-arr-min"]], "polars.Series.diff": [[709, "polars-series-diff"]], "polars.Series.arr.sort": [[679, "polars-series-arr-sort"]], "polars.Series.dt.cast_time_unit": [[714, "polars-series-dt-cast-time-unit"]], "polars.Series.drop_nans": [[711, "polars-series-drop-nans"]], "polars.Series.dt": [[713, "polars-series-dt"]], "polars.Series.chunk_lengths": [[694, "polars-series-chunk-lengths"]], "polars.Series.clip": [[696, "polars-series-clip"]], "polars.Series.clip_min": [[698, "polars-series-clip-min"]], "polars.Series.cos": [[700, "polars-series-cos"]], "polars.Series.dt.millisecond": [[728, "polars-series-dt-millisecond"]], "polars.Series.arr.join": [[670, "polars-series-arr-join"]], "polars.Series.arr.shift": [[677, "polars-series-arr-shift"]], "polars.Series.cat": [[691, "polars-series-cat"]], "polars.Series.cast": [[690, "polars-series-cast"]], "polars.Series.cut": [[707, "polars-series-cut"]], "polars.Series.clone": [[699, "polars-series-clone"]], "polars.Series.bin.starts_with": [[689, "polars-series-bin-starts-with"]], "polars.Series.bin.decode": [[686, "polars-series-bin-decode"]], "polars.Series.dt.min": [[730, "polars-series-dt-min"]], "polars.Series.dt.microsecond": [[726, "polars-series-dt-microsecond"]], "polars.Series.clip_max": [[697, "polars-series-clip-max"]], "polars.Series.cat.set_ordering": [[692, "polars-series-cat-set-ordering"]], "polars.Series.arr.reverse": [[676, "polars-series-arr-reverse"]], "polars.Series.cosh": [[701, "polars-series-cosh"]], "polars.Series.dt.microseconds": [[727, "polars-series-dt-microseconds"]], "polars.Series.dt.nanoseconds": [[735, "polars-series-dt-nanoseconds"]], "polars.Series.dt.max": [[723, "polars-series-dt-max"]], "polars.Series.dt.epoch": [[719, "polars-series-dt-epoch"]], "polars.Series.dt.median": [[725, "polars-series-dt-median"]], "polars.Series.describe": [[708, "polars-series-describe"]], "polars.Series.dot": [[710, "polars-series-dot"]], "polars.Series.arr.max": [[673, "polars-series-arr-max"]], "polars.Series.bin.ends_with": [[688, "polars-series-bin-ends-with"]], "polars.Series.arr.lengths": [[672, "polars-series-arr-lengths"]], "polars.Series.struct.unnest": [[884, "polars-series-struct-unnest"]], "polars.Series.to_pandas": [[897, "polars-series-to-pandas"]], "polars.Series.str.starts_with": [[875, "polars-series-str-starts-with"]], "Export": [[914, "export"], [236, "export"]], "polars.Series.var": [[904, "polars-series-var"]], "Series": [[915, "series"]], "polars.Series.str.to_uppercase": [[879, "polars-series-str-to-uppercase"]], "polars.Series.struct.rename_fields": [[883, "polars-series-struct-rename-fields"]], "polars.Series.time_unit": [[891, "polars-series-time-unit"]], "Strings": [[918, "strings"], [548, "strings"]], "polars.Series.unique": [[900, "polars-series-unique"]], "polars.Series.str.strip": [[876, "polars-series-str-strip"]], "polars.Series.top_k": [[899, "polars-series-top-k"]], "Computation": [[912, "computation"], [542, "computation"], [234, "computation"]], "polars.Series.upper_bound": [[902, "polars-series-upper-bound"]], "polars.Series.to_dummies": [[893, "polars-series-to-dummies"]], "polars.Series.zip_with": [[906, "polars-series-zip-with"]], "polars.Series.take_every": [[888, "polars-series-take-every"]], "polars.Series.unique_counts": [[901, "polars-series-unique-counts"]], "Miscellaneous": [[916, "miscellaneous"], [637, "miscellaneous"], [552, "miscellaneous"], [546, "miscellaneous"], [239, "miscellaneous"]], "polars.Series.tail": [[886, "polars-series-tail"]], "polars.Series.to_frame": [[894, "polars-series-to-frame"]], "polars.Series.view": [[905, "polars-series-view"]], "Categories": [[911, "categories"], [540, "categories"]], "Manipulation/selection": [[917, "manipulation-selection"], [638, "manipulation-selection"], [547, "manipulation-selection"], [240, "manipulation-selection"]], "polars.Series.str.zfill": [[880, "polars-series-str-zfill"]], "polars.Series.take": [[887, "polars-series-take"]], "polars.Series.str.split_exact": [[873, "polars-series-str-split-exact"]], "Testing": [[922, "testing"]], "Asserts": [[922, "asserts"]], "Property-based testing": [[922, "property-based-testing"]], "Strategies": [[922, "strategies"]], "Strategy helpers": [[922, "strategy-helpers"]], "Array": [[907, "array"], [537, "array"]], "polars.Series.sum": [[885, "polars-series-sum"]], "polars.Series.str.slice": [[871, "polars-series-str-slice"]], "polars.Series.struct.fields": [[882, "polars-series-struct-fields"]], "Descriptive": [[913, "descriptive"], [634, "descriptive"], [235, "descriptive"]], "polars.Series.value_counts": [[903, "polars-series-value-counts"]], "polars.Series.to_numpy": [[896, "polars-series-to-numpy"]], "Binary": [[909, "binary"], [538, "binary"]], "polars.Series.str.splitn": [[874, "polars-series-str-splitn"]], "Attributes": [[908, "attributes"], [633, "attributes"], [233, "attributes"]], "polars.Series.str.strptime": [[877, "polars-series-str-strptime"]], "polars.Series.to_list": [[895, "polars-series-to-list"]], "Temporal": [[920, "temporal"], [550, "temporal"]], "polars.Series.str.to_lowercase": [[878, "polars-series-str-to-lowercase"]], "Struct": [[919, "struct"], [549, "struct"]], "Boolean": [[910, "boolean"], [539, "boolean"]], "Utils": [[923, "utils"]], "SQL": [[921, "sql"]], "Methods": [[921, "methods"]], "polars.Series.str.split": [[872, "polars-series-str-split"]], "polars.Series.tan": [[889, "polars-series-tan"]], "polars.Series.tanh": [[890, "polars-series-tanh"]], "polars.Series.to_arrow": [[892, "polars-series-to-arrow"]], "polars.Series.to_physical": [[898, "polars-series-to-physical"]], "polars.Series.struct.field": [[881, "polars-series-struct-field"]], "polars.internals.lazyframe.groupby.LazyGroupBy.max": [[625, "polars-internals-lazyframe-groupby-lazygroupby-max"]], "polars.Series.arg_max": [[652, "polars-series-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[618, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arr.count_match": [[663, "polars-series-arr-count-match"]], "polars.Series.arr.eval": [[665, "polars-series-arr-eval"]], "polars.Series.arr.first": [[667, "polars-series-arr-first"]], "polars.internals.lazyframe.groupby.LazyGroupBy.all": [[619, "polars-internals-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arr.get": [[668, "polars-series-arr-get"]], "polars.Series.arr.diff": [[664, "polars-series-arr-diff"]], "polars.Series.arg_unique": [[656, "polars-series-arg-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.mean": [[626, "polars-internals-lazyframe-groupby-lazygroupby-mean"]], "Read/write logical plan": [[637, "read-write-logical-plan"]], "polars.internals.lazyframe.groupby.LazyGroupBy.first": [[622, "polars-internals-lazyframe-groupby-lazygroupby-first"]], "polars.Series.append": [[644, "polars-series-append"]], "polars.Series.arg_min": [[653, "polars-series-arg-min"]], "LazyFrame": [[636, "lazyframe"]], "polars.Series.arccosh": [[647, "polars-series-arccosh"]], "polars.Series.arr.arg_min": [[660, "polars-series-arr-arg-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique": [[629, "polars-internals-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.take_every": [[608, "polars-lazyframe-take-every"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[623, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arr.arg_max": [[659, "polars-series-arr-arg-max"]], "polars.LazyFrame.with_row_count": [[616, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.tail": [[607, "polars-lazyframe-tail"]], "polars.LazyFrame.sum": [[606, "polars-lazyframe-sum"]], "polars.LazyFrame.unique": [[609, "polars-lazyframe-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.count": [[621, "polars-internals-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arr.concat": [[661, "polars-series-arr-concat"]], "polars.Series.arctan": [[650, "polars-series-arctan"]], "polars.LazyFrame.width": [[613, "polars-lazyframe-width"]], "polars.LazyFrame.sort": [[604, "polars-lazyframe-sort"]], "polars.Series.arr.head": [[669, "polars-series-arr-head"]], "polars.LazyFrame.write_json": [[617, "polars-lazyframe-write-json"]], "polars.internals.lazyframe.groupby.LazyGroupBy.quantile": [[630, "polars-internals-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.any": [[643, "polars-series-any"]], "polars.Series.apply": [[645, "polars-series-apply"]], "polars.Series.arcsinh": [[649, "polars-series-arcsinh"]], "polars.Series.arccos": [[646, "polars-series-arccos"]], "polars.LazyFrame.std": [[605, "polars-lazyframe-std"]], "polars.internals.lazyframe.groupby.LazyGroupBy.last": [[624, "polars-internals-lazyframe-groupby-lazygroupby-last"]], "polars.internals.lazyframe.groupby.LazyGroupBy.sum": [[631, "polars-internals-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arg_sort": [[654, "polars-series-arg-sort"]], "polars.LazyFrame.with_context": [[615, "polars-lazyframe-with-context"]], "polars.internals.lazyframe.groupby.LazyGroupBy.min": [[628, "polars-internals-lazyframe-groupby-lazygroupby-min"]], "polars.Series.arr": [[658, "polars-series-arr"]], "polars.Series.arcsin": [[648, "polars-series-arcsin"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[632, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arg_true": [[655, "polars-series-arg-true"]], "polars.LazyFrame.unnest": [[610, "polars-lazyframe-unnest"]], "polars.Series.arr.explode": [[666, "polars-series-arr-explode"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[620, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.alias": [[641, "polars-series-alias"]], "GroupBy": [[635, "groupby"], [237, "groupby"]], "polars.Series.all": [[642, "polars-series-all"]], "polars.LazyFrame.var": [[612, "polars-lazyframe-var"]], "polars.Series.arctanh": [[651, "polars-series-arctanh"]], "polars.internals.lazyframe.groupby.LazyGroupBy.median": [[627, "polars-internals-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arr.contains": [[662, "polars-series-arr-contains"]], "polars.LazyFrame.with_columns": [[614, "polars-lazyframe-with-columns"]], "polars.LazyFrame.update": [[611, "polars-lazyframe-update"]], "polars.LazyFrame.slice": [[603, "polars-lazyframe-slice"]], "polars.Series.argsort": [[657, "polars-series-argsort"]], "polars.Series.abs": [[640, "polars-series-abs"]], "polars.cumsum": [[505, "polars-cumsum"]], "polars.arg_sort_by": [[494, "polars-arg-sort-by"]], "polars.date": [[506, "polars-date"]], "polars.tail": [[534, "polars-tail"]], "polars.Expr.unique_counts": [[485, "polars-expr-unique-counts"]], "polars.fold": [[512, "polars-fold"]], "polars.Expr.unique": [[484, "polars-expr-unique"]], "polars.corr": [[500, "polars-corr"]], "polars.repeat": [[528, "polars-repeat"]], "polars.first": [[511, "polars-first"]], "polars.pearson_corr": [[525, "polars-pearson-corr"]], "polars.max": [[520, "polars-max"]], "polars.Expr.str.zfill": [[472, "polars-expr-str-zfill"]], "polars.cumfold": [[503, "polars-cumfold"]], "polars.Expr.str.to_uppercase": [[471, "polars-expr-str-to-uppercase"]], "polars.median": [[522, "polars-median"]], "polars.Expr.sum": [[476, "polars-expr-sum"]], "polars.avg": [[495, "polars-avg"]], "polars.Expr.struct.field": [[473, "polars-expr-struct-field"]], "polars.col": [[497, "polars-col"]], "polars.Expr.tanh": [[481, "polars-expr-tanh"]], "polars.Expr.tail": [[477, "polars-expr-tail"]], "polars.Expr.take": [[478, "polars-expr-take"]], "polars.Expr.to_physical": [[482, "polars-expr-to-physical"]], "polars.Expr.top_k": [[483, "polars-expr-top-k"]], "polars.apply": [[492, "polars-apply"]], "polars.coalesce": [[496, "polars-coalesce"]], "polars.cov": [[502, "polars-cov"]], "polars.reduce": [[527, "polars-reduce"]], "polars.select": [[529, "polars-select"]], "polars.Expr.tan": [[480, "polars-expr-tan"]], "polars.duration": [[508, "polars-duration"]], "polars.std": [[531, "polars-std"]], "polars.n_unique": [[524, "polars-n-unique"]], "polars.Expr.var": [[488, "polars-expr-var"]], "polars.list": [[517, "polars-list"]], "polars.count": [[501, "polars-count"]], "polars.element": [[509, "polars-element"]], "polars.min": [[523, "polars-min"]], "polars.map": [[519, "polars-map"]], "polars.format": [[513, "polars-format"]], "polars.var": [[535, "polars-var"]], "polars.Expr.upper_bound": [[486, "polars-expr-upper-bound"]], "polars.spearman_rank_corr": [[530, "polars-spearman-rank-corr"]], "polars.datetime": [[507, "polars-datetime"]], "polars.concat_str": [[499, "polars-concat-str"]], "polars.Expr.suffix": [[475, "polars-expr-suffix"]], "polars.cumreduce": [[504, "polars-cumreduce"]], "polars.Expr.take_every": [[479, "polars-expr-take-every"]], "polars.Expr.str.strptime": [[469, "polars-expr-str-strptime"]], "polars.Expr.value_counts": [[487, "polars-expr-value-counts"]], "polars.Expr.where": [[489, "polars-expr-where"]], "polars.from_epoch": [[514, "polars-from-epoch"]], "polars.sum": [[533, "polars-sum"]], "polars.head": [[516, "polars-head"]], "polars.mean": [[521, "polars-mean"]], "polars.Expr.struct.rename_fields": [[474, "polars-expr-struct-rename-fields"]], "polars.quantile": [[526, "polars-quantile"]], "polars.Expr.str.to_lowercase": [[470, "polars-expr-str-to-lowercase"]], "polars.exclude": [[510, "polars-exclude"]], "polars.groups": [[515, "polars-groups"]], "polars.concat_list": [[498, "polars-concat-list"]], "polars.lit": [[518, "polars-lit"]], "polars.all": [[490, "polars-all"]], "polars.struct": [[532, "polars-struct"]], "polars.any": [[491, "polars-any"]], "polars.arange": [[493, "polars-arange"]], "polars.Expr.nan_min": [[402, "polars-expr-nan-min"]], "polars.Expr.reinterpret": [[412, "polars-expr-reinterpret"]], "polars.Expr.set_sorted": [[429, "polars-expr-set-sorted"]], "polars.Expr.sinh": [[436, "polars-expr-sinh"]], "polars.Expr.shuffle": [[433, "polars-expr-shuffle"]], "polars.Expr.str.encode": [[447, "polars-expr-str-encode"]], "polars.Expr.sort_by": [[440, "polars-expr-sort-by"]], "polars.Expr.prefix": [[407, "polars-expr-prefix"]], "polars.Expr.std": [[442, "polars-expr-std"]], "polars.Expr.str.extract_all": [[451, "polars-expr-str-extract-all"]], "polars.Expr.str.extract": [[450, "polars-expr-str-extract"]], "polars.Expr.rolling_sum": [[424, "polars-expr-rolling-sum"]], "polars.Expr.rolling_max": [[417, "polars-expr-rolling-max"]], "polars.Expr.sample": [[427, "polars-expr-sample"]], "polars.Expr.str.n_chars": [[457, "polars-expr-str-n-chars"]], "polars.Expr.str.splitn": [[466, "polars-expr-str-splitn"]], "polars.Expr.sqrt": [[441, "polars-expr-sqrt"]], "polars.Expr.sign": [[434, "polars-expr-sign"]], "polars.Expr.quantile": [[409, "polars-expr-quantile"]], "polars.Expr.shift": [[430, "polars-expr-shift"]], "polars.Expr.str.decode": [[446, "polars-expr-str-decode"]], "polars.Expr.rechunk": [[411, "polars-expr-rechunk"]], "polars.Expr.sort": [[439, "polars-expr-sort"]], "polars.Expr.str.contains": [[444, "polars-expr-str-contains"]], "polars.Expr.pow": [[406, "polars-expr-pow"]], "polars.Expr.round": [[426, "polars-expr-round"]], "polars.Expr.pct_change": [[405, "polars-expr-pct-change"]], "polars.Expr.str.json_extract": [[452, "polars-expr-str-json-extract"]], "polars.Expr.sin": [[435, "polars-expr-sin"]], "polars.Expr.rolling_median": [[419, "polars-expr-rolling-median"]], "polars.Expr.shift_and_fill": [[431, "polars-expr-shift-and-fill"]], "polars.Expr.over": [[404, "polars-expr-over"]], "polars.Expr.product": [[408, "polars-expr-product"]], "polars.Expr.rolling_std": [[423, "polars-expr-rolling-std"]], "polars.Expr.shrink_dtype": [[432, "polars-expr-shrink-dtype"]], "polars.Expr.str.ends_with": [[448, "polars-expr-str-ends-with"]], "polars.Expr.rolling_mean": [[418, "polars-expr-rolling-mean"]], "polars.Expr.str.rstrip": [[462, "polars-expr-str-rstrip"]], "polars.Expr.rank": [[410, "polars-expr-rank"]], "polars.Expr.str.json_path_match": [[453, "polars-expr-str-json-path-match"]], "polars.Expr.str.lstrip": [[456, "polars-expr-str-lstrip"]], "polars.Expr.str.slice": [[463, "polars-expr-str-slice"]], "polars.Expr.str.replace_all": [[460, "polars-expr-str-replace-all"]], "polars.Expr.rolling_apply": [[416, "polars-expr-rolling-apply"]], "polars.Expr.rolling_skew": [[422, "polars-expr-rolling-skew"]], "polars.Expr.str.count_match": [[445, "polars-expr-str-count-match"]], "polars.Expr.str.split_exact": [[465, "polars-expr-str-split-exact"]], "polars.Expr.str.ljust": [[455, "polars-expr-str-ljust"]], "polars.Expr.rolling_min": [[420, "polars-expr-rolling-min"]], "polars.Expr.rolling_quantile": [[421, "polars-expr-rolling-quantile"]], "polars.Expr.str.parse_int": [[458, "polars-expr-str-parse-int"]], "polars.Expr.str.explode": [[449, "polars-expr-str-explode"]], "polars.Expr.str.concat": [[443, "polars-expr-str-concat"]], "polars.Expr.str.rjust": [[461, "polars-expr-str-rjust"]], "polars.Expr.null_count": [[403, "polars-expr-null-count"]], "polars.Expr.repeat_by": [[413, "polars-expr-repeat-by"]], "polars.Expr.str.split": [[464, "polars-expr-str-split"]], "polars.Expr.slice": [[438, "polars-expr-slice"]], "polars.Expr.str.strip": [[468, "polars-expr-str-strip"]], "polars.Expr.str.replace": [[459, "polars-expr-str-replace"]], "polars.Expr.str.starts_with": [[467, "polars-expr-str-starts-with"]], "polars.Expr.skew": [[437, "polars-expr-skew"]], "polars.Expr.reverse": [[415, "polars-expr-reverse"]], "polars.Expr.str.lengths": [[454, "polars-expr-str-lengths"]], "polars.Expr.search_sorted": [[428, "polars-expr-search-sorted"]], "polars.Expr.reshape": [[414, "polars-expr-reshape"]], "polars.Expr.rolling_var": [[425, "polars-expr-rolling-var"]], "polars.Expr.meta.output_name": [[394, "polars-expr-meta-output-name"]], "polars.Expr.extend_constant": [[353, "polars-expr-extend-constant"]], "polars.Expr.limit": [[381, "polars-expr-limit"]], "polars.Expr.is_not_nan": [[373, "polars-expr-is-not-nan"]], "polars.Expr.dt.year": [[345, "polars-expr-dt-year"]], "polars.Expr.filter": [[356, "polars-expr-filter"]], "polars.Expr.meta.has_multiple_outputs": [[392, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.log": [[383, "polars-expr-log"]], "polars.Expr.list": [[382, "polars-expr-list"]], "polars.Expr.min": [[398, "polars-expr-min"]], "polars.Expr.hash": [[361, "polars-expr-hash"]], "polars.Expr.is_not_null": [[374, "polars-expr-is-not-null"]], "polars.Expr.mean": [[390, "polars-expr-mean"]], "polars.Expr.keep_name": [[377, "polars-expr-keep-name"]], "polars.Expr.explode": [[352, "polars-expr-explode"]], "polars.Expr.is_null": [[375, "polars-expr-is-null"]], "polars.Expr.is_infinite": [[370, "polars-expr-is-infinite"]], "polars.Expr.is_duplicated": [[366, "polars-expr-is-duplicated"]], "polars.Expr.is_not": [[372, "polars-expr-is-not"]], "polars.Expr.dt.strftime": [[339, "polars-expr-dt-strftime"]], "polars.Expr.exp": [[351, "polars-expr-exp"]], "polars.Expr.meta.is_regex_projection": [[393, "polars-expr-meta-is-regex-projection"]], "polars.Expr.len": [[380, "polars-expr-len"]], "polars.Expr.is_nan": [[371, "polars-expr-is-nan"]], "polars.Expr.flatten": [[358, "polars-expr-flatten"]], "polars.Expr.dt.with_time_unit": [[344, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.timestamp": [[340, "polars-expr-dt-timestamp"]], "polars.Expr.lower_bound": [[385, "polars-expr-lower-bound"]], "polars.Expr.log10": [[384, "polars-expr-log10"]], "polars.Expr.forward_fill": [[360, "polars-expr-forward-fill"]], "polars.Expr.dt.truncate": [[341, "polars-expr-dt-truncate"]], "polars.Expr.is_unique": [[376, "polars-expr-is-unique"]], "polars.Expr.mode": [[399, "polars-expr-mode"]], "polars.Expr.first": [[357, "polars-expr-first"]], "polars.Expr.is_between": [[365, "polars-expr-is-between"]], "polars.Expr.ewm_mean": [[347, "polars-expr-ewm-mean"]], "polars.Expr.exclude": [[350, "polars-expr-exclude"]], "polars.Expr.n_unique": [[400, "polars-expr-n-unique"]], "polars.Expr.is_finite": [[367, "polars-expr-is-finite"]], "polars.Expr.fill_nan": [[354, "polars-expr-fill-nan"]], "polars.Expr.inspect": [[363, "polars-expr-inspect"]], "polars.Expr.floor": [[359, "polars-expr-floor"]], "polars.Expr.dt.weekday": [[343, "polars-expr-dt-weekday"]], "polars.Expr.dt.round": [[336, "polars-expr-dt-round"]], "polars.Expr.max": [[389, "polars-expr-max"]], "polars.Expr.dt.second": [[337, "polars-expr-dt-second"]], "polars.Expr.interpolate": [[364, "polars-expr-interpolate"]], "polars.Expr.entropy": [[346, "polars-expr-entropy"]], "polars.Expr.is_first": [[368, "polars-expr-is-first"]], "polars.Expr.map_dict": [[388, "polars-expr-map-dict"]], "polars.Expr.meta.pop": [[395, "polars-expr-meta-pop"]], "polars.Expr.head": [[362, "polars-expr-head"]], "polars.Expr.meta.undo_aliases": [[397, "polars-expr-meta-undo-aliases"]], "polars.Expr.last": [[379, "polars-expr-last"]], "polars.Expr.meta.root_names": [[396, "polars-expr-meta-root-names"]], "polars.Expr.map": [[386, "polars-expr-map"]], "polars.Expr.dt.week": [[342, "polars-expr-dt-week"]], "polars.Expr.fill_null": [[355, "polars-expr-fill-null"]], "polars.Expr.ewm_var": [[349, "polars-expr-ewm-var"]], "polars.Expr.median": [[391, "polars-expr-median"]], "polars.Expr.map_alias": [[387, "polars-expr-map-alias"]], "polars.Expr.is_in": [[369, "polars-expr-is-in"]], "polars.Expr.dt.seconds": [[338, "polars-expr-dt-seconds"]], "polars.Expr.nan_max": [[401, "polars-expr-nan-max"]], "polars.Expr.kurtosis": [[378, "polars-expr-kurtosis"]], "polars.Expr.ewm_std": [[348, "polars-expr-ewm-std"]], "polars.Expr.dt.replace_time_zone": [[335, "polars-expr-dt-replace-time-zone"]], "polars.LazyFrame.read_json": [[593, "polars-lazyframe-read-json"]], "Functions": [[552, "functions"], [543, "functions"], [241, "functions"]], "Conversion": [[552, "conversion"]], "Eager/Lazy functions": [[552, "eager-lazy-functions"]], "Parallelization": [[552, "parallelization"]], "StringCache": [[552, "stringcache"]], "Input/output": [[554, "input-output"]], "CSV": [[554, "csv"]], "Feather/ IPC": [[554, "feather-ipc"]], "Parquet": [[554, "parquet"]], "Database": [[554, "database"]], "JSON": [[554, "json"]], "AVRO": [[554, "avro"]], "Excel": [[554, "excel"]], "Delta Lake": [[554, "delta-lake"]], "Datasets": [[554, "datasets"]], "BatchedCsvReader": [[554, "batchedcsvreader"]], "polars.LazyFrame.sink_ipc": [[601, "polars-lazyframe-sink-ipc"]], "polars.when": [[536, "polars-when"]], "polars.LazyFrame.join_asof": [[579, "polars-lazyframe-join-asof"]], "polars.LazyFrame.melt": [[587, "polars-lazyframe-melt"]], "polars.LazyFrame.clear": [[557, "polars-lazyframe-clear"]], "Expressions": [[544, "expressions"]], "Meta": [[545, "meta"]], "polars.LazyFrame.clone": [[558, "polars-lazyframe-clone"]], "polars.LazyFrame.fetch": [[566, "polars-lazyframe-fetch"]], "polars.LazyFrame.head": [[575, "polars-lazyframe-head"]], "polars.LazyFrame.limit": [[582, "polars-lazyframe-limit"]], "polars.LazyFrame.merge_sorted": [[588, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.map": [[583, "polars-lazyframe-map"]], "polars.LazyFrame.explain": [[564, "polars-lazyframe-explain"]], "polars.LazyFrame.groupby_dynamic": [[573, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.interpolate": [[577, "polars-lazyframe-interpolate"]], "polars.LazyFrame.rename": [[594, "polars-lazyframe-rename"]], "polars.LazyFrame.sink_parquet": [[602, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.drop_nulls": [[562, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.groupby": [[572, "polars-lazyframe-groupby"]], "polars.LazyFrame.cache": [[556, "polars-lazyframe-cache"]], "polars.LazyFrame.median": [[586, "polars-lazyframe-median"]], "polars.LazyFrame.quantile": [[592, "polars-lazyframe-quantile"]], "polars.LazyFrame.explode": [[565, "polars-lazyframe-explode"]], "polars.LazyFrame.shift_and_fill": [[599, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.reverse": [[595, "polars-lazyframe-reverse"]], "polars.LazyFrame.fill_nan": [[567, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.mean": [[585, "polars-lazyframe-mean"]], "polars.LazyFrame.drop": [[561, "polars-lazyframe-drop"]], "polars.LazyFrame.min": [[589, "polars-lazyframe-min"]], "polars.LazyFrame.show_graph": [[600, "polars-lazyframe-show-graph"]], "polars.LazyFrame.inspect": [[576, "polars-lazyframe-inspect"]], "polars.LazyFrame.dtypes": [[563, "polars-lazyframe-dtypes"]], "polars.LazyFrame.first": [[570, "polars-lazyframe-first"]], "polars.LazyFrame.schema": [[596, "polars-lazyframe-schema"]], "polars.LazyFrame.collect": [[559, "polars-lazyframe-collect"]], "polars.LazyFrame.shift": [[598, "polars-lazyframe-shift"]], "polars.LazyFrame.from_json": [[571, "polars-lazyframe-from-json"]], "polars.LazyFrame.columns": [[560, "polars-lazyframe-columns"]], "polars.LazyFrame.fill_null": [[568, "polars-lazyframe-fill-null"]], "polars.LazyFrame.last": [[580, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[581, "polars-lazyframe-lazy"]], "polars.LazyFrame.pipe": [[590, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[591, "polars-lazyframe-profile"]], "polars.LazyFrame.select": [[597, "polars-lazyframe-select"]], "polars.LazyFrame.filter": [[569, "polars-lazyframe-filter"]], "Columns / names": [[541, "columns-names"]], "Window": [[551, "window"]], "polars.LazyFrame.join": [[578, "polars-lazyframe-join"]], "API reference": [[553, "api-reference"]], "polars.LazyFrame.max": [[584, "polars-lazyframe-max"]], "polars.LazyFrame.groupby_rolling": [[574, "polars-lazyframe-groupby-rolling"]], "polars.Expr.cumsum": [[308, "polars-expr-cumsum"]], "polars.Expr.dt.nanoseconds": [[331, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.unique": [[288, "polars-expr-arr-unique"]], "polars.Expr.cumulative_eval": [[309, "polars-expr-cumulative-eval"]], "polars.Expr.arr.reverse": [[280, "polars-expr-arr-reverse"]], "polars.Expr.arr.explode": [[270, "polars-expr-arr-explode"]], "polars.Expr.arr.sort": [[283, "polars-expr-arr-sort"]], "polars.Expr.dt.milliseconds": [[326, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.hour": [[320, "polars-expr-dt-hour"]], "polars.Expr.cat.set_ordering": [[296, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.join": [[274, "polars-expr-arr-join"]], "polars.Expr.arr.eval": [[269, "polars-expr-arr-eval"]], "polars.Expr.cosh": [[302, "polars-expr-cosh"]], "polars.Expr.dt.day": [[317, "polars-expr-dt-day"]], "polars.Expr.dt.nanosecond": [[330, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.mean": [[278, "polars-expr-arr-mean"]], "polars.Expr.dot": [[311, "polars-expr-dot"]], "polars.Expr.dt.month": [[329, "polars-expr-dt-month"]], "polars.Expr.cast": [[295, "polars-expr-cast"]], "polars.Expr.arr.shift": [[281, "polars-expr-arr-shift"]], "polars.Expr.arr.sum": [[284, "polars-expr-arr-sum"]], "polars.Expr.bin.decode": [[291, "polars-expr-bin-decode"]], "polars.Expr.cummax": [[305, "polars-expr-cummax"]], "polars.Expr.arr.head": [[273, "polars-expr-arr-head"]], "polars.Expr.dt.millisecond": [[325, "polars-expr-dt-millisecond"]], "polars.Expr.drop_nulls": [[313, "polars-expr-drop-nulls"]], "polars.Expr.dt.epoch": [[319, "polars-expr-dt-epoch"]], "polars.Expr.dt.offset_by": [[332, "polars-expr-dt-offset-by"]], "polars.Expr.ceil": [[297, "polars-expr-ceil"]], "polars.Expr.cumprod": [[307, "polars-expr-cumprod"]], "polars.Expr.arr.diff": [[268, "polars-expr-arr-diff"]], "polars.Expr.bin.contains": [[290, "polars-expr-bin-contains"]], "polars.Expr.arr.to_struct": [[287, "polars-expr-arr-to-struct"]], "polars.Expr.arr.slice": [[282, "polars-expr-arr-slice"]], "polars.Expr.clip_min": [[300, "polars-expr-clip-min"]], "polars.Expr.clip_max": [[299, "polars-expr-clip-max"]], "polars.Expr.bin.starts_with": [[294, "polars-expr-bin-starts-with"]], "polars.Expr.arr.get": [[272, "polars-expr-arr-get"]], "polars.Expr.dt.combine": [[315, "polars-expr-dt-combine"]], "polars.Expr.diff": [[310, "polars-expr-diff"]], "polars.Expr.arr.lengths": [[276, "polars-expr-arr-lengths"]], "polars.Expr.drop_nans": [[312, "polars-expr-drop-nans"]], "polars.Expr.arr.max": [[277, "polars-expr-arr-max"]], "polars.Expr.dt.iso_year": [[322, "polars-expr-dt-iso-year"]], "polars.Expr.arr.last": [[275, "polars-expr-arr-last"]], "polars.Expr.dt.quarter": [[334, "polars-expr-dt-quarter"]], "polars.Expr.dt.minutes": [[328, "polars-expr-dt-minutes"]], "polars.Expr.dt.microsecond": [[323, "polars-expr-dt-microsecond"]], "polars.Expr.cummin": [[306, "polars-expr-cummin"]], "polars.Expr.dt.convert_time_zone": [[316, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.cast_time_unit": [[314, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.microseconds": [[324, "polars-expr-dt-microseconds"]], "polars.Expr.bin.encode": [[292, "polars-expr-bin-encode"]], "polars.Expr.arr.take": [[286, "polars-expr-arr-take"]], "polars.Expr.backward_fill": [[289, "polars-expr-backward-fill"]], "polars.Expr.count": [[303, "polars-expr-count"]], "polars.Expr.arr.min": [[279, "polars-expr-arr-min"]], "polars.Expr.arr.tail": [[285, "polars-expr-arr-tail"]], "polars.Expr.dt.days": [[318, "polars-expr-dt-days"]], "polars.Expr.arr.first": [[271, "polars-expr-arr-first"]], "polars.Expr.bin.ends_with": [[293, "polars-expr-bin-ends-with"]], "polars.Expr.cumcount": [[304, "polars-expr-cumcount"]], "polars.Expr.dt.ordinal_day": [[333, "polars-expr-dt-ordinal-day"]], "polars.Expr.cos": [[301, "polars-expr-cos"]], "polars.Expr.clip": [[298, "polars-expr-clip"]], "polars.Expr.dt.hours": [[321, "polars-expr-dt-hours"]], "polars.Expr.dt.minute": [[327, "polars-expr-dt-minute"]], "polars.DataFrame.to_arrow": [[198, "polars-dataframe-to-arrow"]], "polars.DataFrame.is_empty": [[155, "polars-dataframe-is-empty"]], "polars.DataFrame.pivot": [[175, "polars-dataframe-pivot"]], "polars.DataFrame.fill_nan": [[136, "polars-dataframe-fill-nan"]], "polars.DataFrame.null_count": [[172, "polars-dataframe-null-count"]], "polars.DataFrame.product": [[176, "polars-dataframe-product"]], "polars.DataFrame.shift_and_fill": [[190, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.frame_equal": [[141, "polars-dataframe-frame-equal"]], "polars.DataFrame.fold": [[140, "polars-dataframe-fold"]], "polars.DataFrame.slice": [[192, "polars-dataframe-slice"]], "polars.DataFrame.shape": [[188, "polars-dataframe-shape"]], "polars.DataFrame.filter": [[138, "polars-dataframe-filter"]], "polars.DataFrame.rename": [[179, "polars-dataframe-rename"]], "polars.DataFrame.replace_at_idx": [[181, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.iter_rows": [[158, "polars-dataframe-iter-rows"]], "polars.DataFrame.max": [[164, "polars-dataframe-max"]], "polars.DataFrame.take_every": [[197, "polars-dataframe-take-every"]], "polars.DataFrame.get_columns": [[143, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby_rolling": [[147, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.median": [[166, "polars-dataframe-median"]], "polars.DataFrame.row": [[183, "polars-dataframe-row"]], "polars.DataFrame.get_column": [[142, "polars-dataframe-get-column"]], "polars.DataFrame.sample": [[185, "polars-dataframe-sample"]], "polars.DataFrame.select": [[187, "polars-dataframe-select"]], "polars.DataFrame.fill_null": [[137, "polars-dataframe-fill-null"]], "polars.DataFrame.height": [[150, "polars-dataframe-height"]], "polars.DataFrame.head": [[149, "polars-dataframe-head"]], "polars.DataFrame.interpolate": [[153, "polars-dataframe-interpolate"]], "polars.DataFrame.merge_sorted": [[168, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[169, "polars-dataframe-min"]], "polars.DataFrame.groupby_dynamic": [[146, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.extend": [[135, "polars-dataframe-extend"]], "polars.DataFrame.quantile": [[177, "polars-dataframe-quantile"]], "polars.DataFrame.tail": [[196, "polars-dataframe-tail"]], "polars.DataFrame.std": [[194, "polars-dataframe-std"]], "polars.DataFrame.limit": [[163, "polars-dataframe-limit"]], "polars.DataFrame.rows": [[184, "polars-dataframe-rows"]], "polars.DataFrame.insert_at_idx": [[152, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.shift": [[189, "polars-dataframe-shift"]], "polars.DataFrame.rechunk": [[178, "polars-dataframe-rechunk"]], "polars.DataFrame.partition_by": [[173, "polars-dataframe-partition-by"]], "polars.DataFrame.is_unique": [[156, "polars-dataframe-is-unique"]], "polars.DataFrame.reverse": [[182, "polars-dataframe-reverse"]], "polars.DataFrame.glimpse": [[144, "polars-dataframe-glimpse"]], "polars.DataFrame.hstack": [[151, "polars-dataframe-hstack"]], "polars.DataFrame.explode": [[134, "polars-dataframe-explode"]], "polars.DataFrame.item": [[157, "polars-dataframe-item"]], "polars.DataFrame.find_idx_by_name": [[139, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.to_dicts": [[200, "polars-dataframe-to-dicts"]], "polars.DataFrame.iter_slices": [[159, "polars-dataframe-iter-slices"]], "polars.DataFrame.hash_rows": [[148, "polars-dataframe-hash-rows"]], "polars.DataFrame.join_asof": [[161, "polars-dataframe-join-asof"]], "polars.DataFrame.pipe": [[174, "polars-dataframe-pipe"]], "polars.DataFrame.groupby": [[145, "polars-dataframe-groupby"]], "polars.DataFrame.join": [[160, "polars-dataframe-join"]], "polars.DataFrame.n_unique": [[171, "polars-dataframe-n-unique"]], "polars.DataFrame.mean": [[165, "polars-dataframe-mean"]], "polars.DataFrame.replace": [[180, "polars-dataframe-replace"]], "polars.DataFrame.shrink_to_fit": [[191, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sort": [[193, "polars-dataframe-sort"]], "polars.DataFrame.to_dict": [[199, "polars-dataframe-to-dict"]], "polars.DataFrame.is_duplicated": [[154, "polars-dataframe-is-duplicated"]], "polars.DataFrame.schema": [[186, "polars-dataframe-schema"]], "polars.DataFrame.n_chunks": [[170, "polars-dataframe-n-chunks"]], "polars.DataFrame.sum": [[195, "polars-dataframe-sum"]], "polars.DataFrame.lazy": [[162, "polars-dataframe-lazy"]], "polars.DataFrame.melt": [[167, "polars-dataframe-melt"]], "polars.Expr.agg_groups": [[245, "polars-expr-agg-groups"]], "polars.Expr.arctanh": [[256, "polars-expr-arctanh"]], "polars.DataFrame.to_pandas": [[203, "polars-dataframe-to-pandas"]], "polars.Expr.arctan": [[255, "polars-expr-arctan"]], "polars.Expr.arg_sort": [[259, "polars-expr-arg-sort"]], "polars.Expr.arr.count_match": [[267, "polars-expr-arr-count-match"]], "polars.internals.dataframe.groupby.GroupBy.max": [[225, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.arccos": [[251, "polars-expr-arccos"]], "polars.DataFrame.to_numpy": [[202, "polars-dataframe-to-numpy"]], "polars.DataFrame.width": [[214, "polars-dataframe-width"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[218, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.median": [[227, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.alias": [[246, "polars-expr-alias"]], "polars.Expr.abs": [[244, "polars-expr-abs"]], "polars.internals.dataframe.groupby.GroupBy.count": [[221, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.arcsin": [[253, "polars-expr-arcsin"]], "polars.internals.dataframe.groupby.GroupBy.last": [[224, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.to_dummies": [[201, "polars-dataframe-to-dummies"]], "polars.DataFrame.upsample": [[211, "polars-dataframe-upsample"]], "polars.Expr.arg_unique": [[261, "polars-expr-arg-unique"]], "Exceptions": [[242, "exceptions"]], "polars.Expr.arccosh": [[252, "polars-expr-arccosh"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[220, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[217, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arr.arg_min": [[264, "polars-expr-arr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[226, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.DataFrame.with_row_count": [[216, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.all": [[219, "polars-internals-dataframe-groupby-groupby-all"]], "polars.DataFrame.transpose": [[206, "polars-dataframe-transpose"]], "polars.DataFrame.unnest": [[208, "polars-dataframe-unnest"]], "polars.Expr.arcsinh": [[254, "polars-expr-arcsinh"]], "polars.DataFrame.unique": [[207, "polars-dataframe-unique"]], "polars.Expr.arg_max": [[257, "polars-expr-arg-max"]], "polars.DataFrame.update": [[210, "polars-dataframe-update"]], "polars.internals.dataframe.groupby.GroupBy.first": [[222, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.arr.contains": [[266, "polars-expr-arr-contains"]], "polars.Expr.arr.arg_max": [[263, "polars-expr-arr-arg-max"]], "polars.DataFrame.to_series": [[204, "polars-dataframe-to-series"]], "polars.DataFrame.vstack": [[213, "polars-dataframe-vstack"]], "polars.Expr.argsort": [[262, "polars-expr-argsort"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[232, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.DataFrame.var": [[212, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[230, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.arg_min": [[258, "polars-expr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[229, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arg_true": [[260, "polars-expr-arg-true"]], "polars.Expr.any": [[248, "polars-expr-any"]], "Data types": [[241, "data-types"]], "Numeric": [[241, "numeric"]], "Date / Time": [[241, "date-time"]], "Nested": [[241, "nested"]], "Other": [[241, "other"]], "polars.internals.dataframe.groupby.GroupBy.min": [[228, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.append": [[249, "polars-expr-append"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[231, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.arr.concat": [[265, "polars-expr-arr-concat"]], "DataFrame": [[238, "dataframe"]], "polars.Expr.all": [[247, "polars-expr-all"]], "polars.Expr.apply": [[250, "polars-expr-apply"]], "polars.DataFrame.to_struct": [[205, "polars-dataframe-to-struct"]], "polars.internals.dataframe.groupby.GroupBy.head": [[223, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.with_columns": [[215, "polars-dataframe-with-columns"]], "polars.DataFrame.unstack": [[209, "polars-dataframe-unstack"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[26, "polars.DataFrame.write_database"]], "write_ipc() (polars.dataframe method)": [[27, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[28, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[29, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[30, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[31, "polars.DataType"]], "__init__() (polars.datatype method)": [[31, "polars.DataType.__init__"]], "date (class in polars)": [[32, "polars.Date"]], "__init__() (polars.date method)": [[32, "polars.Date.__init__"]], "datetime (class in polars)": [[33, "polars.Datetime"]], "__init__() (polars.datetime method)": [[33, "polars.Datetime.__init__"]], "duration (class in polars)": [[34, "polars.Duration"]], "__init__() (polars.duration method)": [[34, "polars.Duration.__init__"]], "float32 (class in polars)": [[35, "polars.Float32"]], "__init__() (polars.float32 method)": [[35, "polars.Float32.__init__"]], "float64 (class in polars)": [[36, "polars.Float64"]], "__init__() (polars.float64 method)": [[36, "polars.Float64.__init__"]], "int16 (class in polars)": [[37, "polars.Int16"]], "__init__() (polars.int16 method)": [[37, "polars.Int16.__init__"]], "int32 (class in polars)": [[38, "polars.Int32"]], "__init__() (polars.int32 method)": [[38, "polars.Int32.__init__"]], "int64 (class in polars)": [[39, "polars.Int64"]], "__init__() (polars.int64 method)": [[39, "polars.Int64.__init__"]], "int8 (class in polars)": [[40, "polars.Int8"]], "__init__() (polars.int8 method)": [[40, "polars.Int8.__init__"]], "list (class in polars)": [[41, "polars.List"]], "__init__() (polars.list method)": [[41, "polars.List.__init__"]], "null (class in polars)": [[42, "polars.Null"]], "__init__() (polars.null method)": [[42, "polars.Null.__init__"]], "object (class in polars)": [[43, "polars.Object"]], "__init__() (polars.object method)": [[43, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[44, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[45, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[46, "polars.SQLContext.register"]], "stringcache (class in polars)": [[47, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[47, "polars.StringCache.__init__"]], "struct (class in polars)": [[48, "polars.Struct"]], "__init__() (polars.struct method)": [[48, "polars.Struct.__init__"]], "time (class in polars)": [[49, "polars.Time"]], "__init__() (polars.time method)": [[49, "polars.Time.__init__"]], "uint16 (class in polars)": [[50, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[50, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[51, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[51, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[52, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[52, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[53, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[53, "polars.UInt8.__init__"]], "unknown (class in polars)": [[54, "polars.Unknown"]], "__init__() (polars.unknown method)": [[54, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[55, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[55, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[56, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[57, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[58, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[59, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[60, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[61, "polars.arg_where"]], "build_info() (in module polars)": [[62, "polars.build_info"]], "collect_all() (in module polars)": [[63, "polars.collect_all"]], "concat() (in module polars)": [[64, "polars.concat"]], "cut() (in module polars)": [[65, "polars.cut"]], "date_range() (in module polars)": [[66, "polars.date_range"]], "arrowerror": [[67, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[68, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[69, "polars.exceptions.ComputeError"]], "duplicateerror": [[70, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[71, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[72, "polars.exceptions.NoDataError"]], "norowsreturned": [[73, "polars.exceptions.NoRowsReturned"]], "panicexception": [[74, "polars.exceptions.PanicException"]], "rowsexception": [[75, "polars.exceptions.RowsException"]], "schemaerror": [[76, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[77, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[78, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[79, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[80, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[81, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[82, "polars.from_dataframe"]], "from_dict() (in module polars)": [[83, "polars.from_dict"]], "from_dicts() (in module polars)": [[84, "polars.from_dicts"]], "from_numpy() (in module polars)": [[85, "polars.from_numpy"]], "from_pandas() (in module polars)": [[86, "polars.from_pandas"]], "from_records() (in module polars)": [[87, "polars.from_records"]], "get_dummies() (in module polars)": [[88, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[89, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[90, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[91, "polars.ones"]], "read_avro() (in module polars)": [[92, "polars.read_avro"]], "read_csv() (in module polars)": [[93, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[94, "polars.read_csv_batched"]], "read_database() (in module polars)": [[95, "polars.read_database"]], "read_delta() (in module polars)": [[96, "polars.read_delta"]], "read_excel() (in module polars)": [[97, "polars.read_excel"]], "read_ipc() (in module polars)": [[98, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[99, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[100, "polars.read_json"]], "read_ndjson() (in module polars)": [[101, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[102, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[103, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[104, "polars.scan_csv"]], "scan_delta() (in module polars)": [[105, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[106, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[107, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[108, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[109, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[110, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[111, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[112, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[113, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[113, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[114, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[115, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[116, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[117, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[118, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[119, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[122, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[123, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[124, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[125, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[126, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[127, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[128, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[129, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[130, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[131, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[132, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[133, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[134, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[135, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[136, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[137, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[138, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[139, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[140, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[141, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[142, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[143, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[144, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[145, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[146, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[147, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[148, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[149, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[150, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[151, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[152, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[153, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[154, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[155, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[156, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[157, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[158, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[159, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[160, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[161, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[162, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[163, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[164, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[165, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[166, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[167, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[168, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[169, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[170, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[171, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[172, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[173, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[174, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[175, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[176, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[177, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[178, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[179, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[180, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[181, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[182, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[183, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[184, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[185, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[186, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[187, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[188, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[189, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[190, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[191, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[192, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[193, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[194, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[195, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[196, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[197, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[198, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[199, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[200, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[201, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[202, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[203, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[204, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[205, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[206, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[207, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[208, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[209, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[210, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[211, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[212, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[213, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[214, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[215, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[216, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[232, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[244, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[245, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[246, "polars.Expr.alias"]], "all() (polars.expr method)": [[247, "polars.Expr.all"]], "any() (polars.expr method)": [[248, "polars.Expr.any"]], "append() (polars.expr method)": [[249, "polars.Expr.append"]], "apply() (polars.expr method)": [[250, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[251, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[252, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[253, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[254, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[255, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[256, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[257, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[258, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[259, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[260, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[261, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[262, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[263, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[264, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[265, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[266, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[267, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[268, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[269, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[270, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[271, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[272, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[273, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[274, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[275, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[276, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[277, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[278, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[279, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[280, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[281, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[282, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[283, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[284, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[285, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[286, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[287, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[288, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[289, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[290, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[291, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[292, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[293, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[294, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[295, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[296, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[297, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[298, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[299, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[300, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[301, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[302, "polars.Expr.cosh"]], "count() (polars.expr method)": [[303, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[304, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[305, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[306, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[307, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[308, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[309, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[310, "polars.Expr.diff"]], "dot() (polars.expr method)": [[311, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[312, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[313, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[314, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[315, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[316, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[317, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[318, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[319, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[320, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[321, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[322, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[323, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[324, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[327, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[328, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[329, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[330, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[331, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[332, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[333, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[334, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[335, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[336, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[337, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[338, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[339, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[340, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[341, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[342, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[343, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[344, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[345, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[346, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[347, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[348, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[349, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[350, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[351, "polars.Expr.exp"]], "explode() (polars.expr method)": [[352, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[353, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[354, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[355, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[356, "polars.Expr.filter"]], "first() (polars.expr method)": [[357, "polars.Expr.first"]], "flatten() (polars.expr method)": [[358, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[359, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[360, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[361, "polars.Expr.hash"]], "head() (polars.expr method)": [[362, "polars.Expr.head"]], "inspect() (polars.expr method)": [[363, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[364, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[365, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[366, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[367, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[368, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[369, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[370, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[371, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[372, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[373, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[374, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[375, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[376, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[377, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[378, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[379, "polars.Expr.last"]], "len() (polars.expr method)": [[380, "polars.Expr.len"]], "limit() (polars.expr method)": [[381, "polars.Expr.limit"]], "list() (polars.expr method)": [[382, "polars.Expr.list"]], "log() (polars.expr method)": [[383, "polars.Expr.log"]], "log10() (polars.expr method)": [[384, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[385, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[386, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[387, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[388, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[389, "polars.Expr.max"]], "mean() (polars.expr method)": [[390, "polars.Expr.mean"]], "median() (polars.expr method)": [[391, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[392, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[393, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[394, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[395, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[396, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[397, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[398, "polars.Expr.min"]], "mode() (polars.expr method)": [[399, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[400, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[401, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[402, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[403, "polars.Expr.null_count"]], "over() (polars.expr method)": [[404, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[405, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[406, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[407, "polars.Expr.prefix"]], "product() (polars.expr method)": [[408, "polars.Expr.product"]], "quantile() (polars.expr method)": [[409, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[410, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[411, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[412, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[413, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[414, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[415, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[416, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[417, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[418, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[419, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[420, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[421, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[422, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[423, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[424, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[425, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[426, "polars.Expr.round"]], "sample() (polars.expr method)": [[427, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[428, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[429, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[430, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[431, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[432, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[433, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[434, "polars.Expr.sign"]], "sin() (polars.expr method)": [[435, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[436, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[437, "polars.Expr.skew"]], "slice() (polars.expr method)": [[438, "polars.Expr.slice"]], "sort() (polars.expr method)": [[439, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[440, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[441, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[442, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[443, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[444, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[445, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[446, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[447, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[448, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[449, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[450, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[451, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[452, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[453, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[454, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[455, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[456, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[457, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[458, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[459, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[460, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[461, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[462, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[463, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[464, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[465, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[466, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[467, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[468, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[469, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[470, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[471, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[472, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[473, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[474, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[475, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[476, "polars.Expr.sum"]], "tail() (polars.expr method)": [[477, "polars.Expr.tail"]], "take() (polars.expr method)": [[478, "polars.Expr.take"]], "take_every() (polars.expr method)": [[479, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[480, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[481, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[482, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[483, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[484, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[485, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[486, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[487, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[488, "polars.Expr.var"]], "where() (polars.expr method)": [[489, "polars.Expr.where"]], "all() (in module polars)": [[490, "polars.all"]], "any() (in module polars)": [[491, "polars.any"]], "apply() (in module polars)": [[492, "polars.apply"]], "arange() (in module polars)": [[493, "polars.arange"]], "arg_sort_by() (in module polars)": [[494, "polars.arg_sort_by"]], "avg() (in module polars)": [[495, "polars.avg"]], "coalesce() (in module polars)": [[496, "polars.coalesce"]], "col() (in module polars)": [[497, "polars.col"]], "concat_list() (in module polars)": [[498, "polars.concat_list"]], "concat_str() (in module polars)": [[499, "polars.concat_str"]], "corr() (in module polars)": [[500, "polars.corr"]], "count() (in module polars)": [[501, "polars.count"]], "cov() (in module polars)": [[502, "polars.cov"]], "cumfold() (in module polars)": [[503, "polars.cumfold"]], "cumreduce() (in module polars)": [[504, "polars.cumreduce"]], "cumsum() (in module polars)": [[505, "polars.cumsum"]], "date() (in module polars)": [[506, "polars.date"]], "datetime() (in module polars)": [[507, "polars.datetime"]], "duration() (in module polars)": [[508, "polars.duration"]], "element() (in module polars)": [[509, "polars.element"]], "exclude() (in module polars)": [[510, "polars.exclude"]], "first() (in module polars)": [[511, "polars.first"]], "fold() (in module polars)": [[512, "polars.fold"]], "format() (in module polars)": [[513, "polars.format"]], "from_epoch() (in module polars)": [[514, "polars.from_epoch"]], "groups() (in module polars)": [[515, "polars.groups"]], "head() (in module polars)": [[516, "polars.head"]], "list() (in module polars)": [[517, "polars.list"]], "lit() (in module polars)": [[518, "polars.lit"]], "map() (in module polars)": [[519, "polars.map"]], "max() (in module polars)": [[520, "polars.max"]], "mean() (in module polars)": [[521, "polars.mean"]], "median() (in module polars)": [[522, "polars.median"]], "min() (in module polars)": [[523, "polars.min"]], "n_unique() (in module polars)": [[524, "polars.n_unique"]], "pearson_corr() (in module polars)": [[525, "polars.pearson_corr"]], "quantile() (in module polars)": [[526, "polars.quantile"]], "reduce() (in module polars)": [[527, "polars.reduce"]], "repeat() (in module polars)": [[528, "polars.repeat"]], "select() (in module polars)": [[529, "polars.select"]], "spearman_rank_corr() (in module polars)": [[530, "polars.spearman_rank_corr"]], "std() (in module polars)": [[531, "polars.std"]], "struct() (in module polars)": [[532, "polars.struct"]], "sum() (in module polars)": [[533, "polars.sum"]], "tail() (in module polars)": [[534, "polars.tail"]], "var() (in module polars)": [[535, "polars.var"]], "when() (in module polars)": [[536, "polars.when"]], "cache() (polars.lazyframe method)": [[556, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[557, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[558, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[559, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[560, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[561, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[562, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[563, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[564, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[565, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[566, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[567, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[568, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[569, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[570, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[571, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[572, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[573, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[574, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[575, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[576, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[577, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[578, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[579, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[580, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[581, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[582, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[583, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[584, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[585, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[586, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[587, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[588, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[589, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[590, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[591, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[592, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[593, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[594, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[595, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[596, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[597, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[598, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[599, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[600, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[601, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[602, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[603, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[604, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[605, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[606, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[607, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[608, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[609, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[610, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[611, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[612, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[613, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[614, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[615, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[616, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[617, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[618, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.internals.lazyframe.groupby.lazygroupby method)": [[619, "polars.internals.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[620, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.internals.lazyframe.groupby.lazygroupby method)": [[621, "polars.internals.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.internals.lazyframe.groupby.lazygroupby method)": [[622, "polars.internals.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[623, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.internals.lazyframe.groupby.lazygroupby method)": [[624, "polars.internals.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.internals.lazyframe.groupby.lazygroupby method)": [[625, "polars.internals.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.internals.lazyframe.groupby.lazygroupby method)": [[626, "polars.internals.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.internals.lazyframe.groupby.lazygroupby method)": [[627, "polars.internals.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.internals.lazyframe.groupby.lazygroupby method)": [[628, "polars.internals.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.internals.lazyframe.groupby.lazygroupby method)": [[629, "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.internals.lazyframe.groupby.lazygroupby method)": [[630, "polars.internals.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.internals.lazyframe.groupby.lazygroupby method)": [[631, "polars.internals.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[632, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[640, "polars.Series.abs"]], "alias() (polars.series method)": [[641, "polars.Series.alias"]], "all() (polars.series method)": [[642, "polars.Series.all"]], "any() (polars.series method)": [[643, "polars.Series.any"]], "append() (polars.series method)": [[644, "polars.Series.append"]], "apply() (polars.series method)": [[645, "polars.Series.apply"]], "arccos() (polars.series method)": [[646, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[647, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[648, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[649, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[650, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[651, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[652, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[653, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[654, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[655, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[656, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[657, "polars.Series.argsort"]], "arr (polars.series attribute)": [[658, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[659, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[660, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[661, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[662, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[663, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[664, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[665, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[666, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[667, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[668, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[669, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[670, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[671, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[672, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[673, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[674, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[675, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[676, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[677, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[678, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[679, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[680, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[681, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[682, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[683, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[684, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[685, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[686, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[687, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[688, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[689, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[690, "polars.Series.cast"]], "cat (polars.series attribute)": [[691, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[692, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[693, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[694, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[695, "polars.Series.clear"]], "clip() (polars.series method)": [[696, "polars.Series.clip"]], "clip_max() (polars.series method)": [[697, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[698, "polars.Series.clip_min"]], "clone() (polars.series method)": [[699, "polars.Series.clone"]], "cos() (polars.series method)": [[700, "polars.Series.cos"]], "cosh() (polars.series method)": [[701, "polars.Series.cosh"]], "cummax() (polars.series method)": [[702, "polars.Series.cummax"]], "cummin() (polars.series method)": [[703, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[704, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[705, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[706, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[707, "polars.Series.cut"]], "describe() (polars.series method)": [[708, "polars.Series.describe"]], "diff() (polars.series method)": [[709, "polars.Series.diff"]], "dot() (polars.series method)": [[710, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[711, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[712, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[713, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[714, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[715, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[716, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[717, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[718, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[719, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[720, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[721, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[722, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[723, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[724, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[725, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[726, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[727, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[728, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[729, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[730, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[731, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[732, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[733, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[734, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[735, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[736, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[737, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[738, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[739, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[740, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[741, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[742, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[743, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[744, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[745, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[746, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[747, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[748, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[749, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[750, "polars.Series.dtype"]], "entropy() (polars.series method)": [[751, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[752, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[753, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[754, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[755, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[756, "polars.Series.exp"]], "explode() (polars.series method)": [[757, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[758, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[759, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[760, "polars.Series.fill_null"]], "filter() (polars.series method)": [[761, "polars.Series.filter"]], "flags (polars.series attribute)": [[762, "polars.Series.flags"]], "floor() (polars.series method)": [[763, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[764, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[765, "polars.Series.has_validity"]], "hash() (polars.series method)": [[766, "polars.Series.hash"]], "head() (polars.series method)": [[767, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[768, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[769, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[770, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[771, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[772, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[773, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[774, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[775, "polars.Series.is_first"]], "is_float() (polars.series method)": [[776, "polars.Series.is_float"]], "is_in() (polars.series method)": [[777, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[778, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[779, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[780, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[781, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[782, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[783, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[784, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[785, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[786, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[787, "polars.Series.is_utf8"]], "item() (polars.series method)": [[788, "polars.Series.item"]], "kurtosis() (polars.series method)": [[789, "polars.Series.kurtosis"]], "len() (polars.series method)": [[790, "polars.Series.len"]], "limit() (polars.series method)": [[791, "polars.Series.limit"]], "log() (polars.series method)": [[792, "polars.Series.log"]], "log10() (polars.series method)": [[793, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[794, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[795, "polars.Series.map_dict"]], "max() (polars.series method)": [[796, "polars.Series.max"]], "mean() (polars.series method)": [[797, "polars.Series.mean"]], "median() (polars.series method)": [[798, "polars.Series.median"]], "min() (polars.series method)": [[799, "polars.Series.min"]], "mode() (polars.series method)": [[800, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[801, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[802, "polars.Series.n_unique"]], "name (polars.series attribute)": [[803, "polars.Series.name"]], "nan_max() (polars.series method)": [[804, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[805, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[806, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[807, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[808, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[809, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[810, "polars.Series.peak_min"]], "product() (polars.series method)": [[811, "polars.Series.product"]], "quantile() (polars.series method)": [[812, "polars.Series.quantile"]], "rank() (polars.series method)": [[813, "polars.Series.rank"]], "rechunk() (polars.series method)": [[814, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[815, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[816, "polars.Series.rename"]], "reshape() (polars.series method)": [[817, "polars.Series.reshape"]], "reverse() (polars.series method)": [[818, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[819, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[820, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[821, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[822, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[823, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[824, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[825, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[826, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[827, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[828, "polars.Series.rolling_var"]], "round() (polars.series method)": [[829, "polars.Series.round"]], "sample() (polars.series method)": [[830, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[831, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[832, "polars.Series.series_equal"]], "set() (polars.series method)": [[833, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[834, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[835, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[836, "polars.Series.shape"]], "shift() (polars.series method)": [[837, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[838, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[839, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[840, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[841, "polars.Series.shuffle"]], "sign() (polars.series method)": [[842, "polars.Series.sign"]], "sin() (polars.series method)": [[843, "polars.Series.sin"]], "sinh() (polars.series method)": [[844, "polars.Series.sinh"]], "skew() (polars.series method)": [[845, "polars.Series.skew"]], "slice() (polars.series method)": [[846, "polars.Series.slice"]], "sort() (polars.series method)": [[847, "polars.Series.sort"]], "sqrt() (polars.series method)": [[848, "polars.Series.sqrt"]], "std() (polars.series method)": [[849, "polars.Series.std"]], "str (polars.series attribute)": [[850, "polars.Series.str"]], "concat() (polars.series.str method)": [[851, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[852, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[853, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[854, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[855, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[856, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[857, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[858, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[859, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[860, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[861, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[862, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[863, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[864, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[865, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[866, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[867, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[868, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[869, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[870, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[871, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[872, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[873, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[874, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[875, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[876, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[877, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[878, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[879, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[880, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[881, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[882, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[883, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[884, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[885, "polars.Series.sum"]], "tail() (polars.series method)": [[886, "polars.Series.tail"]], "take() (polars.series method)": [[887, "polars.Series.take"]], "take_every() (polars.series method)": [[888, "polars.Series.take_every"]], "tan() (polars.series method)": [[889, "polars.Series.tan"]], "tanh() (polars.series method)": [[890, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[891, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[892, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[893, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[894, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[895, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[896, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[897, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[898, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[899, "polars.Series.top_k"]], "unique() (polars.series method)": [[900, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[901, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[902, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[903, "polars.Series.value_counts"]], "var() (polars.series method)": [[904, "polars.Series.var"]], "view() (polars.series method)": [[905, "polars.Series.view"]], "zip_with() (polars.series method)": [[906, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[921, "polars.SQLContext"]]}})